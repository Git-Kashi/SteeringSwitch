
scrollwheel_demo_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000880  0800cec0  0800cec0  0001cec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d740  0800d740  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800d740  0800d740  0001d740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d748  0800d748  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d748  0800d748  0001d748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d74c  0800d74c  0001d74c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800d750  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a54  20000210  0800d960  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002c64  0800d960  00022c64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f3a8  00000000  00000000  00020283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002116  00000000  00000000  0002f62b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d28  00000000  00000000  00031748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a2a  00000000  00000000  00032470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021988  00000000  00000000  00032e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011048  00000000  00000000  00054822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5c24  00000000  00000000  0006586a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000050c8  00000000  00000000  0012b490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00130558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cea8 	.word	0x0800cea8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800cea8 	.word	0x0800cea8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b9a6 	b.w	8000f6c <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f83c 	bl	8000ca4 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff5b 	bl	8000afc <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fcd1 	bl	8000618 <__aeabi_dmul>
 8000c76:	f7ff ffa7 	bl	8000bc8 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc52 	bl	8000524 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fcc8 	bl	8000618 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fb0a 	bl	80002a8 <__aeabi_dsub>
 8000c94:	f7ff ff98 	bl	8000bc8 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <__udivmoddi4>:
 8000ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca8:	9e08      	ldr	r6, [sp, #32]
 8000caa:	460d      	mov	r5, r1
 8000cac:	4604      	mov	r4, r0
 8000cae:	460f      	mov	r7, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14a      	bne.n	8000d4a <__udivmoddi4+0xa6>
 8000cb4:	428a      	cmp	r2, r1
 8000cb6:	4694      	mov	ip, r2
 8000cb8:	d965      	bls.n	8000d86 <__udivmoddi4+0xe2>
 8000cba:	fab2 f382 	clz	r3, r2
 8000cbe:	b143      	cbz	r3, 8000cd2 <__udivmoddi4+0x2e>
 8000cc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc4:	f1c3 0220 	rsb	r2, r3, #32
 8000cc8:	409f      	lsls	r7, r3
 8000cca:	fa20 f202 	lsr.w	r2, r0, r2
 8000cce:	4317      	orrs	r7, r2
 8000cd0:	409c      	lsls	r4, r3
 8000cd2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cd6:	fa1f f58c 	uxth.w	r5, ip
 8000cda:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cde:	0c22      	lsrs	r2, r4, #16
 8000ce0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ce8:	fb01 f005 	mul.w	r0, r1, r5
 8000cec:	4290      	cmp	r0, r2
 8000cee:	d90a      	bls.n	8000d06 <__udivmoddi4+0x62>
 8000cf0:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cf8:	f080 811c 	bcs.w	8000f34 <__udivmoddi4+0x290>
 8000cfc:	4290      	cmp	r0, r2
 8000cfe:	f240 8119 	bls.w	8000f34 <__udivmoddi4+0x290>
 8000d02:	3902      	subs	r1, #2
 8000d04:	4462      	add	r2, ip
 8000d06:	1a12      	subs	r2, r2, r0
 8000d08:	b2a4      	uxth	r4, r4
 8000d0a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d0e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d12:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d16:	fb00 f505 	mul.w	r5, r0, r5
 8000d1a:	42a5      	cmp	r5, r4
 8000d1c:	d90a      	bls.n	8000d34 <__udivmoddi4+0x90>
 8000d1e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d22:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x294>
 8000d2a:	42a5      	cmp	r5, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x294>
 8000d30:	4464      	add	r4, ip
 8000d32:	3802      	subs	r0, #2
 8000d34:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d38:	1b64      	subs	r4, r4, r5
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	b11e      	cbz	r6, 8000d46 <__udivmoddi4+0xa2>
 8000d3e:	40dc      	lsrs	r4, r3
 8000d40:	2300      	movs	r3, #0
 8000d42:	e9c6 4300 	strd	r4, r3, [r6]
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0xbc>
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	f000 80ed 	beq.w	8000f2e <__udivmoddi4+0x28a>
 8000d54:	2100      	movs	r1, #0
 8000d56:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d60:	fab3 f183 	clz	r1, r3
 8000d64:	2900      	cmp	r1, #0
 8000d66:	d149      	bne.n	8000dfc <__udivmoddi4+0x158>
 8000d68:	42ab      	cmp	r3, r5
 8000d6a:	d302      	bcc.n	8000d72 <__udivmoddi4+0xce>
 8000d6c:	4282      	cmp	r2, r0
 8000d6e:	f200 80f8 	bhi.w	8000f62 <__udivmoddi4+0x2be>
 8000d72:	1a84      	subs	r4, r0, r2
 8000d74:	eb65 0203 	sbc.w	r2, r5, r3
 8000d78:	2001      	movs	r0, #1
 8000d7a:	4617      	mov	r7, r2
 8000d7c:	2e00      	cmp	r6, #0
 8000d7e:	d0e2      	beq.n	8000d46 <__udivmoddi4+0xa2>
 8000d80:	e9c6 4700 	strd	r4, r7, [r6]
 8000d84:	e7df      	b.n	8000d46 <__udivmoddi4+0xa2>
 8000d86:	b902      	cbnz	r2, 8000d8a <__udivmoddi4+0xe6>
 8000d88:	deff      	udf	#255	; 0xff
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 8090 	bne.w	8000eb4 <__udivmoddi4+0x210>
 8000d94:	1a8a      	subs	r2, r1, r2
 8000d96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9a:	fa1f fe8c 	uxth.w	lr, ip
 8000d9e:	2101      	movs	r1, #1
 8000da0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da4:	fb07 2015 	mls	r0, r7, r5, r2
 8000da8:	0c22      	lsrs	r2, r4, #16
 8000daa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dae:	fb0e f005 	mul.w	r0, lr, r5
 8000db2:	4290      	cmp	r0, r2
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x124>
 8000db6:	eb1c 0202 	adds.w	r2, ip, r2
 8000dba:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dbe:	d202      	bcs.n	8000dc6 <__udivmoddi4+0x122>
 8000dc0:	4290      	cmp	r0, r2
 8000dc2:	f200 80cb 	bhi.w	8000f5c <__udivmoddi4+0x2b8>
 8000dc6:	4645      	mov	r5, r8
 8000dc8:	1a12      	subs	r2, r2, r0
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd0:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x14e>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de8:	d202      	bcs.n	8000df0 <__udivmoddi4+0x14c>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	f200 80bb 	bhi.w	8000f66 <__udivmoddi4+0x2c2>
 8000df0:	4610      	mov	r0, r2
 8000df2:	eba4 040e 	sub.w	r4, r4, lr
 8000df6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfa:	e79f      	b.n	8000d3c <__udivmoddi4+0x98>
 8000dfc:	f1c1 0720 	rsb	r7, r1, #32
 8000e00:	408b      	lsls	r3, r1
 8000e02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e0e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e12:	40fd      	lsrs	r5, r7
 8000e14:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e18:	4323      	orrs	r3, r4
 8000e1a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e1e:	fa1f fe8c 	uxth.w	lr, ip
 8000e22:	fb09 5518 	mls	r5, r9, r8, r5
 8000e26:	0c1c      	lsrs	r4, r3, #16
 8000e28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e2c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e30:	42a5      	cmp	r5, r4
 8000e32:	fa02 f201 	lsl.w	r2, r2, r1
 8000e36:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3a:	d90b      	bls.n	8000e54 <__udivmoddi4+0x1b0>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e44:	f080 8088 	bcs.w	8000f58 <__udivmoddi4+0x2b4>
 8000e48:	42a5      	cmp	r5, r4
 8000e4a:	f240 8085 	bls.w	8000f58 <__udivmoddi4+0x2b4>
 8000e4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e52:	4464      	add	r4, ip
 8000e54:	1b64      	subs	r4, r4, r5
 8000e56:	b29d      	uxth	r5, r3
 8000e58:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e5c:	fb09 4413 	mls	r4, r9, r3, r4
 8000e60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e64:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e68:	45a6      	cmp	lr, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x1da>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e74:	d26c      	bcs.n	8000f50 <__udivmoddi4+0x2ac>
 8000e76:	45a6      	cmp	lr, r4
 8000e78:	d96a      	bls.n	8000f50 <__udivmoddi4+0x2ac>
 8000e7a:	3b02      	subs	r3, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e82:	fba3 9502 	umull	r9, r5, r3, r2
 8000e86:	eba4 040e 	sub.w	r4, r4, lr
 8000e8a:	42ac      	cmp	r4, r5
 8000e8c:	46c8      	mov	r8, r9
 8000e8e:	46ae      	mov	lr, r5
 8000e90:	d356      	bcc.n	8000f40 <__udivmoddi4+0x29c>
 8000e92:	d053      	beq.n	8000f3c <__udivmoddi4+0x298>
 8000e94:	b156      	cbz	r6, 8000eac <__udivmoddi4+0x208>
 8000e96:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9a:	eb64 040e 	sbc.w	r4, r4, lr
 8000e9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea2:	40ca      	lsrs	r2, r1
 8000ea4:	40cc      	lsrs	r4, r1
 8000ea6:	4317      	orrs	r7, r2
 8000ea8:	e9c6 7400 	strd	r7, r4, [r6]
 8000eac:	4618      	mov	r0, r3
 8000eae:	2100      	movs	r1, #0
 8000eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb4:	f1c3 0120 	rsb	r1, r3, #32
 8000eb8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ebc:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec4:	409d      	lsls	r5, r3
 8000ec6:	432a      	orrs	r2, r5
 8000ec8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ed8:	0c11      	lsrs	r1, r2, #16
 8000eda:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ede:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee2:	428d      	cmp	r5, r1
 8000ee4:	fa04 f403 	lsl.w	r4, r4, r3
 8000ee8:	d908      	bls.n	8000efc <__udivmoddi4+0x258>
 8000eea:	eb1c 0101 	adds.w	r1, ip, r1
 8000eee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef2:	d22f      	bcs.n	8000f54 <__udivmoddi4+0x2b0>
 8000ef4:	428d      	cmp	r5, r1
 8000ef6:	d92d      	bls.n	8000f54 <__udivmoddi4+0x2b0>
 8000ef8:	3802      	subs	r0, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1b49      	subs	r1, r1, r5
 8000efe:	b292      	uxth	r2, r2
 8000f00:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f04:	fb07 1115 	mls	r1, r7, r5, r1
 8000f08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f0c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f10:	4291      	cmp	r1, r2
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x282>
 8000f14:	eb1c 0202 	adds.w	r2, ip, r2
 8000f18:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f1c:	d216      	bcs.n	8000f4c <__udivmoddi4+0x2a8>
 8000f1e:	4291      	cmp	r1, r2
 8000f20:	d914      	bls.n	8000f4c <__udivmoddi4+0x2a8>
 8000f22:	3d02      	subs	r5, #2
 8000f24:	4462      	add	r2, ip
 8000f26:	1a52      	subs	r2, r2, r1
 8000f28:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f2c:	e738      	b.n	8000da0 <__udivmoddi4+0xfc>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e708      	b.n	8000d46 <__udivmoddi4+0xa2>
 8000f34:	4639      	mov	r1, r7
 8000f36:	e6e6      	b.n	8000d06 <__udivmoddi4+0x62>
 8000f38:	4610      	mov	r0, r2
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x90>
 8000f3c:	4548      	cmp	r0, r9
 8000f3e:	d2a9      	bcs.n	8000e94 <__udivmoddi4+0x1f0>
 8000f40:	ebb9 0802 	subs.w	r8, r9, r2
 8000f44:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	e7a3      	b.n	8000e94 <__udivmoddi4+0x1f0>
 8000f4c:	4645      	mov	r5, r8
 8000f4e:	e7ea      	b.n	8000f26 <__udivmoddi4+0x282>
 8000f50:	462b      	mov	r3, r5
 8000f52:	e794      	b.n	8000e7e <__udivmoddi4+0x1da>
 8000f54:	4640      	mov	r0, r8
 8000f56:	e7d1      	b.n	8000efc <__udivmoddi4+0x258>
 8000f58:	46d0      	mov	r8, sl
 8000f5a:	e77b      	b.n	8000e54 <__udivmoddi4+0x1b0>
 8000f5c:	3d02      	subs	r5, #2
 8000f5e:	4462      	add	r2, ip
 8000f60:	e732      	b.n	8000dc8 <__udivmoddi4+0x124>
 8000f62:	4608      	mov	r0, r1
 8000f64:	e70a      	b.n	8000d7c <__udivmoddi4+0xd8>
 8000f66:	4464      	add	r4, ip
 8000f68:	3802      	subs	r0, #2
 8000f6a:	e742      	b.n	8000df2 <__udivmoddi4+0x14e>

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <__io_getchar>:
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
return ch;
}

GETCHAR_PROTOTYPE    // scanfに関する
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
uint8_t ch = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	71fb      	strb	r3, [r7, #7]
__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <__io_getchar+0x2c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2208      	movs	r2, #8
 8000f80:	621a      	str	r2, [r3, #32]
HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f82:	1df9      	adds	r1, r7, #7
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295
 8000f88:	2201      	movs	r2, #1
 8000f8a:	4804      	ldr	r0, [pc, #16]	; (8000f9c <__io_getchar+0x2c>)
 8000f8c:	f005 fafc 	bl	8006588 <HAL_UART_Receive>
return ch;
 8000f90:	79fb      	ldrb	r3, [r7, #7]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000308 	.word	0x20000308

08000fa0 <write_double_to_eeprom>:


// eepromへの書き込みのための関数
// 注意：C言語では、使用する関数は、使用する場所から情報に記述されていなければならない（上から順にコンパイルされるため）
// この関数はcalibrationに使われるためそれよりも上方に記述する必要がある。そうでない場合エラーが出る。
void write_double_to_eeprom(double data, uint16_t address) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af04      	add	r7, sp, #16
 8000fa6:	ed87 0b02 	vstr	d0, [r7, #8]
 8000faa:	4603      	mov	r3, r0
 8000fac:	80fb      	strh	r3, [r7, #6]
    uint8_t byte_data[sizeof(double)]={};    // sizeof(double)はdouble型のバイト数、すなわち8。データ型はint。
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
    memcpy(byte_data, &data, sizeof(double));    // 変数dataのアドレスをbyte_dataの戦闘要素アドレスにコピー
 8000fb6:	f107 0310 	add.w	r3, r7, #16
 8000fba:	f107 0208 	add.w	r2, r7, #8
 8000fbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fc2:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_I2C_Mem_Write(&hi2c1, eeprom_address <<1, address, I2C_MEMADD_SIZE_16BIT, byte_data, sizeof(double), 1000);
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <write_double_to_eeprom+0x58>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	b299      	uxth	r1, r3
 8000fd0:	88fa      	ldrh	r2, [r7, #6]
 8000fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd6:	9302      	str	r3, [sp, #8]
 8000fd8:	2308      	movs	r3, #8
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <write_double_to_eeprom+0x5c>)
 8000fe6:	f003 f9cb 	bl	8004380 <HAL_I2C_Mem_Write>
    HAL_Delay(5);    // 【重要】 EEPROM書き込み待ち必要時間5ms(max)を待つ
 8000fea:	2005      	movs	r0, #5
 8000fec:	f002 fea0 	bl	8003d30 <HAL_Delay>
     * 	uint32_t Timeout)			タイムアウト 1000ms
     *
     * 	C言語では，配列名自身が先頭要素のアドレスを表わすことになっている．
     * 	たとえば，配列要素 a[0] のアドレスについては，a とだけ書けばよい． 長たらしく &a[0] と書く必要はない．
     */
}
 8000ff0:	bf00      	nop
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000002 	.word	0x20000002
 8000ffc:	2000022c 	.word	0x2000022c

08001000 <read_double_from_eeprom>:


// eepromから値を書き出すための関数
double read_double_from_eeprom(uint16_t address) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af04      	add	r7, sp, #16
 8001006:	4603      	mov	r3, r0
 8001008:	80fb      	strh	r3, [r7, #6]
    double data;
    uint8_t byte_data[sizeof(double)];
    // EEPROMからバイト単位でデータを読み出す
    HAL_I2C_Mem_Read(&hi2c1, eeprom_address <<1, address, I2C_MEMADD_SIZE_16BIT, byte_data, sizeof(double), 1000);
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <read_double_from_eeprom+0x54>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	b29b      	uxth	r3, r3
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	b299      	uxth	r1, r3
 8001014:	88fa      	ldrh	r2, [r7, #6]
 8001016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101a:	9302      	str	r3, [sp, #8]
 800101c:	2308      	movs	r3, #8
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2302      	movs	r3, #2
 8001028:	480b      	ldr	r0, [pc, #44]	; (8001058 <read_double_from_eeprom+0x58>)
 800102a:	f003 fabd 	bl	80045a8 <HAL_I2C_Mem_Read>
    // バイト配列をdouble型に変換
    memcpy(&data, byte_data, sizeof(double));
 800102e:	f107 0108 	add.w	r1, r7, #8
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	2208      	movs	r2, #8
 8001038:	4618      	mov	r0, r3
 800103a:	f007 fe56 	bl	8008cea <memcpy>
//    Debug用code;
//    printf("\n[read] address = %d", address);
//    printf("[read] data = %f\n",data);
//    printf("[read] byte_data = %d,%d,%d,%d,%d,%d,%d,%d\n",byte_data[0],byte_data[1],byte_data[2],byte_data[3],byte_data[4],byte_data[5],byte_data[6],byte_data[7]);

    return data;
 800103e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001042:	ec43 2b17 	vmov	d7, r2, r3
}
 8001046:	eeb0 0a47 	vmov.f32	s0, s14
 800104a:	eef0 0a67 	vmov.f32	s1, s15
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000002 	.word	0x20000002
 8001058:	2000022c 	.word	0x2000022c
 800105c:	00000000 	.word	0x00000000

08001060 <calibration>:



void calibration() {
 8001060:	b5b0      	push	{r4, r5, r7, lr}
 8001062:	b0a0      	sub	sp, #128	; 0x80
 8001064:	af04      	add	r7, sp, #16

	char str = '\0';    // 初期値null入れておく
 8001066:	2300      	movs	r3, #0
 8001068:	73fb      	strb	r3, [r7, #15]
	uint8_t s1_bxyz[7] = {0};    /* 7byte生データ(ST, Bx x2, By x2, Bz x2) の読み値 sensor1側*/
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	2100      	movs	r1, #0
 8001074:	460a      	mov	r2, r1
 8001076:	801a      	strh	r2, [r3, #0]
 8001078:	460a      	mov	r2, r1
 800107a:	709a      	strb	r2, [r3, #2]
	uint8_t s2_bxyz[7] = {0};    /* 7byte生データ(ST, Bx x2, By x2, Bz x2) の読み値 sensor2側*/
 800107c:	2300      	movs	r3, #0
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2100      	movs	r1, #0
 8001084:	460a      	mov	r2, r1
 8001086:	801a      	strh	r2, [r3, #0]
 8001088:	460a      	mov	r2, r1
 800108a:	709a      	strb	r2, [r3, #2]

	fflush(stdin);    // ひとつまえの命令の改行文字が残っているのでクリア
 800108c:	4ba2      	ldr	r3, [pc, #648]	; (8001318 <calibration+0x2b8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	4618      	mov	r0, r3
 8001094:	f007 fab4 	bl	8008600 <fflush>
    printf("\n|| calibration mode ||\n");
 8001098:	48a0      	ldr	r0, [pc, #640]	; (800131c <calibration+0x2bc>)
 800109a:	f007 fbf5 	bl	8008888 <puts>

    /* STEP1 : キータッチとホイール回転を16回繰り返して１周分のBx,By,Bzを取得 */
    for (int i = 0; i < 16; i++) {
 800109e:	2300      	movs	r3, #0
 80010a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80010a2:	e097      	b.n	80011d4 <calibration+0x174>
        printf("press the Enter key to get (bx%d, by%d, bz%d).\n", i, i, i);
 80010a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80010a8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80010aa:	489d      	ldr	r0, [pc, #628]	; (8001320 <calibration+0x2c0>)
 80010ac:	f007 fb7e 	bl	80087ac <iprintf>
        scanf("%c", &str);    // どのキーを押してもscanfから抜けられる
 80010b0:	f107 030f 	add.w	r3, r7, #15
 80010b4:	4619      	mov	r1, r3
 80010b6:	489b      	ldr	r0, [pc, #620]	; (8001324 <calibration+0x2c4>)
 80010b8:	f007 fbee 	bl	8008898 <iscanf>
        HAL_I2C_Mem_Read(&hi2c1, dev_address_1 <<1, 0x17, 1, s1_bxyz, 7, 1000);
 80010bc:	4b9a      	ldr	r3, [pc, #616]	; (8001328 <calibration+0x2c8>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	b299      	uxth	r1, r3
 80010c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	2307      	movs	r3, #7
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	f107 0308 	add.w	r3, r7, #8
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2301      	movs	r3, #1
 80010d8:	2217      	movs	r2, #23
 80010da:	4894      	ldr	r0, [pc, #592]	; (800132c <calibration+0x2cc>)
 80010dc:	f003 fa64 	bl	80045a8 <HAL_I2C_Mem_Read>
        s1_raw_bx[i] = (s1_bxyz[5] << 8) | s1_bxyz[6];
 80010e0:	7b7b      	ldrb	r3, [r7, #13]
 80010e2:	021b      	lsls	r3, r3, #8
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	7bbb      	ldrb	r3, [r7, #14]
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b219      	sxth	r1, r3
 80010ee:	4a90      	ldr	r2, [pc, #576]	; (8001330 <calibration+0x2d0>)
 80010f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        s1_raw_by[i] = (s1_bxyz[3] << 8) | s1_bxyz[4];
 80010f6:	7afb      	ldrb	r3, [r7, #11]
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	7b3b      	ldrb	r3, [r7, #12]
 80010fe:	b21b      	sxth	r3, r3
 8001100:	4313      	orrs	r3, r2
 8001102:	b219      	sxth	r1, r3
 8001104:	4a8b      	ldr	r2, [pc, #556]	; (8001334 <calibration+0x2d4>)
 8001106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001108:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        s1_raw_bz[i] = (s1_bxyz[1] << 8) | s1_bxyz[2];
 800110c:	7a7b      	ldrb	r3, [r7, #9]
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	b21a      	sxth	r2, r3
 8001112:	7abb      	ldrb	r3, [r7, #10]
 8001114:	b21b      	sxth	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b219      	sxth	r1, r3
 800111a:	4a87      	ldr	r2, [pc, #540]	; (8001338 <calibration+0x2d8>)
 800111c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800111e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        HAL_I2C_Mem_Read(&hi2c1, dev_address_2 <<1, 0x17, 1, s2_bxyz, 7, 1000);
 8001122:	4b86      	ldr	r3, [pc, #536]	; (800133c <calibration+0x2dc>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b29b      	uxth	r3, r3
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	b299      	uxth	r1, r3
 800112c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001130:	9302      	str	r3, [sp, #8]
 8001132:	2307      	movs	r3, #7
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	463b      	mov	r3, r7
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	2217      	movs	r2, #23
 800113e:	487b      	ldr	r0, [pc, #492]	; (800132c <calibration+0x2cc>)
 8001140:	f003 fa32 	bl	80045a8 <HAL_I2C_Mem_Read>
        s2_raw_bx[i] = (s2_bxyz[5] << 8) | s2_bxyz[6];
 8001144:	797b      	ldrb	r3, [r7, #5]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	b21a      	sxth	r2, r3
 800114a:	79bb      	ldrb	r3, [r7, #6]
 800114c:	b21b      	sxth	r3, r3
 800114e:	4313      	orrs	r3, r2
 8001150:	b219      	sxth	r1, r3
 8001152:	4a7b      	ldr	r2, [pc, #492]	; (8001340 <calibration+0x2e0>)
 8001154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001156:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        s2_raw_by[i] = (s2_bxyz[3] << 8) | s2_bxyz[4];
 800115a:	78fb      	ldrb	r3, [r7, #3]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	793b      	ldrb	r3, [r7, #4]
 8001162:	b21b      	sxth	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b219      	sxth	r1, r3
 8001168:	4a76      	ldr	r2, [pc, #472]	; (8001344 <calibration+0x2e4>)
 800116a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800116c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        s2_raw_bz[i] = (s2_bxyz[1] << 8) | s2_bxyz[2];
 8001170:	787b      	ldrb	r3, [r7, #1]
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	b21a      	sxth	r2, r3
 8001176:	78bb      	ldrb	r3, [r7, #2]
 8001178:	b21b      	sxth	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b219      	sxth	r1, r3
 800117e:	4a72      	ldr	r2, [pc, #456]	; (8001348 <calibration+0x2e8>)
 8001180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001182:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        printf("Collected data s1(%d, %d, %d).\n", s1_raw_bx[i], s1_raw_by[i], s1_raw_bz[i]);
 8001186:	4a6a      	ldr	r2, [pc, #424]	; (8001330 <calibration+0x2d0>)
 8001188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800118a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800118e:	4619      	mov	r1, r3
 8001190:	4a68      	ldr	r2, [pc, #416]	; (8001334 <calibration+0x2d4>)
 8001192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001194:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001198:	4618      	mov	r0, r3
 800119a:	4a67      	ldr	r2, [pc, #412]	; (8001338 <calibration+0x2d8>)
 800119c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800119e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80011a2:	4602      	mov	r2, r0
 80011a4:	4869      	ldr	r0, [pc, #420]	; (800134c <calibration+0x2ec>)
 80011a6:	f007 fb01 	bl	80087ac <iprintf>
        printf("Collected data s2(%d, %d, %d).\n", s2_raw_bx[i], s2_raw_by[i], s2_raw_bz[i]);
 80011aa:	4a65      	ldr	r2, [pc, #404]	; (8001340 <calibration+0x2e0>)
 80011ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011ae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80011b2:	4619      	mov	r1, r3
 80011b4:	4a63      	ldr	r2, [pc, #396]	; (8001344 <calibration+0x2e4>)
 80011b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011b8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80011bc:	4618      	mov	r0, r3
 80011be:	4a62      	ldr	r2, [pc, #392]	; (8001348 <calibration+0x2e8>)
 80011c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011c2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80011c6:	4602      	mov	r2, r0
 80011c8:	4861      	ldr	r0, [pc, #388]	; (8001350 <calibration+0x2f0>)
 80011ca:	f007 faef 	bl	80087ac <iprintf>
    for (int i = 0; i < 16; i++) {
 80011ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011d0:	3301      	adds	r3, #1
 80011d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80011d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011d6:	2b0f      	cmp	r3, #15
 80011d8:	f77f af64 	ble.w	80010a4 <calibration+0x44>
    }

    printf("\n");
 80011dc:	200a      	movs	r0, #10
 80011de:	f007 faf7 	bl	80087d0 <putchar>
    for (int i = 0; i < 16; i++) {
 80011e2:	2300      	movs	r3, #0
 80011e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80011e6:	e00f      	b.n	8001208 <calibration+0x1a8>
        printf("(s1_raw_bx, s1_raw_bz) = (%d, %d)\n", s1_raw_bx[i], s1_raw_bz[i]);
 80011e8:	4a51      	ldr	r2, [pc, #324]	; (8001330 <calibration+0x2d0>)
 80011ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011ec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80011f0:	4619      	mov	r1, r3
 80011f2:	4a51      	ldr	r2, [pc, #324]	; (8001338 <calibration+0x2d8>)
 80011f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011f6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80011fa:	461a      	mov	r2, r3
 80011fc:	4855      	ldr	r0, [pc, #340]	; (8001354 <calibration+0x2f4>)
 80011fe:	f007 fad5 	bl	80087ac <iprintf>
    for (int i = 0; i < 16; i++) {
 8001202:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001204:	3301      	adds	r3, #1
 8001206:	66bb      	str	r3, [r7, #104]	; 0x68
 8001208:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800120a:	2b0f      	cmp	r3, #15
 800120c:	ddec      	ble.n	80011e8 <calibration+0x188>
    }
    printf("\n");
 800120e:	200a      	movs	r0, #10
 8001210:	f007 fade 	bl	80087d0 <putchar>
    for (int i = 0; i < 16; i++) {
 8001214:	2300      	movs	r3, #0
 8001216:	667b      	str	r3, [r7, #100]	; 0x64
 8001218:	e00f      	b.n	800123a <calibration+0x1da>
        printf("(s2_raw_bx, s2_raw_bz) = (%d, %d)\n", s2_raw_bx[i], s2_raw_bz[i]);
 800121a:	4a49      	ldr	r2, [pc, #292]	; (8001340 <calibration+0x2e0>)
 800121c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800121e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001222:	4619      	mov	r1, r3
 8001224:	4a48      	ldr	r2, [pc, #288]	; (8001348 <calibration+0x2e8>)
 8001226:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001228:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800122c:	461a      	mov	r2, r3
 800122e:	484a      	ldr	r0, [pc, #296]	; (8001358 <calibration+0x2f8>)
 8001230:	f007 fabc 	bl	80087ac <iprintf>
    for (int i = 0; i < 16; i++) {
 8001234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001236:	3301      	adds	r3, #1
 8001238:	667b      	str	r3, [r7, #100]	; 0x64
 800123a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800123c:	2b0f      	cmp	r3, #15
 800123e:	ddec      	ble.n	800121a <calibration+0x1ba>
    }

    /* STEP2 : Bx,By,Bzの最大値と最小値の配列番号（インデックス）を取得 */
    int s1_max_bx_index = 0, s1_min_bx_index = 0;    // s1_Bxの最大値・最小値のインデックス
 8001240:	2300      	movs	r3, #0
 8001242:	663b      	str	r3, [r7, #96]	; 0x60
 8001244:	2300      	movs	r3, #0
 8001246:	65fb      	str	r3, [r7, #92]	; 0x5c
    int s1_max_by_index = 0, s1_min_by_index = 0;    // s1_Byの最大値・最小値のインデックス
 8001248:	2300      	movs	r3, #0
 800124a:	65bb      	str	r3, [r7, #88]	; 0x58
 800124c:	2300      	movs	r3, #0
 800124e:	657b      	str	r3, [r7, #84]	; 0x54
    int s1_max_bz_index = 0, s1_min_bz_index = 0;    // s1_Bzの最大値・最小値のインデックス
 8001250:	2300      	movs	r3, #0
 8001252:	653b      	str	r3, [r7, #80]	; 0x50
 8001254:	2300      	movs	r3, #0
 8001256:	64fb      	str	r3, [r7, #76]	; 0x4c
    int s2_max_bx_index = 0, s2_min_bx_index = 0;    // s2_Bxの最大値・最小値のインデックス
 8001258:	2300      	movs	r3, #0
 800125a:	64bb      	str	r3, [r7, #72]	; 0x48
 800125c:	2300      	movs	r3, #0
 800125e:	647b      	str	r3, [r7, #68]	; 0x44
    int s2_max_by_index = 0, s2_min_by_index = 0;    // s2_Byの最大値・最小値のインデックス
 8001260:	2300      	movs	r3, #0
 8001262:	643b      	str	r3, [r7, #64]	; 0x40
 8001264:	2300      	movs	r3, #0
 8001266:	63fb      	str	r3, [r7, #60]	; 0x3c
    int s2_max_bz_index = 0, s2_min_bz_index = 0;    // s2_Bzの最大値・最小値のインデックス
 8001268:	2300      	movs	r3, #0
 800126a:	63bb      	str	r3, [r7, #56]	; 0x38
 800126c:	2300      	movs	r3, #0
 800126e:	637b      	str	r3, [r7, #52]	; 0x34

    for (int i = 1; i < 16; i++) {
 8001270:	2301      	movs	r3, #1
 8001272:	633b      	str	r3, [r7, #48]	; 0x30
 8001274:	e04a      	b.n	800130c <calibration+0x2ac>
        if (s1_raw_bx[i] > s1_raw_bx[s1_max_bx_index]) {
 8001276:	4a2e      	ldr	r2, [pc, #184]	; (8001330 <calibration+0x2d0>)
 8001278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800127a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800127e:	492c      	ldr	r1, [pc, #176]	; (8001330 <calibration+0x2d0>)
 8001280:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001282:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001286:	429a      	cmp	r2, r3
 8001288:	dd01      	ble.n	800128e <calibration+0x22e>
            s1_max_bx_index = i;
 800128a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800128c:	663b      	str	r3, [r7, #96]	; 0x60
        }
        if (s1_raw_bx[i] < s1_raw_bx[s1_min_bx_index]) {
 800128e:	4a28      	ldr	r2, [pc, #160]	; (8001330 <calibration+0x2d0>)
 8001290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001292:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8001296:	4926      	ldr	r1, [pc, #152]	; (8001330 <calibration+0x2d0>)
 8001298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800129a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800129e:	429a      	cmp	r2, r3
 80012a0:	da01      	bge.n	80012a6 <calibration+0x246>
            s1_min_bx_index = i;
 80012a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a4:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        if (s1_raw_by[i] > s1_raw_by[s1_max_by_index]) {
 80012a6:	4a23      	ldr	r2, [pc, #140]	; (8001334 <calibration+0x2d4>)
 80012a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012aa:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80012ae:	4921      	ldr	r1, [pc, #132]	; (8001334 <calibration+0x2d4>)
 80012b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012b2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	dd01      	ble.n	80012be <calibration+0x25e>
            s1_max_by_index = i;
 80012ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012bc:	65bb      	str	r3, [r7, #88]	; 0x58
        }
        if (s1_raw_by[i] < s1_raw_by[s1_min_by_index]) {
 80012be:	4a1d      	ldr	r2, [pc, #116]	; (8001334 <calibration+0x2d4>)
 80012c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c2:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80012c6:	491b      	ldr	r1, [pc, #108]	; (8001334 <calibration+0x2d4>)
 80012c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012ca:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	da01      	bge.n	80012d6 <calibration+0x276>
            s1_min_by_index = i;
 80012d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d4:	657b      	str	r3, [r7, #84]	; 0x54
        }
        if (s1_raw_bz[i] > s1_raw_bz[s1_max_bz_index]) {
 80012d6:	4a18      	ldr	r2, [pc, #96]	; (8001338 <calibration+0x2d8>)
 80012d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012da:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80012de:	4916      	ldr	r1, [pc, #88]	; (8001338 <calibration+0x2d8>)
 80012e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012e2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	dd01      	ble.n	80012ee <calibration+0x28e>
            s1_max_bz_index = i;
 80012ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ec:	653b      	str	r3, [r7, #80]	; 0x50
        }
        if (s1_raw_bz[i] < s1_raw_bz[s1_min_bz_index]) {
 80012ee:	4a12      	ldr	r2, [pc, #72]	; (8001338 <calibration+0x2d8>)
 80012f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f2:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80012f6:	4910      	ldr	r1, [pc, #64]	; (8001338 <calibration+0x2d8>)
 80012f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012fa:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80012fe:	429a      	cmp	r2, r3
 8001300:	da01      	bge.n	8001306 <calibration+0x2a6>
            s1_min_bz_index = i;
 8001302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001304:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (int i = 1; i < 16; i++) {
 8001306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001308:	3301      	adds	r3, #1
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
 800130c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800130e:	2b0f      	cmp	r3, #15
 8001310:	ddb1      	ble.n	8001276 <calibration+0x216>
        }
    }

    for (int i = 1; i < 16; i++) {
 8001312:	2301      	movs	r3, #1
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001316:	e06c      	b.n	80013f2 <calibration+0x392>
 8001318:	200001f8 	.word	0x200001f8
 800131c:	0800cec0 	.word	0x0800cec0
 8001320:	0800ced8 	.word	0x0800ced8
 8001324:	0800cf08 	.word	0x0800cf08
 8001328:	20000000 	.word	0x20000000
 800132c:	2000022c 	.word	0x2000022c
 8001330:	20000390 	.word	0x20000390
 8001334:	200003b0 	.word	0x200003b0
 8001338:	200003d0 	.word	0x200003d0
 800133c:	20000001 	.word	0x20000001
 8001340:	200003f0 	.word	0x200003f0
 8001344:	20000410 	.word	0x20000410
 8001348:	20000430 	.word	0x20000430
 800134c:	0800cf0c 	.word	0x0800cf0c
 8001350:	0800cf2c 	.word	0x0800cf2c
 8001354:	0800cf4c 	.word	0x0800cf4c
 8001358:	0800cf70 	.word	0x0800cf70
        if (s2_raw_bx[i] > s2_raw_bx[s2_max_bx_index]) {
 800135c:	4aa6      	ldr	r2, [pc, #664]	; (80015f8 <calibration+0x598>)
 800135e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001360:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8001364:	49a4      	ldr	r1, [pc, #656]	; (80015f8 <calibration+0x598>)
 8001366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001368:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800136c:	429a      	cmp	r2, r3
 800136e:	dd01      	ble.n	8001374 <calibration+0x314>
            s2_max_bx_index = i;
 8001370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001372:	64bb      	str	r3, [r7, #72]	; 0x48
        }
        if (s2_raw_bx[i] < s2_raw_bx[s2_min_bx_index]) {
 8001374:	4aa0      	ldr	r2, [pc, #640]	; (80015f8 <calibration+0x598>)
 8001376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001378:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800137c:	499e      	ldr	r1, [pc, #632]	; (80015f8 <calibration+0x598>)
 800137e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001380:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001384:	429a      	cmp	r2, r3
 8001386:	da01      	bge.n	800138c <calibration+0x32c>
            s2_min_bx_index = i;
 8001388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138a:	647b      	str	r3, [r7, #68]	; 0x44
        }
        if (s2_raw_by[i] > s2_raw_by[s2_max_by_index]) {
 800138c:	4a9b      	ldr	r2, [pc, #620]	; (80015fc <calibration+0x59c>)
 800138e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001390:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8001394:	4999      	ldr	r1, [pc, #612]	; (80015fc <calibration+0x59c>)
 8001396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001398:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800139c:	429a      	cmp	r2, r3
 800139e:	dd01      	ble.n	80013a4 <calibration+0x344>
            s2_max_by_index = i;
 80013a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a2:	643b      	str	r3, [r7, #64]	; 0x40
        }
        if (s2_raw_by[i] < s2_raw_by[s2_min_by_index]) {
 80013a4:	4a95      	ldr	r2, [pc, #596]	; (80015fc <calibration+0x59c>)
 80013a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a8:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80013ac:	4993      	ldr	r1, [pc, #588]	; (80015fc <calibration+0x59c>)
 80013ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013b0:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	da01      	bge.n	80013bc <calibration+0x35c>
            s2_min_by_index = i;
 80013b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (s2_raw_bz[i] > s2_raw_bz[s2_max_bz_index]) {
 80013bc:	4a90      	ldr	r2, [pc, #576]	; (8001600 <calibration+0x5a0>)
 80013be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c0:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80013c4:	498e      	ldr	r1, [pc, #568]	; (8001600 <calibration+0x5a0>)
 80013c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013c8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	dd01      	ble.n	80013d4 <calibration+0x374>
            s2_max_bz_index = i;
 80013d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d2:	63bb      	str	r3, [r7, #56]	; 0x38
        }
        if (s2_raw_bz[i] < s2_raw_bz[s2_min_bz_index]) {
 80013d4:	4a8a      	ldr	r2, [pc, #552]	; (8001600 <calibration+0x5a0>)
 80013d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d8:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80013dc:	4988      	ldr	r1, [pc, #544]	; (8001600 <calibration+0x5a0>)
 80013de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013e0:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	da01      	bge.n	80013ec <calibration+0x38c>
            s2_min_bz_index = i;
 80013e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ea:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i = 1; i < 16; i++) {
 80013ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ee:	3301      	adds	r3, #1
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f4:	2b0f      	cmp	r3, #15
 80013f6:	ddb1      	ble.n	800135c <calibration+0x2fc>
        }
    }

    /* STEP3 : p2pとoffsetを取得 */
    s1_raw_bx_p2p = s1_raw_bx[s1_max_bx_index] - s1_raw_bx[s1_min_bx_index];
 80013f8:	4a82      	ldr	r2, [pc, #520]	; (8001604 <calibration+0x5a4>)
 80013fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013fc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001400:	4619      	mov	r1, r3
 8001402:	4a80      	ldr	r2, [pc, #512]	; (8001604 <calibration+0x5a4>)
 8001404:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001406:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800140a:	1acb      	subs	r3, r1, r3
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f899 	bl	8000544 <__aeabi_i2d>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	497c      	ldr	r1, [pc, #496]	; (8001608 <calibration+0x5a8>)
 8001418:	e9c1 2300 	strd	r2, r3, [r1]
    s1_raw_by_p2p = s1_raw_by[s1_max_by_index] - s1_raw_by[s1_min_by_index];
 800141c:	4a7b      	ldr	r2, [pc, #492]	; (800160c <calibration+0x5ac>)
 800141e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001420:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001424:	4619      	mov	r1, r3
 8001426:	4a79      	ldr	r2, [pc, #484]	; (800160c <calibration+0x5ac>)
 8001428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800142a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800142e:	1acb      	subs	r3, r1, r3
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff f887 	bl	8000544 <__aeabi_i2d>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4975      	ldr	r1, [pc, #468]	; (8001610 <calibration+0x5b0>)
 800143c:	e9c1 2300 	strd	r2, r3, [r1]
    s1_raw_bz_p2p = s1_raw_bz[s1_max_bz_index] - s1_raw_bz[s1_min_bz_index];
 8001440:	4a74      	ldr	r2, [pc, #464]	; (8001614 <calibration+0x5b4>)
 8001442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001444:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001448:	4619      	mov	r1, r3
 800144a:	4a72      	ldr	r2, [pc, #456]	; (8001614 <calibration+0x5b4>)
 800144c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800144e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001452:	1acb      	subs	r3, r1, r3
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f875 	bl	8000544 <__aeabi_i2d>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	496e      	ldr	r1, [pc, #440]	; (8001618 <calibration+0x5b8>)
 8001460:	e9c1 2300 	strd	r2, r3, [r1]
    s1_raw_bx_offset = (double) (s1_raw_bx[s1_max_bx_index] + s1_raw_bx[s1_min_bx_index]) /2;
 8001464:	4a67      	ldr	r2, [pc, #412]	; (8001604 <calibration+0x5a4>)
 8001466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001468:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800146c:	4619      	mov	r1, r3
 800146e:	4a65      	ldr	r2, [pc, #404]	; (8001604 <calibration+0x5a4>)
 8001470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001472:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001476:	440b      	add	r3, r1
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f863 	bl	8000544 <__aeabi_i2d>
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001486:	f7ff f9f1 	bl	800086c <__aeabi_ddiv>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4963      	ldr	r1, [pc, #396]	; (800161c <calibration+0x5bc>)
 8001490:	e9c1 2300 	strd	r2, r3, [r1]
    s1_raw_by_offset = (double) (s1_raw_by[s1_max_by_index] + s1_raw_by[s1_min_by_index]) /2;
 8001494:	4a5d      	ldr	r2, [pc, #372]	; (800160c <calibration+0x5ac>)
 8001496:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001498:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800149c:	4619      	mov	r1, r3
 800149e:	4a5b      	ldr	r2, [pc, #364]	; (800160c <calibration+0x5ac>)
 80014a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014a2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80014a6:	440b      	add	r3, r1
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff f84b 	bl	8000544 <__aeabi_i2d>
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014b6:	f7ff f9d9 	bl	800086c <__aeabi_ddiv>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4958      	ldr	r1, [pc, #352]	; (8001620 <calibration+0x5c0>)
 80014c0:	e9c1 2300 	strd	r2, r3, [r1]
    s1_raw_bz_offset = (double) (s1_raw_bz[s1_max_bz_index] + s1_raw_bz[s1_min_bz_index]) /2;
 80014c4:	4a53      	ldr	r2, [pc, #332]	; (8001614 <calibration+0x5b4>)
 80014c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80014cc:	4619      	mov	r1, r3
 80014ce:	4a51      	ldr	r2, [pc, #324]	; (8001614 <calibration+0x5b4>)
 80014d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014d2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80014d6:	440b      	add	r3, r1
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f833 	bl	8000544 <__aeabi_i2d>
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014e6:	f7ff f9c1 	bl	800086c <__aeabi_ddiv>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	494d      	ldr	r1, [pc, #308]	; (8001624 <calibration+0x5c4>)
 80014f0:	e9c1 2300 	strd	r2, r3, [r1]

    s2_raw_bx_p2p = s2_raw_bx[s2_max_bx_index] - s2_raw_bx[s2_min_bx_index];
 80014f4:	4a40      	ldr	r2, [pc, #256]	; (80015f8 <calibration+0x598>)
 80014f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014f8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80014fc:	4619      	mov	r1, r3
 80014fe:	4a3e      	ldr	r2, [pc, #248]	; (80015f8 <calibration+0x598>)
 8001500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001502:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001506:	1acb      	subs	r3, r1, r3
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff f81b 	bl	8000544 <__aeabi_i2d>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4945      	ldr	r1, [pc, #276]	; (8001628 <calibration+0x5c8>)
 8001514:	e9c1 2300 	strd	r2, r3, [r1]
    s2_raw_by_p2p = s2_raw_by[s2_max_by_index] - s2_raw_by[s2_min_by_index];
 8001518:	4a38      	ldr	r2, [pc, #224]	; (80015fc <calibration+0x59c>)
 800151a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800151c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001520:	4619      	mov	r1, r3
 8001522:	4a36      	ldr	r2, [pc, #216]	; (80015fc <calibration+0x59c>)
 8001524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001526:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800152a:	1acb      	subs	r3, r1, r3
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f809 	bl	8000544 <__aeabi_i2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	493d      	ldr	r1, [pc, #244]	; (800162c <calibration+0x5cc>)
 8001538:	e9c1 2300 	strd	r2, r3, [r1]
    s2_raw_bz_p2p = s2_raw_bz[s2_max_bz_index] - s2_raw_bz[s2_min_bz_index];
 800153c:	4a30      	ldr	r2, [pc, #192]	; (8001600 <calibration+0x5a0>)
 800153e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001540:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001544:	4619      	mov	r1, r3
 8001546:	4a2e      	ldr	r2, [pc, #184]	; (8001600 <calibration+0x5a0>)
 8001548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800154a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800154e:	1acb      	subs	r3, r1, r3
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe fff7 	bl	8000544 <__aeabi_i2d>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4935      	ldr	r1, [pc, #212]	; (8001630 <calibration+0x5d0>)
 800155c:	e9c1 2300 	strd	r2, r3, [r1]
    s2_raw_bx_offset = (double) (s2_raw_bx[s2_max_bx_index] + s2_raw_bx[s2_min_bx_index]) /2;
 8001560:	4a25      	ldr	r2, [pc, #148]	; (80015f8 <calibration+0x598>)
 8001562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001564:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001568:	4619      	mov	r1, r3
 800156a:	4a23      	ldr	r2, [pc, #140]	; (80015f8 <calibration+0x598>)
 800156c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800156e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001572:	440b      	add	r3, r1
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe ffe5 	bl	8000544 <__aeabi_i2d>
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001582:	f7ff f973 	bl	800086c <__aeabi_ddiv>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	492a      	ldr	r1, [pc, #168]	; (8001634 <calibration+0x5d4>)
 800158c:	e9c1 2300 	strd	r2, r3, [r1]
    s2_raw_by_offset = (double) (s2_raw_by[s2_max_by_index] + s2_raw_by[s2_min_by_index]) /2;
 8001590:	4a1a      	ldr	r2, [pc, #104]	; (80015fc <calibration+0x59c>)
 8001592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001594:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001598:	4619      	mov	r1, r3
 800159a:	4a18      	ldr	r2, [pc, #96]	; (80015fc <calibration+0x59c>)
 800159c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800159e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80015a2:	440b      	add	r3, r1
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ffcd 	bl	8000544 <__aeabi_i2d>
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015b2:	f7ff f95b 	bl	800086c <__aeabi_ddiv>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	491f      	ldr	r1, [pc, #124]	; (8001638 <calibration+0x5d8>)
 80015bc:	e9c1 2300 	strd	r2, r3, [r1]
    s2_raw_bz_offset = (double) (s2_raw_bz[s2_max_bz_index] + s2_raw_bz[s2_min_bz_index]) /2;
 80015c0:	4a0f      	ldr	r2, [pc, #60]	; (8001600 <calibration+0x5a0>)
 80015c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015c4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80015c8:	4619      	mov	r1, r3
 80015ca:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <calibration+0x5a0>)
 80015cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80015d2:	440b      	add	r3, r1
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ffb5 	bl	8000544 <__aeabi_i2d>
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015e2:	f7ff f943 	bl	800086c <__aeabi_ddiv>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4914      	ldr	r1, [pc, #80]	; (800163c <calibration+0x5dc>)
 80015ec:	e9c1 2300 	strd	r2, r3, [r1]



    /* STEP4 :  rawデータからoffsetを減算しp2pで除算した規格化データを取得 */
    for (int i = 0; i < 16; i++) {
 80015f0:	2300      	movs	r3, #0
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80015f4:	e111      	b.n	800181a <calibration+0x7ba>
 80015f6:	bf00      	nop
 80015f8:	200003f0 	.word	0x200003f0
 80015fc:	20000410 	.word	0x20000410
 8001600:	20000430 	.word	0x20000430
 8001604:	20000390 	.word	0x20000390
 8001608:	20000450 	.word	0x20000450
 800160c:	200003b0 	.word	0x200003b0
 8001610:	20000458 	.word	0x20000458
 8001614:	200003d0 	.word	0x200003d0
 8001618:	20000460 	.word	0x20000460
 800161c:	20000480 	.word	0x20000480
 8001620:	20000488 	.word	0x20000488
 8001624:	20000490 	.word	0x20000490
 8001628:	20000468 	.word	0x20000468
 800162c:	20000470 	.word	0x20000470
 8001630:	20000478 	.word	0x20000478
 8001634:	20000498 	.word	0x20000498
 8001638:	200004a0 	.word	0x200004a0
 800163c:	200004a8 	.word	0x200004a8
        s1_std_bx[i] = (double) (s1_raw_bx[i] - s1_raw_bx_offset) / (double) (s1_raw_bx_p2p / 2);    /* 整数同士の除算はキャスト必要」 */
 8001640:	4ab7      	ldr	r2, [pc, #732]	; (8001920 <calibration+0x8c0>)
 8001642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001644:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe ff7b 	bl	8000544 <__aeabi_i2d>
 800164e:	4bb5      	ldr	r3, [pc, #724]	; (8001924 <calibration+0x8c4>)
 8001650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001654:	f7fe fe28 	bl	80002a8 <__aeabi_dsub>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4614      	mov	r4, r2
 800165e:	461d      	mov	r5, r3
 8001660:	4bb1      	ldr	r3, [pc, #708]	; (8001928 <calibration+0x8c8>)
 8001662:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800166e:	f7ff f8fd 	bl	800086c <__aeabi_ddiv>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4620      	mov	r0, r4
 8001678:	4629      	mov	r1, r5
 800167a:	f7ff f8f7 	bl	800086c <__aeabi_ddiv>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	48aa      	ldr	r0, [pc, #680]	; (800192c <calibration+0x8cc>)
 8001684:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001686:	00c9      	lsls	r1, r1, #3
 8001688:	4401      	add	r1, r0
 800168a:	e9c1 2300 	strd	r2, r3, [r1]
        s1_std_by[i] = (double) (s1_raw_by[i] - s1_raw_by_offset) / (double) (s1_raw_by_p2p / 2);
 800168e:	4aa8      	ldr	r2, [pc, #672]	; (8001930 <calibration+0x8d0>)
 8001690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001692:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe ff54 	bl	8000544 <__aeabi_i2d>
 800169c:	4ba5      	ldr	r3, [pc, #660]	; (8001934 <calibration+0x8d4>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	f7fe fe01 	bl	80002a8 <__aeabi_dsub>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4614      	mov	r4, r2
 80016ac:	461d      	mov	r5, r3
 80016ae:	4ba2      	ldr	r3, [pc, #648]	; (8001938 <calibration+0x8d8>)
 80016b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016bc:	f7ff f8d6 	bl	800086c <__aeabi_ddiv>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4620      	mov	r0, r4
 80016c6:	4629      	mov	r1, r5
 80016c8:	f7ff f8d0 	bl	800086c <__aeabi_ddiv>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	489a      	ldr	r0, [pc, #616]	; (800193c <calibration+0x8dc>)
 80016d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016d4:	00c9      	lsls	r1, r1, #3
 80016d6:	4401      	add	r1, r0
 80016d8:	e9c1 2300 	strd	r2, r3, [r1]
        s1_std_bz[i] = (double) (s1_raw_bz[i] - s1_raw_bz_offset) / (double) (s1_raw_bz_p2p / 2);
 80016dc:	4a98      	ldr	r2, [pc, #608]	; (8001940 <calibration+0x8e0>)
 80016de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe ff2d 	bl	8000544 <__aeabi_i2d>
 80016ea:	4b96      	ldr	r3, [pc, #600]	; (8001944 <calibration+0x8e4>)
 80016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f0:	f7fe fdda 	bl	80002a8 <__aeabi_dsub>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4614      	mov	r4, r2
 80016fa:	461d      	mov	r5, r3
 80016fc:	4b92      	ldr	r3, [pc, #584]	; (8001948 <calibration+0x8e8>)
 80016fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800170a:	f7ff f8af 	bl	800086c <__aeabi_ddiv>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4620      	mov	r0, r4
 8001714:	4629      	mov	r1, r5
 8001716:	f7ff f8a9 	bl	800086c <__aeabi_ddiv>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	488b      	ldr	r0, [pc, #556]	; (800194c <calibration+0x8ec>)
 8001720:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001722:	00c9      	lsls	r1, r1, #3
 8001724:	4401      	add	r1, r0
 8001726:	e9c1 2300 	strd	r2, r3, [r1]
        s2_std_bx[i] = (double) (s2_raw_bx[i] - s2_raw_bx_offset) / (double) (s2_raw_bx_p2p / 2);
 800172a:	4a89      	ldr	r2, [pc, #548]	; (8001950 <calibration+0x8f0>)
 800172c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe ff06 	bl	8000544 <__aeabi_i2d>
 8001738:	4b86      	ldr	r3, [pc, #536]	; (8001954 <calibration+0x8f4>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7fe fdb3 	bl	80002a8 <__aeabi_dsub>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4614      	mov	r4, r2
 8001748:	461d      	mov	r5, r3
 800174a:	4b83      	ldr	r3, [pc, #524]	; (8001958 <calibration+0x8f8>)
 800174c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001758:	f7ff f888 	bl	800086c <__aeabi_ddiv>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4620      	mov	r0, r4
 8001762:	4629      	mov	r1, r5
 8001764:	f7ff f882 	bl	800086c <__aeabi_ddiv>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	487b      	ldr	r0, [pc, #492]	; (800195c <calibration+0x8fc>)
 800176e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001770:	00c9      	lsls	r1, r1, #3
 8001772:	4401      	add	r1, r0
 8001774:	e9c1 2300 	strd	r2, r3, [r1]
        s2_std_by[i] = (double) (s2_raw_by[i] - s2_raw_by_offset) / (double) (s2_raw_by_p2p / 2);
 8001778:	4a79      	ldr	r2, [pc, #484]	; (8001960 <calibration+0x900>)
 800177a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800177c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fedf 	bl	8000544 <__aeabi_i2d>
 8001786:	4b77      	ldr	r3, [pc, #476]	; (8001964 <calibration+0x904>)
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	f7fe fd8c 	bl	80002a8 <__aeabi_dsub>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4614      	mov	r4, r2
 8001796:	461d      	mov	r5, r3
 8001798:	4b73      	ldr	r3, [pc, #460]	; (8001968 <calibration+0x908>)
 800179a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017a6:	f7ff f861 	bl	800086c <__aeabi_ddiv>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4620      	mov	r0, r4
 80017b0:	4629      	mov	r1, r5
 80017b2:	f7ff f85b 	bl	800086c <__aeabi_ddiv>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	486c      	ldr	r0, [pc, #432]	; (800196c <calibration+0x90c>)
 80017bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017be:	00c9      	lsls	r1, r1, #3
 80017c0:	4401      	add	r1, r0
 80017c2:	e9c1 2300 	strd	r2, r3, [r1]
        s2_std_bz[i] = (double) (s2_raw_bz[i] - s2_raw_bz_offset) / (double) (s2_raw_bz_p2p / 2);
 80017c6:	4a6a      	ldr	r2, [pc, #424]	; (8001970 <calibration+0x910>)
 80017c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ca:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe feb8 	bl	8000544 <__aeabi_i2d>
 80017d4:	4b67      	ldr	r3, [pc, #412]	; (8001974 <calibration+0x914>)
 80017d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017da:	f7fe fd65 	bl	80002a8 <__aeabi_dsub>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4614      	mov	r4, r2
 80017e4:	461d      	mov	r5, r3
 80017e6:	4b64      	ldr	r3, [pc, #400]	; (8001978 <calibration+0x918>)
 80017e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017f4:	f7ff f83a 	bl	800086c <__aeabi_ddiv>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4620      	mov	r0, r4
 80017fe:	4629      	mov	r1, r5
 8001800:	f7ff f834 	bl	800086c <__aeabi_ddiv>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	485c      	ldr	r0, [pc, #368]	; (800197c <calibration+0x91c>)
 800180a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800180c:	00c9      	lsls	r1, r1, #3
 800180e:	4401      	add	r1, r0
 8001810:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < 16; i++) {
 8001814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001816:	3301      	adds	r3, #1
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
 800181a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800181c:	2b0f      	cmp	r3, #15
 800181e:	f77f af0f 	ble.w	8001640 <calibration+0x5e0>
    }

    /* STEP5 : atanを取得 */
    for (int i = 0; i < 16; i++) {
 8001822:	2300      	movs	r3, #0
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
 8001826:	e046      	b.n	80018b6 <calibration+0x856>
        s1_atan[i] = atan(s1_std_bz[i] / s1_std_bx[i]);
 8001828:	4a48      	ldr	r2, [pc, #288]	; (800194c <calibration+0x8ec>)
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	4413      	add	r3, r2
 8001830:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001834:	4a3d      	ldr	r2, [pc, #244]	; (800192c <calibration+0x8cc>)
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	4413      	add	r3, r2
 800183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001840:	f7ff f814 	bl	800086c <__aeabi_ddiv>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	ec43 2b17 	vmov	d7, r2, r3
 800184c:	eeb0 0a47 	vmov.f32	s0, s14
 8001850:	eef0 0a67 	vmov.f32	s1, s15
 8001854:	f00a fac0 	bl	800bdd8 <atan>
 8001858:	eeb0 7a40 	vmov.f32	s14, s0
 800185c:	eef0 7a60 	vmov.f32	s15, s1
 8001860:	4a47      	ldr	r2, [pc, #284]	; (8001980 <calibration+0x920>)
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	4413      	add	r3, r2
 8001868:	ed83 7b00 	vstr	d7, [r3]
        s2_atan[i] = atan(s2_std_bz[i] / s2_std_bx[i]);
 800186c:	4a43      	ldr	r2, [pc, #268]	; (800197c <calibration+0x91c>)
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	4413      	add	r3, r2
 8001874:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001878:	4a38      	ldr	r2, [pc, #224]	; (800195c <calibration+0x8fc>)
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4413      	add	r3, r2
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7fe fff2 	bl	800086c <__aeabi_ddiv>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	ec43 2b17 	vmov	d7, r2, r3
 8001890:	eeb0 0a47 	vmov.f32	s0, s14
 8001894:	eef0 0a67 	vmov.f32	s1, s15
 8001898:	f00a fa9e 	bl	800bdd8 <atan>
 800189c:	eeb0 7a40 	vmov.f32	s14, s0
 80018a0:	eef0 7a60 	vmov.f32	s15, s1
 80018a4:	4a37      	ldr	r2, [pc, #220]	; (8001984 <calibration+0x924>)
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	4413      	add	r3, r2
 80018ac:	ed83 7b00 	vstr	d7, [r3]
    for (int i = 0; i < 16; i++) {
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	3301      	adds	r3, #1
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	2b0f      	cmp	r3, #15
 80018ba:	ddb5      	ble.n	8001828 <calibration+0x7c8>
    }


    /* STEP6 : std_bxの符号情報を取得 */
    for (int i = 0; i < 16; i++) {
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
 80018c0:	e06e      	b.n	80019a0 <calibration+0x940>
        if (s1_std_bx[i] >=0) {
 80018c2:	4a1a      	ldr	r2, [pc, #104]	; (800192c <calibration+0x8cc>)
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4413      	add	r3, r2
 80018ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	f7ff f925 	bl	8000b24 <__aeabi_dcmpge>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <calibration+0x88c>
        	s1_std_bx_sign[i] = 1;    /* 正なら1 */
 80018e0:	4a29      	ldr	r2, [pc, #164]	; (8001988 <calibration+0x928>)
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	4413      	add	r3, r2
 80018e6:	2201      	movs	r2, #1
 80018e8:	701a      	strb	r2, [r3, #0]
 80018ea:	e004      	b.n	80018f6 <calibration+0x896>
        } else {
        	s1_std_bx_sign[i] = 0;    /* 負なら0 */
 80018ec:	4a26      	ldr	r2, [pc, #152]	; (8001988 <calibration+0x928>)
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	4413      	add	r3, r2
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
        }

        if (s2_std_bx[i] >=0) {
 80018f6:	4a19      	ldr	r2, [pc, #100]	; (800195c <calibration+0x8fc>)
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	4413      	add	r3, r2
 80018fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	f7ff f90b 	bl	8000b24 <__aeabi_dcmpge>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d03d      	beq.n	8001990 <calibration+0x930>
        	s2_std_bx_sign[i] = 1;    /* 正なら1 */
 8001914:	4a1d      	ldr	r2, [pc, #116]	; (800198c <calibration+0x92c>)
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	4413      	add	r3, r2
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
 800191e:	e03c      	b.n	800199a <calibration+0x93a>
 8001920:	20000390 	.word	0x20000390
 8001924:	20000480 	.word	0x20000480
 8001928:	20000450 	.word	0x20000450
 800192c:	200004b0 	.word	0x200004b0
 8001930:	200003b0 	.word	0x200003b0
 8001934:	20000488 	.word	0x20000488
 8001938:	20000458 	.word	0x20000458
 800193c:	20000530 	.word	0x20000530
 8001940:	200003d0 	.word	0x200003d0
 8001944:	20000490 	.word	0x20000490
 8001948:	20000460 	.word	0x20000460
 800194c:	200005b0 	.word	0x200005b0
 8001950:	200003f0 	.word	0x200003f0
 8001954:	20000498 	.word	0x20000498
 8001958:	20000468 	.word	0x20000468
 800195c:	20000630 	.word	0x20000630
 8001960:	20000410 	.word	0x20000410
 8001964:	200004a0 	.word	0x200004a0
 8001968:	20000470 	.word	0x20000470
 800196c:	200006b0 	.word	0x200006b0
 8001970:	20000430 	.word	0x20000430
 8001974:	200004a8 	.word	0x200004a8
 8001978:	20000478 	.word	0x20000478
 800197c:	20000730 	.word	0x20000730
 8001980:	200007b0 	.word	0x200007b0
 8001984:	20000830 	.word	0x20000830
 8001988:	200008b0 	.word	0x200008b0
 800198c:	200008c0 	.word	0x200008c0
        } else {
        	s2_std_bx_sign[i] = 0;    /* 負なら0 */
 8001990:	4a5d      	ldr	r2, [pc, #372]	; (8001b08 <calibration+0xaa8>)
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	4413      	add	r3, r2
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 16; i++) {
 800199a:	6a3b      	ldr	r3, [r7, #32]
 800199c:	3301      	adds	r3, #1
 800199e:	623b      	str	r3, [r7, #32]
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	2b0f      	cmp	r3, #15
 80019a4:	dd8d      	ble.n	80018c2 <calibration+0x862>
        }
    }

    /* STEP7 : thetaを取得 */
    for (int i = 0; i < 16; i++) {
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
 80019aa:	e09e      	b.n	8001aea <calibration+0xa8a>
    	if(s1_std_bx_sign[i] == 0){    // 0すなわち負なら
 80019ac:	4a57      	ldr	r2, [pc, #348]	; (8001b0c <calibration+0xaac>)
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	4413      	add	r3, r2
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d11c      	bne.n	80019f2 <calibration+0x992>
    		s1_theta[i] = (s1_atan[i] + M_PI / 2) * (180 / M_PI);
 80019b8:	4a55      	ldr	r2, [pc, #340]	; (8001b10 <calibration+0xab0>)
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4413      	add	r3, r2
 80019c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019c4:	a34c      	add	r3, pc, #304	; (adr r3, 8001af8 <calibration+0xa98>)
 80019c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ca:	f7fe fc6f 	bl	80002ac <__adddf3>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	a34a      	add	r3, pc, #296	; (adr r3, 8001b00 <calibration+0xaa0>)
 80019d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019dc:	f7fe fe1c 	bl	8000618 <__aeabi_dmul>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	484b      	ldr	r0, [pc, #300]	; (8001b14 <calibration+0xab4>)
 80019e6:	69f9      	ldr	r1, [r7, #28]
 80019e8:	00c9      	lsls	r1, r1, #3
 80019ea:	4401      	add	r1, r0
 80019ec:	e9c1 2300 	strd	r2, r3, [r1]
 80019f0:	e02a      	b.n	8001a48 <calibration+0x9e8>
    	} else if(s1_std_bx_sign[i] == 1){    // 1すなわち正なら
 80019f2:	4a46      	ldr	r2, [pc, #280]	; (8001b0c <calibration+0xaac>)
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	4413      	add	r3, r2
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d124      	bne.n	8001a48 <calibration+0x9e8>
    		s1_theta[i] = (s1_atan[i] + M_PI / 2) * (180 / M_PI) + 180;
 80019fe:	4a44      	ldr	r2, [pc, #272]	; (8001b10 <calibration+0xab0>)
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	4413      	add	r3, r2
 8001a06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a0a:	a33b      	add	r3, pc, #236	; (adr r3, 8001af8 <calibration+0xa98>)
 8001a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a10:	f7fe fc4c 	bl	80002ac <__adddf3>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	a338      	add	r3, pc, #224	; (adr r3, 8001b00 <calibration+0xaa0>)
 8001a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a22:	f7fe fdf9 	bl	8000618 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	4b39      	ldr	r3, [pc, #228]	; (8001b18 <calibration+0xab8>)
 8001a34:	f7fe fc3a 	bl	80002ac <__adddf3>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4835      	ldr	r0, [pc, #212]	; (8001b14 <calibration+0xab4>)
 8001a3e:	69f9      	ldr	r1, [r7, #28]
 8001a40:	00c9      	lsls	r1, r1, #3
 8001a42:	4401      	add	r1, r0
 8001a44:	e9c1 2300 	strd	r2, r3, [r1]
    	}

    	if(s2_std_bx_sign[i] == 0){    // 0すなわち負なら
 8001a48:	4a2f      	ldr	r2, [pc, #188]	; (8001b08 <calibration+0xaa8>)
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d11c      	bne.n	8001a8e <calibration+0xa2e>
    		s2_theta[i] = (s2_atan[i] + M_PI / 2) * (180 / M_PI);
 8001a54:	4a31      	ldr	r2, [pc, #196]	; (8001b1c <calibration+0xabc>)
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a60:	a325      	add	r3, pc, #148	; (adr r3, 8001af8 <calibration+0xa98>)
 8001a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a66:	f7fe fc21 	bl	80002ac <__adddf3>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	a323      	add	r3, pc, #140	; (adr r3, 8001b00 <calibration+0xaa0>)
 8001a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a78:	f7fe fdce 	bl	8000618 <__aeabi_dmul>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4827      	ldr	r0, [pc, #156]	; (8001b20 <calibration+0xac0>)
 8001a82:	69f9      	ldr	r1, [r7, #28]
 8001a84:	00c9      	lsls	r1, r1, #3
 8001a86:	4401      	add	r1, r0
 8001a88:	e9c1 2300 	strd	r2, r3, [r1]
 8001a8c:	e02a      	b.n	8001ae4 <calibration+0xa84>
    	} else if(s2_std_bx_sign[i] == 1){    // 1すなわち正なら
 8001a8e:	4a1e      	ldr	r2, [pc, #120]	; (8001b08 <calibration+0xaa8>)
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	4413      	add	r3, r2
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d124      	bne.n	8001ae4 <calibration+0xa84>
    		s2_theta[i] = (s2_atan[i] + M_PI / 2) * (180 / M_PI) + 180;
 8001a9a:	4a20      	ldr	r2, [pc, #128]	; (8001b1c <calibration+0xabc>)
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aa6:	a314      	add	r3, pc, #80	; (adr r3, 8001af8 <calibration+0xa98>)
 8001aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aac:	f7fe fbfe 	bl	80002ac <__adddf3>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	a311      	add	r3, pc, #68	; (adr r3, 8001b00 <calibration+0xaa0>)
 8001aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abe:	f7fe fdab 	bl	8000618 <__aeabi_dmul>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <calibration+0xab8>)
 8001ad0:	f7fe fbec 	bl	80002ac <__adddf3>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4811      	ldr	r0, [pc, #68]	; (8001b20 <calibration+0xac0>)
 8001ada:	69f9      	ldr	r1, [r7, #28]
 8001adc:	00c9      	lsls	r1, r1, #3
 8001ade:	4401      	add	r1, r0
 8001ae0:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < 16; i++) {
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	61fb      	str	r3, [r7, #28]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	2b0f      	cmp	r3, #15
 8001aee:	f77f af5d 	ble.w	80019ac <calibration+0x94c>
    	}
    }

    /* STEP8 : 16個のtheta各々を中心値としてtoleranceを加減算した範囲を、それぞれの回転角エリアとして判定する */
    for (int i = 0; i < 16; i++) {
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	e0eb      	b.n	8001cd0 <calibration+0xc70>
 8001af8:	54442d18 	.word	0x54442d18
 8001afc:	3ff921fb 	.word	0x3ff921fb
 8001b00:	1a63c1f8 	.word	0x1a63c1f8
 8001b04:	404ca5dc 	.word	0x404ca5dc
 8001b08:	200008c0 	.word	0x200008c0
 8001b0c:	200008b0 	.word	0x200008b0
 8001b10:	200007b0 	.word	0x200007b0
 8001b14:	200008d0 	.word	0x200008d0
 8001b18:	40668000 	.word	0x40668000
 8001b1c:	20000830 	.word	0x20000830
 8001b20:	20000950 	.word	0x20000950
    	s1_theta_low[i] = s1_theta[i] - tolerance;
 8001b24:	4a9b      	ldr	r2, [pc, #620]	; (8001d94 <calibration+0xd34>)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b30:	4b99      	ldr	r3, [pc, #612]	; (8001d98 <calibration+0xd38>)
 8001b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b36:	f7fe fbb7 	bl	80002a8 <__aeabi_dsub>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4897      	ldr	r0, [pc, #604]	; (8001d9c <calibration+0xd3c>)
 8001b40:	69b9      	ldr	r1, [r7, #24]
 8001b42:	00c9      	lsls	r1, r1, #3
 8001b44:	4401      	add	r1, r0
 8001b46:	e9c1 2300 	strd	r2, r3, [r1]
    	s1_theta_high[i] = s1_theta[i] + tolerance;
 8001b4a:	4a92      	ldr	r2, [pc, #584]	; (8001d94 <calibration+0xd34>)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4413      	add	r3, r2
 8001b52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b56:	4b90      	ldr	r3, [pc, #576]	; (8001d98 <calibration+0xd38>)
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	f7fe fba6 	bl	80002ac <__adddf3>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	488e      	ldr	r0, [pc, #568]	; (8001da0 <calibration+0xd40>)
 8001b66:	69b9      	ldr	r1, [r7, #24]
 8001b68:	00c9      	lsls	r1, r1, #3
 8001b6a:	4401      	add	r1, r0
 8001b6c:	e9c1 2300 	strd	r2, r3, [r1]
    	s2_theta_low[i] = s2_theta[i] - tolerance;
 8001b70:	4a8c      	ldr	r2, [pc, #560]	; (8001da4 <calibration+0xd44>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4413      	add	r3, r2
 8001b78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b7c:	4b86      	ldr	r3, [pc, #536]	; (8001d98 <calibration+0xd38>)
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	f7fe fb91 	bl	80002a8 <__aeabi_dsub>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4887      	ldr	r0, [pc, #540]	; (8001da8 <calibration+0xd48>)
 8001b8c:	69b9      	ldr	r1, [r7, #24]
 8001b8e:	00c9      	lsls	r1, r1, #3
 8001b90:	4401      	add	r1, r0
 8001b92:	e9c1 2300 	strd	r2, r3, [r1]
    	s2_theta_high[i] = s2_theta[i] + tolerance;
 8001b96:	4a83      	ldr	r2, [pc, #524]	; (8001da4 <calibration+0xd44>)
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ba2:	4b7d      	ldr	r3, [pc, #500]	; (8001d98 <calibration+0xd38>)
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	f7fe fb80 	bl	80002ac <__adddf3>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	487e      	ldr	r0, [pc, #504]	; (8001dac <calibration+0xd4c>)
 8001bb2:	69b9      	ldr	r1, [r7, #24]
 8001bb4:	00c9      	lsls	r1, r1, #3
 8001bb6:	4401      	add	r1, r0
 8001bb8:	e9c1 2300 	strd	r2, r3, [r1]

    	if(s1_theta_low[i] < 0) {
 8001bbc:	4a77      	ldr	r2, [pc, #476]	; (8001d9c <calibration+0xd3c>)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	f7fe ff94 	bl	8000afc <__aeabi_dcmplt>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d012      	beq.n	8001c00 <calibration+0xba0>
    		s1_theta_low[i] = s1_theta_low[i] + 360;    /* 0を下回った場合、360に飛ばす */
 8001bda:	4a70      	ldr	r2, [pc, #448]	; (8001d9c <calibration+0xd3c>)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4413      	add	r3, r2
 8001be2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	4b71      	ldr	r3, [pc, #452]	; (8001db0 <calibration+0xd50>)
 8001bec:	f7fe fb5e 	bl	80002ac <__adddf3>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4869      	ldr	r0, [pc, #420]	; (8001d9c <calibration+0xd3c>)
 8001bf6:	69b9      	ldr	r1, [r7, #24]
 8001bf8:	00c9      	lsls	r1, r1, #3
 8001bfa:	4401      	add	r1, r0
 8001bfc:	e9c1 2300 	strd	r2, r3, [r1]
    	}
    	if(s1_theta_high[i] > 360) {
 8001c00:	4a67      	ldr	r2, [pc, #412]	; (8001da0 <calibration+0xd40>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4413      	add	r3, r2
 8001c08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	4b67      	ldr	r3, [pc, #412]	; (8001db0 <calibration+0xd50>)
 8001c12:	f7fe ff91 	bl	8000b38 <__aeabi_dcmpgt>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d012      	beq.n	8001c42 <calibration+0xbe2>
    		s1_theta_high[i] = s1_theta_high[i] - 360;    /* 360を上回った場合、0に飛ばす */
 8001c1c:	4a60      	ldr	r2, [pc, #384]	; (8001da0 <calibration+0xd40>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4413      	add	r3, r2
 8001c24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	4b60      	ldr	r3, [pc, #384]	; (8001db0 <calibration+0xd50>)
 8001c2e:	f7fe fb3b 	bl	80002a8 <__aeabi_dsub>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	485a      	ldr	r0, [pc, #360]	; (8001da0 <calibration+0xd40>)
 8001c38:	69b9      	ldr	r1, [r7, #24]
 8001c3a:	00c9      	lsls	r1, r1, #3
 8001c3c:	4401      	add	r1, r0
 8001c3e:	e9c1 2300 	strd	r2, r3, [r1]
    	}
    	if(s2_theta_low[i] < 0) {
 8001c42:	4a59      	ldr	r2, [pc, #356]	; (8001da8 <calibration+0xd48>)
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4413      	add	r3, r2
 8001c4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	f7fe ff51 	bl	8000afc <__aeabi_dcmplt>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d012      	beq.n	8001c86 <calibration+0xc26>
    		s2_theta_low[i] = s2_theta_low[i] + 360;    /* 0を下回った場合、360に飛ばす */
 8001c60:	4a51      	ldr	r2, [pc, #324]	; (8001da8 <calibration+0xd48>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	4413      	add	r3, r2
 8001c68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	4b4f      	ldr	r3, [pc, #316]	; (8001db0 <calibration+0xd50>)
 8001c72:	f7fe fb1b 	bl	80002ac <__adddf3>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	484b      	ldr	r0, [pc, #300]	; (8001da8 <calibration+0xd48>)
 8001c7c:	69b9      	ldr	r1, [r7, #24]
 8001c7e:	00c9      	lsls	r1, r1, #3
 8001c80:	4401      	add	r1, r0
 8001c82:	e9c1 2300 	strd	r2, r3, [r1]
    	}
    	if(s2_theta_high[i] < 0) {
 8001c86:	4a49      	ldr	r2, [pc, #292]	; (8001dac <calibration+0xd4c>)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	f7fe ff2f 	bl	8000afc <__aeabi_dcmplt>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d012      	beq.n	8001cca <calibration+0xc6a>
    		s2_theta_high[i] = s2_theta_high[i] + 360;    /* 0を下回った場合、360に飛ばす */
 8001ca4:	4a41      	ldr	r2, [pc, #260]	; (8001dac <calibration+0xd4c>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4413      	add	r3, r2
 8001cac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	4b3e      	ldr	r3, [pc, #248]	; (8001db0 <calibration+0xd50>)
 8001cb6:	f7fe faf9 	bl	80002ac <__adddf3>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	483b      	ldr	r0, [pc, #236]	; (8001dac <calibration+0xd4c>)
 8001cc0:	69b9      	ldr	r1, [r7, #24]
 8001cc2:	00c9      	lsls	r1, r1, #3
 8001cc4:	4401      	add	r1, r0
 8001cc6:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < 16; i++) {
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	61bb      	str	r3, [r7, #24]
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	2b0f      	cmp	r3, #15
 8001cd4:	f77f af26 	ble.w	8001b24 <calibration+0xac4>
    	}
    }

    /* STEP9 : Θ(theta)データを出力 */
    printf("\n");
 8001cd8:	200a      	movs	r0, #10
 8001cda:	f006 fd79 	bl	80087d0 <putchar>
    printf("s1\n");
 8001cde:	4835      	ldr	r0, [pc, #212]	; (8001db4 <calibration+0xd54>)
 8001ce0:	f006 fdd2 	bl	8008888 <puts>
    printf("Θ_low, Θ_center, Θ_high\n");
 8001ce4:	4834      	ldr	r0, [pc, #208]	; (8001db8 <calibration+0xd58>)
 8001ce6:	f006 fdcf 	bl	8008888 <puts>
    for (int i = 0; i < 16; i++) {
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	e01d      	b.n	8001d2c <calibration+0xccc>
    	printf("%lf, %lf, %lf\n", s1_theta_low[i], s1_theta[i], s1_theta_high[i]);
 8001cf0:	4a2a      	ldr	r2, [pc, #168]	; (8001d9c <calibration+0xd3c>)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001cfc:	4a25      	ldr	r2, [pc, #148]	; (8001d94 <calibration+0xd34>)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	4413      	add	r3, r2
 8001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d08:	4825      	ldr	r0, [pc, #148]	; (8001da0 <calibration+0xd40>)
 8001d0a:	6979      	ldr	r1, [r7, #20]
 8001d0c:	00c9      	lsls	r1, r1, #3
 8001d0e:	4401      	add	r1, r0
 8001d10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001d18:	e9cd 2300 	strd	r2, r3, [sp]
 8001d1c:	4622      	mov	r2, r4
 8001d1e:	462b      	mov	r3, r5
 8001d20:	4826      	ldr	r0, [pc, #152]	; (8001dbc <calibration+0xd5c>)
 8001d22:	f006 fd43 	bl	80087ac <iprintf>
    for (int i = 0; i < 16; i++) {
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2b0f      	cmp	r3, #15
 8001d30:	ddde      	ble.n	8001cf0 <calibration+0xc90>
    }
    printf("\n");
 8001d32:	200a      	movs	r0, #10
 8001d34:	f006 fd4c 	bl	80087d0 <putchar>
    printf("s2\n");
 8001d38:	4821      	ldr	r0, [pc, #132]	; (8001dc0 <calibration+0xd60>)
 8001d3a:	f006 fda5 	bl	8008888 <puts>
    printf("Θ_low, Θ_center, Θ_high\n");
 8001d3e:	481e      	ldr	r0, [pc, #120]	; (8001db8 <calibration+0xd58>)
 8001d40:	f006 fda2 	bl	8008888 <puts>
    for (int i = 0; i < 16; i++) {
 8001d44:	2300      	movs	r3, #0
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	e01d      	b.n	8001d86 <calibration+0xd26>
    	printf("%lf, %lf, %lf\n", s2_theta_low[i], s2_theta[i], s2_theta_high[i]);
 8001d4a:	4a17      	ldr	r2, [pc, #92]	; (8001da8 <calibration+0xd48>)
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4413      	add	r3, r2
 8001d52:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d56:	4a13      	ldr	r2, [pc, #76]	; (8001da4 <calibration+0xd44>)
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d62:	4812      	ldr	r0, [pc, #72]	; (8001dac <calibration+0xd4c>)
 8001d64:	6939      	ldr	r1, [r7, #16]
 8001d66:	00c9      	lsls	r1, r1, #3
 8001d68:	4401      	add	r1, r0
 8001d6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001d72:	e9cd 2300 	strd	r2, r3, [sp]
 8001d76:	4622      	mov	r2, r4
 8001d78:	462b      	mov	r3, r5
 8001d7a:	4810      	ldr	r0, [pc, #64]	; (8001dbc <calibration+0xd5c>)
 8001d7c:	f006 fd16 	bl	80087ac <iprintf>
    for (int i = 0; i < 16; i++) {
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	3301      	adds	r3, #1
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	2b0f      	cmp	r3, #15
 8001d8a:	ddde      	ble.n	8001d4a <calibration+0xcea>
    }

    return;
 8001d8c:	bf00      	nop
}
 8001d8e:	3770      	adds	r7, #112	; 0x70
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bdb0      	pop	{r4, r5, r7, pc}
 8001d94:	200008d0 	.word	0x200008d0
 8001d98:	20000008 	.word	0x20000008
 8001d9c:	200009d0 	.word	0x200009d0
 8001da0:	20000ad0 	.word	0x20000ad0
 8001da4:	20000950 	.word	0x20000950
 8001da8:	20000a50 	.word	0x20000a50
 8001dac:	20000b50 	.word	0x20000b50
 8001db0:	40768000 	.word	0x40768000
 8001db4:	0800cf94 	.word	0x0800cf94
 8001db8:	0800cf98 	.word	0x0800cf98
 8001dbc:	0800cfb4 	.word	0x0800cfb4
 8001dc0:	0800cfc4 	.word	0x0800cfc4
 8001dc4:	00000000 	.word	0x00000000

08001dc8 <operation>:


void operation() {
 8001dc8:	b5b0      	push	{r4, r5, r7, lr}
 8001dca:	b0cc      	sub	sp, #304	; 0x130
 8001dcc:	af04      	add	r7, sp, #16

	double dif_sin2cos2;    // ふたつのsin^2+cos^2の引き算
	double sum_sin2cos2;    // ふたつのsin^2+cos^2の足し算

	/* STEP2 : Bx, By, Bzのデータ取得 */
	uint8_t s1_bxyz[7] = {0};    /* 7byte生データ(ST, Bx x2, By x2, Bz x2) の読み値 sensor1側*/
 8001dce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001dd2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	3304      	adds	r3, #4
 8001ddc:	2100      	movs	r1, #0
 8001dde:	460a      	mov	r2, r1
 8001de0:	801a      	strh	r2, [r3, #0]
 8001de2:	460a      	mov	r2, r1
 8001de4:	709a      	strb	r2, [r3, #2]
	uint8_t s2_bxyz[7] = {0};    /* 7byte生データ(ST, Bx x2, By x2, Bz x2) の読み値 sensor2側*/
 8001de6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001dea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	3304      	adds	r3, #4
 8001df4:	2100      	movs	r1, #0
 8001df6:	460a      	mov	r2, r1
 8001df8:	801a      	strh	r2, [r3, #0]
 8001dfa:	460a      	mov	r2, r1
 8001dfc:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Mem_Read(&hi2c1, dev_address_1<<1, 0x17, 1, s1_bxyz, 7, 1000);    // 7byteデータを取得
 8001dfe:	4bca      	ldr	r3, [pc, #808]	; (8002128 <operation+0x360>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	b299      	uxth	r1, r3
 8001e08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e0c:	9302      	str	r3, [sp, #8]
 8001e0e:	2307      	movs	r3, #7
 8001e10:	9301      	str	r3, [sp, #4]
 8001e12:	f107 0308 	add.w	r3, r7, #8
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	2301      	movs	r3, #1
 8001e1a:	2217      	movs	r2, #23
 8001e1c:	48c3      	ldr	r0, [pc, #780]	; (800212c <operation+0x364>)
 8001e1e:	f002 fbc3 	bl	80045a8 <HAL_I2C_Mem_Read>
    s1_raw_bx_op = (s1_bxyz[5] << 8) | s1_bxyz[6];
 8001e22:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001e26:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e2a:	795b      	ldrb	r3, [r3, #5]
 8001e2c:	021b      	lsls	r3, r3, #8
 8001e2e:	b21a      	sxth	r2, r3
 8001e30:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001e34:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e38:	799b      	ldrb	r3, [r3, #6]
 8001e3a:	b21b      	sxth	r3, r3
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
    s1_raw_by_op = (s1_bxyz[3] << 8) | s1_bxyz[4];
 8001e42:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001e46:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e4a:	78db      	ldrb	r3, [r3, #3]
 8001e4c:	021b      	lsls	r3, r3, #8
 8001e4e:	b21a      	sxth	r2, r3
 8001e50:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001e54:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e58:	791b      	ldrb	r3, [r3, #4]
 8001e5a:	b21b      	sxth	r3, r3
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
    s1_raw_bz_op = (s1_bxyz[1] << 8) | s1_bxyz[2];
 8001e62:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001e66:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e6a:	785b      	ldrb	r3, [r3, #1]
 8001e6c:	021b      	lsls	r3, r3, #8
 8001e6e:	b21a      	sxth	r2, r3
 8001e70:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001e74:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e78:	789b      	ldrb	r3, [r3, #2]
 8001e7a:	b21b      	sxth	r3, r3
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102

    HAL_I2C_Mem_Read(&hi2c1, dev_address_2<<1, 0x17, 1, s2_bxyz, 7, 1000);    // 7byteデータを取得
 8001e82:	4bab      	ldr	r3, [pc, #684]	; (8002130 <operation+0x368>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	b299      	uxth	r1, r3
 8001e8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e90:	9302      	str	r3, [sp, #8]
 8001e92:	2307      	movs	r3, #7
 8001e94:	9301      	str	r3, [sp, #4]
 8001e96:	463b      	mov	r3, r7
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	2217      	movs	r2, #23
 8001e9e:	48a3      	ldr	r0, [pc, #652]	; (800212c <operation+0x364>)
 8001ea0:	f002 fb82 	bl	80045a8 <HAL_I2C_Mem_Read>
    s2_raw_bx_op = (s2_bxyz[5] << 8) | s2_bxyz[6];
 8001ea4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001ea8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001eac:	795b      	ldrb	r3, [r3, #5]
 8001eae:	021b      	lsls	r3, r3, #8
 8001eb0:	b21a      	sxth	r2, r3
 8001eb2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001eb6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001eba:	799b      	ldrb	r3, [r3, #6]
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
    s2_raw_by_op = (s2_bxyz[3] << 8) | s2_bxyz[4];
 8001ec4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001ec8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ecc:	78db      	ldrb	r3, [r3, #3]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	b21a      	sxth	r2, r3
 8001ed2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001ed6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001eda:	791b      	ldrb	r3, [r3, #4]
 8001edc:	b21b      	sxth	r3, r3
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
    s2_raw_bz_op = (s2_bxyz[1] << 8) | s2_bxyz[2];
 8001ee4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001ee8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001eec:	785b      	ldrb	r3, [r3, #1]
 8001eee:	021b      	lsls	r3, r3, #8
 8001ef0:	b21a      	sxth	r2, r3
 8001ef2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001ef6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001efa:	789b      	ldrb	r3, [r3, #2]
 8001efc:	b21b      	sxth	r3, r3
 8001efe:	4313      	orrs	r3, r2
 8001f00:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc

    /* STEP3 : 規格化データを導出 */
  	s1_std_bx_op = (double) (s1_raw_bx_op - s1_raw_bx_offset) / (double) (s1_raw_bx_p2p /2);
 8001f04:	f9b7 3106 	ldrsh.w	r3, [r7, #262]	; 0x106
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fb1b 	bl	8000544 <__aeabi_i2d>
 8001f0e:	4b89      	ldr	r3, [pc, #548]	; (8002134 <operation+0x36c>)
 8001f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f14:	f7fe f9c8 	bl	80002a8 <__aeabi_dsub>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4614      	mov	r4, r2
 8001f1e:	461d      	mov	r5, r3
 8001f20:	4b85      	ldr	r3, [pc, #532]	; (8002138 <operation+0x370>)
 8001f22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f2e:	f7fe fc9d 	bl	800086c <__aeabi_ddiv>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4620      	mov	r0, r4
 8001f38:	4629      	mov	r1, r5
 8001f3a:	f7fe fc97 	bl	800086c <__aeabi_ddiv>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
    s1_std_by_op = (double) (s1_raw_by_op - s1_raw_by_offset) / (double) (s1_raw_by_p2p /2);
 8001f46:	f9b7 3104 	ldrsh.w	r3, [r7, #260]	; 0x104
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fafa 	bl	8000544 <__aeabi_i2d>
 8001f50:	4b7a      	ldr	r3, [pc, #488]	; (800213c <operation+0x374>)
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	f7fe f9a7 	bl	80002a8 <__aeabi_dsub>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4614      	mov	r4, r2
 8001f60:	461d      	mov	r5, r3
 8001f62:	4b77      	ldr	r3, [pc, #476]	; (8002140 <operation+0x378>)
 8001f64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f70:	f7fe fc7c 	bl	800086c <__aeabi_ddiv>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4620      	mov	r0, r4
 8001f7a:	4629      	mov	r1, r5
 8001f7c:	f7fe fc76 	bl	800086c <__aeabi_ddiv>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  	s1_std_bz_op = (double) (s1_raw_bz_op - s1_raw_bz_offset) / (double) (s1_raw_bz_p2p /2);
 8001f88:	f9b7 3102 	ldrsh.w	r3, [r7, #258]	; 0x102
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe fad9 	bl	8000544 <__aeabi_i2d>
 8001f92:	4b6c      	ldr	r3, [pc, #432]	; (8002144 <operation+0x37c>)
 8001f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f98:	f7fe f986 	bl	80002a8 <__aeabi_dsub>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4614      	mov	r4, r2
 8001fa2:	461d      	mov	r5, r3
 8001fa4:	4b68      	ldr	r3, [pc, #416]	; (8002148 <operation+0x380>)
 8001fa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fb2:	f7fe fc5b 	bl	800086c <__aeabi_ddiv>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4620      	mov	r0, r4
 8001fbc:	4629      	mov	r1, r5
 8001fbe:	f7fe fc55 	bl	800086c <__aeabi_ddiv>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
  	s2_std_bx_op = (double) (s2_raw_bx_op - s2_raw_bx_offset) / (double) (s2_raw_bx_p2p /2);
 8001fca:	f9b7 3100 	ldrsh.w	r3, [r7, #256]	; 0x100
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fab8 	bl	8000544 <__aeabi_i2d>
 8001fd4:	4b5d      	ldr	r3, [pc, #372]	; (800214c <operation+0x384>)
 8001fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fda:	f7fe f965 	bl	80002a8 <__aeabi_dsub>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4614      	mov	r4, r2
 8001fe4:	461d      	mov	r5, r3
 8001fe6:	4b5a      	ldr	r3, [pc, #360]	; (8002150 <operation+0x388>)
 8001fe8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ff4:	f7fe fc3a 	bl	800086c <__aeabi_ddiv>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	4629      	mov	r1, r5
 8002000:	f7fe fc34 	bl	800086c <__aeabi_ddiv>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
  	s2_std_by_op = (double) (s2_raw_by_op - s2_raw_by_offset) / (double) (s2_raw_by_p2p /2);
 800200c:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	; 0xfe
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fa97 	bl	8000544 <__aeabi_i2d>
 8002016:	4b4f      	ldr	r3, [pc, #316]	; (8002154 <operation+0x38c>)
 8002018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201c:	f7fe f944 	bl	80002a8 <__aeabi_dsub>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4614      	mov	r4, r2
 8002026:	461d      	mov	r5, r3
 8002028:	4b4b      	ldr	r3, [pc, #300]	; (8002158 <operation+0x390>)
 800202a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002036:	f7fe fc19 	bl	800086c <__aeabi_ddiv>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4620      	mov	r0, r4
 8002040:	4629      	mov	r1, r5
 8002042:	f7fe fc13 	bl	800086c <__aeabi_ddiv>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
  	s2_std_bz_op = (double) (s2_raw_bz_op - s2_raw_bz_offset) / (double) (s2_raw_bz_p2p /2);
 800204e:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	; 0xfc
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fa76 	bl	8000544 <__aeabi_i2d>
 8002058:	4b40      	ldr	r3, [pc, #256]	; (800215c <operation+0x394>)
 800205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205e:	f7fe f923 	bl	80002a8 <__aeabi_dsub>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4614      	mov	r4, r2
 8002068:	461d      	mov	r5, r3
 800206a:	4b3d      	ldr	r3, [pc, #244]	; (8002160 <operation+0x398>)
 800206c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002078:	f7fe fbf8 	bl	800086c <__aeabi_ddiv>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4620      	mov	r0, r4
 8002082:	4629      	mov	r1, r5
 8002084:	f7fe fbf2 	bl	800086c <__aeabi_ddiv>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8

  	/* STEP4 : sin^2+cos^2を計算 */
  	s1_sin2cos2 = pow(s1_std_bx_op,2) + pow(s1_std_bz_op,2);    /* 乗数を作るpow関数の戻り値はdouble型 */
 8002090:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8002110 <operation+0x348>
 8002094:	ed97 0b3c 	vldr	d0, [r7, #240]	; 0xf0
 8002098:	f009 fe2c 	bl	800bcf4 <pow>
 800209c:	ec55 4b10 	vmov	r4, r5, d0
 80020a0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8002110 <operation+0x348>
 80020a4:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 80020a8:	f009 fe24 	bl	800bcf4 <pow>
 80020ac:	ec53 2b10 	vmov	r2, r3, d0
 80020b0:	4620      	mov	r0, r4
 80020b2:	4629      	mov	r1, r5
 80020b4:	f7fe f8fa 	bl	80002ac <__adddf3>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  	s2_sin2cos2 = pow(s2_std_bx_op,2) + pow(s2_std_bz_op,2);
 80020c0:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8002110 <operation+0x348>
 80020c4:	ed97 0b36 	vldr	d0, [r7, #216]	; 0xd8
 80020c8:	f009 fe14 	bl	800bcf4 <pow>
 80020cc:	ec55 4b10 	vmov	r4, r5, d0
 80020d0:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8002110 <operation+0x348>
 80020d4:	ed97 0b32 	vldr	d0, [r7, #200]	; 0xc8
 80020d8:	f009 fe0c 	bl	800bcf4 <pow>
 80020dc:	ec53 2b10 	vmov	r2, r3, d0
 80020e0:	4620      	mov	r0, r4
 80020e2:	4629      	mov	r1, r5
 80020e4:	f7fe f8e2 	bl	80002ac <__adddf3>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
//  		return;
//  	}


  	/* STEP5-1 : 左右チルト5段階判定 */
	double dif_sin2cos2_s1_side_0_lower = 0.70;		// S1側 第1領域　下限
 80020f0:	a309      	add	r3, pc, #36	; (adr r3, 8002118 <operation+0x350>)
 80020f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f6:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	double dif_sin2cos2_s1_side_0_upper = 0.95;		// S1側 第1領域　上限
 80020fa:	a309      	add	r3, pc, #36	; (adr r3, 8002120 <operation+0x358>)
 80020fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002100:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	double dif_sin2cos2_s1_side_1_upper = 1.20;		// S1側 第2領域　上限
 8002104:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8002108:	4b16      	ldr	r3, [pc, #88]	; (8002164 <operation+0x39c>)
 800210a:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 800210e:	e02b      	b.n	8002168 <operation+0x3a0>
 8002110:	00000000 	.word	0x00000000
 8002114:	40000000 	.word	0x40000000
 8002118:	66666666 	.word	0x66666666
 800211c:	3fe66666 	.word	0x3fe66666
 8002120:	66666666 	.word	0x66666666
 8002124:	3fee6666 	.word	0x3fee6666
 8002128:	20000000 	.word	0x20000000
 800212c:	2000022c 	.word	0x2000022c
 8002130:	20000001 	.word	0x20000001
 8002134:	20000480 	.word	0x20000480
 8002138:	20000450 	.word	0x20000450
 800213c:	20000488 	.word	0x20000488
 8002140:	20000458 	.word	0x20000458
 8002144:	20000490 	.word	0x20000490
 8002148:	20000460 	.word	0x20000460
 800214c:	20000498 	.word	0x20000498
 8002150:	20000468 	.word	0x20000468
 8002154:	200004a0 	.word	0x200004a0
 8002158:	20000470 	.word	0x20000470
 800215c:	200004a8 	.word	0x200004a8
 8002160:	20000478 	.word	0x20000478
 8002164:	3ff33333 	.word	0x3ff33333
	double dif_sin2cos2_s1_side_2_upper = 1.45;		// S1側 第3領域　上限
 8002168:	a39f      	add	r3, pc, #636	; (adr r3, 80023e8 <operation+0x620>)
 800216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216e:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	double dif_sin2cos2_s1_side_3_upper = 1.70;		// S1側 第4領域　上限
 8002172:	a39f      	add	r3, pc, #636	; (adr r3, 80023f0 <operation+0x628>)
 8002174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002178:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	double dif_sin2cos2_s1_side_4_upper = 10;		// S1側 第5領域　上現
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	4b8d      	ldr	r3, [pc, #564]	; (80023b8 <operation+0x5f0>)
 8002182:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

	double dif_sin2cos2_s2_side_0_upper = -0.70;	// S2側 第1領域　上限
 8002186:	a382      	add	r3, pc, #520	; (adr r3, 8002390 <operation+0x5c8>)
 8002188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	double dif_sin2cos2_s2_side_0_lower = -0.95;	// S2側　第1領域　下限
 8002190:	a381      	add	r3, pc, #516	; (adr r3, 8002398 <operation+0x5d0>)
 8002192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002196:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	double dif_sin2cos2_s2_side_1_lower = -1.20;	// S2側　第2領域　下限
 800219a:	a381      	add	r3, pc, #516	; (adr r3, 80023a0 <operation+0x5d8>)
 800219c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	double dif_sin2cos2_s2_side_2_lower = -1.45;	// S2側　第3領域　下限
 80021a4:	a380      	add	r3, pc, #512	; (adr r3, 80023a8 <operation+0x5e0>)
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	double dif_sin2cos2_s2_side_3_lower = -1.70;	// S2側　第4領域　下限
 80021ae:	a380      	add	r3, pc, #512	; (adr r3, 80023b0 <operation+0x5e8>)
 80021b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b4:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double dif_sin2cos2_s2_side_4_lower = -10;		// S2側　第5領域　下限
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	4b7f      	ldr	r3, [pc, #508]	; (80023bc <operation+0x5f4>)
 80021be:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

  	dif_sin2cos2 = s1_sin2cos2 - s2_sin2cos2;
 80021c2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80021c6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80021ca:	f7fe f86d 	bl	80002a8 <__aeabi_dsub>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

  	if (dif_sin2cos2 >= dif_sin2cos2_s1_side_0_lower && dif_sin2cos2 < dif_sin2cos2_s1_side_0_upper) {
 80021d6:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80021da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80021de:	f7fe fca1 	bl	8000b24 <__aeabi_dcmpge>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00c      	beq.n	8002202 <operation+0x43a>
 80021e8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80021ec:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80021f0:	f7fe fc84 	bl	8000afc <__aeabi_dcmplt>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <operation+0x43a>
  		printf("RT0\n");
 80021fa:	4871      	ldr	r0, [pc, #452]	; (80023c0 <operation+0x5f8>)
 80021fc:	f006 fb44 	bl	8008888 <puts>
  		return;
 8002200:	e2bc      	b.n	800277c <operation+0x9b4>
  	} else if (dif_sin2cos2 >= dif_sin2cos2_s1_side_0_upper && dif_sin2cos2 < dif_sin2cos2_s1_side_1_upper) {
 8002202:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002206:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800220a:	f7fe fc8b 	bl	8000b24 <__aeabi_dcmpge>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00c      	beq.n	800222e <operation+0x466>
 8002214:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002218:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800221c:	f7fe fc6e 	bl	8000afc <__aeabi_dcmplt>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <operation+0x466>
  		printf("RT1\n");
 8002226:	4867      	ldr	r0, [pc, #412]	; (80023c4 <operation+0x5fc>)
 8002228:	f006 fb2e 	bl	8008888 <puts>
  		return;
 800222c:	e2a6      	b.n	800277c <operation+0x9b4>
  	} else if (dif_sin2cos2 >= dif_sin2cos2_s1_side_1_upper && dif_sin2cos2 < dif_sin2cos2_s1_side_2_upper) {
 800222e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002232:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002236:	f7fe fc75 	bl	8000b24 <__aeabi_dcmpge>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00c      	beq.n	800225a <operation+0x492>
 8002240:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002244:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002248:	f7fe fc58 	bl	8000afc <__aeabi_dcmplt>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <operation+0x492>
  		printf("RT2\n");
 8002252:	485d      	ldr	r0, [pc, #372]	; (80023c8 <operation+0x600>)
 8002254:	f006 fb18 	bl	8008888 <puts>
  		return;
 8002258:	e290      	b.n	800277c <operation+0x9b4>
  	} else if (dif_sin2cos2 >= dif_sin2cos2_s1_side_2_upper && dif_sin2cos2 < dif_sin2cos2_s1_side_3_upper) {
 800225a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800225e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002262:	f7fe fc5f 	bl	8000b24 <__aeabi_dcmpge>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00c      	beq.n	8002286 <operation+0x4be>
 800226c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002270:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002274:	f7fe fc42 	bl	8000afc <__aeabi_dcmplt>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <operation+0x4be>
  		printf("RT3\n");
 800227e:	4853      	ldr	r0, [pc, #332]	; (80023cc <operation+0x604>)
 8002280:	f006 fb02 	bl	8008888 <puts>
  		return;
 8002284:	e27a      	b.n	800277c <operation+0x9b4>
  	} else if (dif_sin2cos2 >= dif_sin2cos2_s1_side_3_upper && dif_sin2cos2 < dif_sin2cos2_s1_side_4_upper) {
 8002286:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800228a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800228e:	f7fe fc49 	bl	8000b24 <__aeabi_dcmpge>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00c      	beq.n	80022b2 <operation+0x4ea>
 8002298:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800229c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80022a0:	f7fe fc2c 	bl	8000afc <__aeabi_dcmplt>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <operation+0x4ea>
  		printf("RT4\n");
 80022aa:	4849      	ldr	r0, [pc, #292]	; (80023d0 <operation+0x608>)
 80022ac:	f006 faec 	bl	8008888 <puts>
  		return;
 80022b0:	e264      	b.n	800277c <operation+0x9b4>
  	} else if (dif_sin2cos2 <= dif_sin2cos2_s2_side_0_upper && dif_sin2cos2 > dif_sin2cos2_s2_side_0_lower) {
 80022b2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80022b6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80022ba:	f7fe fc29 	bl	8000b10 <__aeabi_dcmple>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00c      	beq.n	80022de <operation+0x516>
 80022c4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80022c8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80022cc:	f7fe fc34 	bl	8000b38 <__aeabi_dcmpgt>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <operation+0x516>
  		printf("LT0\n");
 80022d6:	483f      	ldr	r0, [pc, #252]	; (80023d4 <operation+0x60c>)
 80022d8:	f006 fad6 	bl	8008888 <puts>
  		return;
 80022dc:	e24e      	b.n	800277c <operation+0x9b4>
  	} else if (dif_sin2cos2 <= dif_sin2cos2_s2_side_0_lower && dif_sin2cos2 > dif_sin2cos2_s2_side_1_lower) {
 80022de:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80022e2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80022e6:	f7fe fc13 	bl	8000b10 <__aeabi_dcmple>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00c      	beq.n	800230a <operation+0x542>
 80022f0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80022f4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80022f8:	f7fe fc1e 	bl	8000b38 <__aeabi_dcmpgt>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <operation+0x542>
  		printf("LT1\n");
 8002302:	4835      	ldr	r0, [pc, #212]	; (80023d8 <operation+0x610>)
 8002304:	f006 fac0 	bl	8008888 <puts>
  		return;
 8002308:	e238      	b.n	800277c <operation+0x9b4>
  	} else if (dif_sin2cos2 <= dif_sin2cos2_s2_side_1_lower && dif_sin2cos2 > dif_sin2cos2_s2_side_2_lower) {
 800230a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800230e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002312:	f7fe fbfd 	bl	8000b10 <__aeabi_dcmple>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00c      	beq.n	8002336 <operation+0x56e>
 800231c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002320:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002324:	f7fe fc08 	bl	8000b38 <__aeabi_dcmpgt>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <operation+0x56e>
  		printf("LT2\n");
 800232e:	482b      	ldr	r0, [pc, #172]	; (80023dc <operation+0x614>)
 8002330:	f006 faaa 	bl	8008888 <puts>
  		return;
 8002334:	e222      	b.n	800277c <operation+0x9b4>
  	} else if (dif_sin2cos2 <= dif_sin2cos2_s2_side_2_lower && dif_sin2cos2 > dif_sin2cos2_s2_side_3_lower) {
 8002336:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800233a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800233e:	f7fe fbe7 	bl	8000b10 <__aeabi_dcmple>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00c      	beq.n	8002362 <operation+0x59a>
 8002348:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800234c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002350:	f7fe fbf2 	bl	8000b38 <__aeabi_dcmpgt>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <operation+0x59a>
  		printf("LT3\n");
 800235a:	4821      	ldr	r0, [pc, #132]	; (80023e0 <operation+0x618>)
 800235c:	f006 fa94 	bl	8008888 <puts>
  		return;
 8002360:	e20c      	b.n	800277c <operation+0x9b4>
  	} else if (dif_sin2cos2 <= dif_sin2cos2_s2_side_3_lower && dif_sin2cos2 > dif_sin2cos2_s2_side_4_lower) {
 8002362:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002366:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800236a:	f7fe fbd1 	bl	8000b10 <__aeabi_dcmple>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d041      	beq.n	80023f8 <operation+0x630>
 8002374:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002378:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800237c:	f7fe fbdc 	bl	8000b38 <__aeabi_dcmpgt>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d038      	beq.n	80023f8 <operation+0x630>
  		printf("LT4\n");
 8002386:	4817      	ldr	r0, [pc, #92]	; (80023e4 <operation+0x61c>)
 8002388:	f006 fa7e 	bl	8008888 <puts>
  		return;
 800238c:	e1f6      	b.n	800277c <operation+0x9b4>
 800238e:	bf00      	nop
 8002390:	66666666 	.word	0x66666666
 8002394:	bfe66666 	.word	0xbfe66666
 8002398:	66666666 	.word	0x66666666
 800239c:	bfee6666 	.word	0xbfee6666
 80023a0:	33333333 	.word	0x33333333
 80023a4:	bff33333 	.word	0xbff33333
 80023a8:	33333333 	.word	0x33333333
 80023ac:	bff73333 	.word	0xbff73333
 80023b0:	33333333 	.word	0x33333333
 80023b4:	bffb3333 	.word	0xbffb3333
 80023b8:	40240000 	.word	0x40240000
 80023bc:	c0240000 	.word	0xc0240000
 80023c0:	0800cfc8 	.word	0x0800cfc8
 80023c4:	0800cfcc 	.word	0x0800cfcc
 80023c8:	0800cfd0 	.word	0x0800cfd0
 80023cc:	0800cfd4 	.word	0x0800cfd4
 80023d0:	0800cfd8 	.word	0x0800cfd8
 80023d4:	0800cfdc 	.word	0x0800cfdc
 80023d8:	0800cfe0 	.word	0x0800cfe0
 80023dc:	0800cfe4 	.word	0x0800cfe4
 80023e0:	0800cfe8 	.word	0x0800cfe8
 80023e4:	0800cfec 	.word	0x0800cfec
 80023e8:	33333333 	.word	0x33333333
 80023ec:	3ff73333 	.word	0x3ff73333
 80023f0:	33333333 	.word	0x33333333
 80023f4:	3ffb3333 	.word	0x3ffb3333
//  		return;
//  	}


  	/* STEP6-1 : プッシュ5段階判定 */
  	double sum_sin2cos2_push_0_lower = 2.75;	// 押し込み 第1領域 下限
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	4b9c      	ldr	r3, [pc, #624]	; (8002670 <operation+0x8a8>)
 80023fe:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  	double sum_sin2cos2_push_0_upper = 3.00;	// 押し込み 第1領域 上限
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	4b9b      	ldr	r3, [pc, #620]	; (8002674 <operation+0x8ac>)
 8002408:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  	double sum_sin2cos2_push_1_upper = 3.25;	// 押し込み 第2領域 上限
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	4b99      	ldr	r3, [pc, #612]	; (8002678 <operation+0x8b0>)
 8002412:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  	double sum_sin2cos2_push_2_upper = 3.50;	// 押し込み 第3領域 上限
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	4b98      	ldr	r3, [pc, #608]	; (800267c <operation+0x8b4>)
 800241c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  	double sum_sin2cos2_push_3_upper = 3.75;	// 押し込み 第4領域 上限
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	4b96      	ldr	r3, [pc, #600]	; (8002680 <operation+0x8b8>)
 8002426:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  	double sum_sin2cos2_push_4_upper = 10;		// 押し込み 第5領域 上限
 800242a:	f107 0320 	add.w	r3, r7, #32
 800242e:	4619      	mov	r1, r3
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	4b93      	ldr	r3, [pc, #588]	; (8002684 <operation+0x8bc>)
 8002436:	e9c1 2300 	strd	r2, r3, [r1]

  	sum_sin2cos2 = s1_sin2cos2 + s2_sin2cos2;
 800243a:	f107 0320 	add.w	r3, r7, #32
 800243e:	461c      	mov	r4, r3
 8002440:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8002444:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002448:	f7fd ff30 	bl	80002ac <__adddf3>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	e944 2302 	strd	r2, r3, [r4, #-8]

  	if (sum_sin2cos2 >= sum_sin2cos2_push_0_lower && sum_sin2cos2 < sum_sin2cos2_push_0_upper) {
 8002454:	f107 0320 	add.w	r3, r7, #32
 8002458:	4619      	mov	r1, r3
 800245a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800245e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8002462:	f7fe fb5f 	bl	8000b24 <__aeabi_dcmpge>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00f      	beq.n	800248c <operation+0x6c4>
 800246c:	f107 0320 	add.w	r3, r7, #32
 8002470:	4619      	mov	r1, r3
 8002472:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002476:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800247a:	f7fe fb3f 	bl	8000afc <__aeabi_dcmplt>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <operation+0x6c4>
  		printf("PS0\n");
 8002484:	4880      	ldr	r0, [pc, #512]	; (8002688 <operation+0x8c0>)
 8002486:	f006 f9ff 	bl	8008888 <puts>
  		return;
 800248a:	e177      	b.n	800277c <operation+0x9b4>
  	} else if (sum_sin2cos2 >= sum_sin2cos2_push_0_upper && sum_sin2cos2 < sum_sin2cos2_push_1_upper) {
 800248c:	f107 0320 	add.w	r3, r7, #32
 8002490:	4619      	mov	r1, r3
 8002492:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002496:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800249a:	f7fe fb43 	bl	8000b24 <__aeabi_dcmpge>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00f      	beq.n	80024c4 <operation+0x6fc>
 80024a4:	f107 0320 	add.w	r3, r7, #32
 80024a8:	4619      	mov	r1, r3
 80024aa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024ae:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80024b2:	f7fe fb23 	bl	8000afc <__aeabi_dcmplt>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <operation+0x6fc>
  		printf("PS1\n");
 80024bc:	4873      	ldr	r0, [pc, #460]	; (800268c <operation+0x8c4>)
 80024be:	f006 f9e3 	bl	8008888 <puts>
  		return;
 80024c2:	e15b      	b.n	800277c <operation+0x9b4>
  	} else if (sum_sin2cos2 >= sum_sin2cos2_push_1_upper && sum_sin2cos2 < sum_sin2cos2_push_2_upper) {
 80024c4:	f107 0320 	add.w	r3, r7, #32
 80024c8:	4619      	mov	r1, r3
 80024ca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024ce:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80024d2:	f7fe fb27 	bl	8000b24 <__aeabi_dcmpge>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00f      	beq.n	80024fc <operation+0x734>
 80024dc:	f107 0320 	add.w	r3, r7, #32
 80024e0:	4619      	mov	r1, r3
 80024e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80024e6:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80024ea:	f7fe fb07 	bl	8000afc <__aeabi_dcmplt>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <operation+0x734>
  		printf("PS2\n");
 80024f4:	4866      	ldr	r0, [pc, #408]	; (8002690 <operation+0x8c8>)
 80024f6:	f006 f9c7 	bl	8008888 <puts>
  		return;
 80024fa:	e13f      	b.n	800277c <operation+0x9b4>
  	} else if (sum_sin2cos2 >= sum_sin2cos2_push_2_upper && sum_sin2cos2 < sum_sin2cos2_push_3_upper) {
 80024fc:	f107 0320 	add.w	r3, r7, #32
 8002500:	4619      	mov	r1, r3
 8002502:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002506:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800250a:	f7fe fb0b 	bl	8000b24 <__aeabi_dcmpge>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00f      	beq.n	8002534 <operation+0x76c>
 8002514:	f107 0320 	add.w	r3, r7, #32
 8002518:	4619      	mov	r1, r3
 800251a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800251e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8002522:	f7fe faeb 	bl	8000afc <__aeabi_dcmplt>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <operation+0x76c>
  		printf("PS3\n");
 800252c:	4859      	ldr	r0, [pc, #356]	; (8002694 <operation+0x8cc>)
 800252e:	f006 f9ab 	bl	8008888 <puts>
  		return;
 8002532:	e123      	b.n	800277c <operation+0x9b4>
  	} else if (sum_sin2cos2 >= sum_sin2cos2_push_3_upper && sum_sin2cos2 < sum_sin2cos2_push_4_upper) {
 8002534:	f107 0320 	add.w	r3, r7, #32
 8002538:	4619      	mov	r1, r3
 800253a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800253e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8002542:	f7fe faef 	bl	8000b24 <__aeabi_dcmpge>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d011      	beq.n	8002570 <operation+0x7a8>
 800254c:	f107 0320 	add.w	r3, r7, #32
 8002550:	4619      	mov	r1, r3
 8002552:	f107 0320 	add.w	r3, r7, #32
 8002556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255a:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800255e:	f7fe facd 	bl	8000afc <__aeabi_dcmplt>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <operation+0x7a8>
  		printf("PS4\n");
 8002568:	484b      	ldr	r0, [pc, #300]	; (8002698 <operation+0x8d0>)
 800256a:	f006 f98d 	bl	8008888 <puts>
  		return;
 800256e:	e105      	b.n	800277c <operation+0x9b4>
  	}


  	/* STEP7 : s1の信号のみでATANの計算 */
  	double s1_atan_op = atan(s1_std_bz_op / s1_std_bx_op);
 8002570:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8002574:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002578:	f7fe f978 	bl	800086c <__aeabi_ddiv>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	ec43 2b17 	vmov	d7, r2, r3
 8002584:	f107 0310 	add.w	r3, r7, #16
 8002588:	461c      	mov	r4, r3
 800258a:	eeb0 0a47 	vmov.f32	s0, s14
 800258e:	eef0 0a67 	vmov.f32	s1, s15
 8002592:	f009 fc21 	bl	800bdd8 <atan>
 8002596:	ed84 0b00 	vstr	d0, [r4]

  	/* STEP8 : s1の信号のみで符号をみてエリアの判定 */
  	uint8_t s1_std_bx_sign_op;
  	if(s1_std_bx_op >= 0){    // 正なら1
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80025a6:	f7fe fabd 	bl	8000b24 <__aeabi_dcmpge>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <operation+0x7f0>
  	   s1_std_bx_sign_op = 1;
 80025b0:	2301      	movs	r3, #1
 80025b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 80025b6:	e00d      	b.n	80025d4 <operation+0x80c>
  	}
  	else if(s1_std_bx_op < 0){    // 負なら0
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	f04f 0300 	mov.w	r3, #0
 80025c0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80025c4:	f7fe fa9a 	bl	8000afc <__aeabi_dcmplt>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <operation+0x80c>
   	   s1_std_bx_sign_op = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  	}

  	/* STEP9 : s1の信号のみで角度情報thetaを取得 */
  	double s1_theta_op;

  	if(s1_std_bx_sign_op == 0){    // 0すなわち負なら
 80025d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d117      	bne.n	800260c <operation+0x844>
  		s1_theta_op = (s1_atan_op + M_PI / 2) * (180 / M_PI);
 80025dc:	f107 0310 	add.w	r3, r7, #16
 80025e0:	4619      	mov	r1, r3
 80025e2:	a31f      	add	r3, pc, #124	; (adr r3, 8002660 <operation+0x898>)
 80025e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025ec:	f7fd fe5e 	bl	80002ac <__adddf3>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4610      	mov	r0, r2
 80025f6:	4619      	mov	r1, r3
 80025f8:	a31b      	add	r3, pc, #108	; (adr r3, 8002668 <operation+0x8a0>)
 80025fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fe:	f7fe f80b 	bl	8000618 <__aeabi_dmul>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
 800260a:	e023      	b.n	8002654 <operation+0x88c>
  	}
  	else if(s1_std_bx_sign_op == 1){    // 1すなわち正なら
 800260c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002610:	2b01      	cmp	r3, #1
 8002612:	d11f      	bne.n	8002654 <operation+0x88c>
  		s1_theta_op = (s1_atan_op + M_PI / 2) * (180 / M_PI) + 180;
 8002614:	f107 0310 	add.w	r3, r7, #16
 8002618:	4619      	mov	r1, r3
 800261a:	a311      	add	r3, pc, #68	; (adr r3, 8002660 <operation+0x898>)
 800261c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002620:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002624:	f7fd fe42 	bl	80002ac <__adddf3>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4610      	mov	r0, r2
 800262e:	4619      	mov	r1, r3
 8002630:	a30d      	add	r3, pc, #52	; (adr r3, 8002668 <operation+0x8a0>)
 8002632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002636:	f7fd ffef 	bl	8000618 <__aeabi_dmul>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4610      	mov	r0, r2
 8002640:	4619      	mov	r1, r3
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <operation+0x8d4>)
 8002648:	f7fd fe30 	bl	80002ac <__adddf3>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  	 * pattern1； (low, high) = (355, 15) などのように、lowしきい値が大きい数のとき
  	 * pattern2; (low, high) = (5, 25) などのように、highしきい値が大きい数のとき
  	 */
  	int i;
  	int j;
  	for (i=0;i<16;i++){
 8002654:	2300      	movs	r3, #0
 8002656:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800265a:	e07b      	b.n	8002754 <operation+0x98c>
 800265c:	f3af 8000 	nop.w
 8002660:	54442d18 	.word	0x54442d18
 8002664:	3ff921fb 	.word	0x3ff921fb
 8002668:	1a63c1f8 	.word	0x1a63c1f8
 800266c:	404ca5dc 	.word	0x404ca5dc
 8002670:	40060000 	.word	0x40060000
 8002674:	40080000 	.word	0x40080000
 8002678:	400a0000 	.word	0x400a0000
 800267c:	400c0000 	.word	0x400c0000
 8002680:	400e0000 	.word	0x400e0000
 8002684:	40240000 	.word	0x40240000
 8002688:	0800cff0 	.word	0x0800cff0
 800268c:	0800cff4 	.word	0x0800cff4
 8002690:	0800cff8 	.word	0x0800cff8
 8002694:	0800cffc 	.word	0x0800cffc
 8002698:	0800d000 	.word	0x0800d000
 800269c:	40668000 	.word	0x40668000
  	   /* pattern 1 */
  		if(s1_theta_low[i] > s1_theta_high[i]) {    // 参照するエリアの上下限が(low,high)= (355,15)となっている場合
 80026a0:	4a38      	ldr	r2, [pc, #224]	; (8002784 <operation+0x9bc>)
 80026a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4413      	add	r3, r2
 80026aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026ae:	4a36      	ldr	r2, [pc, #216]	; (8002788 <operation+0x9c0>)
 80026b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4413      	add	r3, r2
 80026b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026bc:	f7fe fa3c 	bl	8000b38 <__aeabi_dcmpgt>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d020      	beq.n	8002708 <operation+0x940>
  	      if(s1_theta_op >= s1_theta_low[i] || s1_theta_op <= s1_theta_high[i] ){    // 例えば356なら正,14なら正、354なら負、16なら負
 80026c6:	4a2f      	ldr	r2, [pc, #188]	; (8002784 <operation+0x9bc>)
 80026c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	4413      	add	r3, r2
 80026d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d4:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80026d8:	f7fe fa24 	bl	8000b24 <__aeabi_dcmpge>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10d      	bne.n	80026fe <operation+0x936>
 80026e2:	4a29      	ldr	r2, [pc, #164]	; (8002788 <operation+0x9c0>)
 80026e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	4413      	add	r3, r2
 80026ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80026f4:	f7fe fa0c 	bl	8000b10 <__aeabi_dcmple>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d025      	beq.n	800274a <operation+0x982>
  	    	  j = i;
 80026fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002702:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  	    	  break;
 8002706:	e029      	b.n	800275c <operation+0x994>
  	      }
  		}
  		/* pattern 2 */
  		else {   // 例えば(low,high)=(5,25)などの場合
  			if(s1_theta_op <= s1_theta_high[i] && s1_theta_op >= s1_theta_low[i] ) {
 8002708:	4a1f      	ldr	r2, [pc, #124]	; (8002788 <operation+0x9c0>)
 800270a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4413      	add	r3, r2
 8002712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002716:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800271a:	f7fe f9f9 	bl	8000b10 <__aeabi_dcmple>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d012      	beq.n	800274a <operation+0x982>
 8002724:	4a17      	ldr	r2, [pc, #92]	; (8002784 <operation+0x9bc>)
 8002726:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4413      	add	r3, r2
 800272e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002732:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002736:	f7fe f9f5 	bl	8000b24 <__aeabi_dcmpge>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d004      	beq.n	800274a <operation+0x982>
  				j = i;
 8002740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002744:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  				break;
 8002748:	e008      	b.n	800275c <operation+0x994>
  	for (i=0;i<16;i++){
 800274a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800274e:	3301      	adds	r3, #1
 8002750:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002758:	2b0f      	cmp	r3, #15
 800275a:	dda1      	ble.n	80026a0 <operation+0x8d8>
  			}
  		}
  	}

  	/* STEP11 : S00からS15まで、3文字表現でprintf出力する */
  	if (j < 10) {
 800275c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002760:	2b09      	cmp	r3, #9
 8002762:	dc05      	bgt.n	8002770 <operation+0x9a8>
  		printf("S0%d\n", j);
 8002764:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8002768:	4808      	ldr	r0, [pc, #32]	; (800278c <operation+0x9c4>)
 800276a:	f006 f81f 	bl	80087ac <iprintf>
  	} else {
  		printf("S%d\n", j);
  	}

  	return;
 800276e:	e004      	b.n	800277a <operation+0x9b2>
  		printf("S%d\n", j);
 8002770:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8002774:	4806      	ldr	r0, [pc, #24]	; (8002790 <operation+0x9c8>)
 8002776:	f006 f819 	bl	80087ac <iprintf>
  	return;
 800277a:	bf00      	nop
}
 800277c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8002780:	46bd      	mov	sp, r7
 8002782:	bdb0      	pop	{r4, r5, r7, pc}
 8002784:	200009d0 	.word	0x200009d0
 8002788:	20000ad0 	.word	0x20000ad0
 800278c:	0800d004 	.word	0x0800d004
 8002790:	0800d00c 	.word	0x0800d00c

08002794 <com_debug>:




void com_debug() {
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
    for (uint8_t address = 1; address < 128; address++) {
 800279a:	2301      	movs	r3, #1
 800279c:	71fb      	strb	r3, [r7, #7]
 800279e:	e014      	b.n	80027ca <com_debug+0x36>
        // HAL_I2C_IsDeviceReady関数を使用してデバイスが応答するかどうかを確認
        if (HAL_I2C_IsDeviceReady(&hi2c1, address << 1, 1, 1000) == HAL_OK) {
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	b299      	uxth	r1, r3
 80027a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ac:	2201      	movs	r2, #1
 80027ae:	480b      	ldr	r0, [pc, #44]	; (80027dc <com_debug+0x48>)
 80027b0:	f002 f814 	bl	80047dc <HAL_I2C_IsDeviceReady>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d104      	bne.n	80027c4 <com_debug+0x30>
            printf("Device found at address: 0x%02X\n", address);
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	4619      	mov	r1, r3
 80027be:	4808      	ldr	r0, [pc, #32]	; (80027e0 <com_debug+0x4c>)
 80027c0:	f005 fff4 	bl	80087ac <iprintf>
    for (uint8_t address = 1; address < 128; address++) {
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	3301      	adds	r3, #1
 80027c8:	71fb      	strb	r3, [r7, #7]
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	dae6      	bge.n	80027a0 <com_debug+0xc>
        }
    }
}
 80027d2:	bf00      	nop
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	2000022c 	.word	0x2000022c
 80027e0:	0800d014 	.word	0x0800d014

080027e4 <sense_adjust>:


void sense_adjust() {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b0cc      	sub	sp, #304	; 0x130
 80027e8:	af00      	add	r7, sp, #0
	char temp1[100];
	char temp2[100];
	char temp3[100];

	printf("\n\nCurrent setting\n");
 80027ea:	483b      	ldr	r0, [pc, #236]	; (80028d8 <sense_adjust+0xf4>)
 80027ec:	f006 f84c 	bl	8008888 <puts>
	printf("Sensitivity of center push = %f\n", center_push_threshold);
 80027f0:	4b3a      	ldr	r3, [pc, #232]	; (80028dc <sense_adjust+0xf8>)
 80027f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f6:	483a      	ldr	r0, [pc, #232]	; (80028e0 <sense_adjust+0xfc>)
 80027f8:	f005 ffd8 	bl	80087ac <iprintf>
	printf("Sensitivity of left tilt = %f\n", left_tilt_threshold);
 80027fc:	4b39      	ldr	r3, [pc, #228]	; (80028e4 <sense_adjust+0x100>)
 80027fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002802:	4839      	ldr	r0, [pc, #228]	; (80028e8 <sense_adjust+0x104>)
 8002804:	f005 ffd2 	bl	80087ac <iprintf>
	printf("Sensitivity of right tilt = %f\n", right_tilt_threshold);
 8002808:	4b38      	ldr	r3, [pc, #224]	; (80028ec <sense_adjust+0x108>)
 800280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280e:	4838      	ldr	r0, [pc, #224]	; (80028f0 <sense_adjust+0x10c>)
 8002810:	f005 ffcc 	bl	80087ac <iprintf>

	printf("\nnew sensitivity of center push ? = ");
 8002814:	4837      	ldr	r0, [pc, #220]	; (80028f4 <sense_adjust+0x110>)
 8002816:	f005 ffc9 	bl	80087ac <iprintf>
	scanf("%s", temp1);
 800281a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800281e:	4619      	mov	r1, r3
 8002820:	4835      	ldr	r0, [pc, #212]	; (80028f8 <sense_adjust+0x114>)
 8002822:	f006 f839 	bl	8008898 <iscanf>
	printf("%s\n", temp1);
 8002826:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800282a:	4618      	mov	r0, r3
 800282c:	f006 f82c 	bl	8008888 <puts>
	printf("new sensitivity of left tilt ? = ");
 8002830:	4832      	ldr	r0, [pc, #200]	; (80028fc <sense_adjust+0x118>)
 8002832:	f005 ffbb 	bl	80087ac <iprintf>
	scanf("%s", temp2);
 8002836:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800283a:	4619      	mov	r1, r3
 800283c:	482e      	ldr	r0, [pc, #184]	; (80028f8 <sense_adjust+0x114>)
 800283e:	f006 f82b 	bl	8008898 <iscanf>
	printf("%s\n", temp2);
 8002842:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002846:	4618      	mov	r0, r3
 8002848:	f006 f81e 	bl	8008888 <puts>
	printf("new sensitivity of right tilt ? = ");
 800284c:	482c      	ldr	r0, [pc, #176]	; (8002900 <sense_adjust+0x11c>)
 800284e:	f005 ffad 	bl	80087ac <iprintf>
	scanf("%s", temp3);
 8002852:	1d3b      	adds	r3, r7, #4
 8002854:	4619      	mov	r1, r3
 8002856:	4828      	ldr	r0, [pc, #160]	; (80028f8 <sense_adjust+0x114>)
 8002858:	f006 f81e 	bl	8008898 <iscanf>
	printf("%s\n", temp3);
 800285c:	1d3b      	adds	r3, r7, #4
 800285e:	4618      	mov	r0, r3
 8002860:	f006 f812 	bl	8008888 <puts>

	center_push_threshold = atof(temp1);
 8002864:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002868:	4618      	mov	r0, r3
 800286a:	f004 fb98 	bl	8006f9e <atof>
 800286e:	eeb0 7a40 	vmov.f32	s14, s0
 8002872:	eef0 7a60 	vmov.f32	s15, s1
 8002876:	4b19      	ldr	r3, [pc, #100]	; (80028dc <sense_adjust+0xf8>)
 8002878:	ed83 7b00 	vstr	d7, [r3]
	left_tilt_threshold = atof(temp2);
 800287c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002880:	4618      	mov	r0, r3
 8002882:	f004 fb8c 	bl	8006f9e <atof>
 8002886:	eeb0 7a40 	vmov.f32	s14, s0
 800288a:	eef0 7a60 	vmov.f32	s15, s1
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <sense_adjust+0x100>)
 8002890:	ed83 7b00 	vstr	d7, [r3]
	right_tilt_threshold = atof(temp3);
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	4618      	mov	r0, r3
 8002898:	f004 fb81 	bl	8006f9e <atof>
 800289c:	eeb0 7a40 	vmov.f32	s14, s0
 80028a0:	eef0 7a60 	vmov.f32	s15, s1
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <sense_adjust+0x108>)
 80028a6:	ed83 7b00 	vstr	d7, [r3]
	printf("\nsensitivity_center: %f\n", center_push_threshold);
 80028aa:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <sense_adjust+0xf8>)
 80028ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b0:	4814      	ldr	r0, [pc, #80]	; (8002904 <sense_adjust+0x120>)
 80028b2:	f005 ff7b 	bl	80087ac <iprintf>
	printf("sensitivity_left: %f\n", left_tilt_threshold);
 80028b6:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <sense_adjust+0x100>)
 80028b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028bc:	4812      	ldr	r0, [pc, #72]	; (8002908 <sense_adjust+0x124>)
 80028be:	f005 ff75 	bl	80087ac <iprintf>
	printf("sensitivity_right: %f\n", right_tilt_threshold);
 80028c2:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <sense_adjust+0x108>)
 80028c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c8:	4810      	ldr	r0, [pc, #64]	; (800290c <sense_adjust+0x128>)
 80028ca:	f005 ff6f 	bl	80087ac <iprintf>
}
 80028ce:	bf00      	nop
 80028d0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	0800d038 	.word	0x0800d038
 80028dc:	20000010 	.word	0x20000010
 80028e0:	0800d04c 	.word	0x0800d04c
 80028e4:	20000018 	.word	0x20000018
 80028e8:	0800d070 	.word	0x0800d070
 80028ec:	20000020 	.word	0x20000020
 80028f0:	0800d090 	.word	0x0800d090
 80028f4:	0800d0b0 	.word	0x0800d0b0
 80028f8:	0800d0d8 	.word	0x0800d0d8
 80028fc:	0800d0dc 	.word	0x0800d0dc
 8002900:	0800d100 	.word	0x0800d100
 8002904:	0800d124 	.word	0x0800d124
 8002908:	0800d140 	.word	0x0800d140
 800290c:	0800d158 	.word	0x0800d158

08002910 <eeprom_read>:

void eeprom_read() {
 8002910:	b590      	push	{r4, r7, lr}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
	 * */

	uint16_t i;
	uint16_t j;

	for(i=0; i<368; i++) {
 8002916:	2300      	movs	r3, #0
 8002918:	80fb      	strh	r3, [r7, #6]
 800291a:	e013      	b.n	8002944 <eeprom_read+0x34>
		j = i * sizeof(double);
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	80bb      	strh	r3, [r7, #4]
		eeprom[i]=read_double_from_eeprom(j);
 8002922:	88fc      	ldrh	r4, [r7, #6]
 8002924:	88bb      	ldrh	r3, [r7, #4]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fb6a 	bl	8001000 <read_double_from_eeprom>
 800292c:	eeb0 7a40 	vmov.f32	s14, s0
 8002930:	eef0 7a60 	vmov.f32	s15, s1
 8002934:	4a08      	ldr	r2, [pc, #32]	; (8002958 <eeprom_read+0x48>)
 8002936:	00e3      	lsls	r3, r4, #3
 8002938:	4413      	add	r3, r2
 800293a:	ed83 7b00 	vstr	d7, [r3]
	for(i=0; i<368; i++) {
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	3301      	adds	r3, #1
 8002942:	80fb      	strh	r3, [r7, #6]
 8002944:	88fb      	ldrh	r3, [r7, #6]
 8002946:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 800294a:	d3e7      	bcc.n	800291c <eeprom_read+0xc>
	}
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	bd90      	pop	{r4, r7, pc}
 8002956:	bf00      	nop
 8002958:	20000bd0 	.word	0x20000bd0

0800295c <eeprom_write>:


void eeprom_write() {
 800295c:	b5b0      	push	{r4, r5, r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0

    uint16_t i,j,k,l,m,n,p;

    write_double_to_eeprom(tolerance, 0*sizeof(double));
 8002962:	4b98      	ldr	r3, [pc, #608]	; (8002bc4 <eeprom_write+0x268>)
 8002964:	ed93 7b00 	vldr	d7, [r3]
 8002968:	2000      	movs	r0, #0
 800296a:	eeb0 0a47 	vmov.f32	s0, s14
 800296e:	eef0 0a67 	vmov.f32	s1, s15
 8002972:	f7fe fb15 	bl	8000fa0 <write_double_to_eeprom>
    write_double_to_eeprom(center_push_threshold, 1*sizeof(double));
 8002976:	4b94      	ldr	r3, [pc, #592]	; (8002bc8 <eeprom_write+0x26c>)
 8002978:	ed93 7b00 	vldr	d7, [r3]
 800297c:	2008      	movs	r0, #8
 800297e:	eeb0 0a47 	vmov.f32	s0, s14
 8002982:	eef0 0a67 	vmov.f32	s1, s15
 8002986:	f7fe fb0b 	bl	8000fa0 <write_double_to_eeprom>
    write_double_to_eeprom(left_tilt_threshold, 2*sizeof(double));
 800298a:	4b90      	ldr	r3, [pc, #576]	; (8002bcc <eeprom_write+0x270>)
 800298c:	ed93 7b00 	vldr	d7, [r3]
 8002990:	2010      	movs	r0, #16
 8002992:	eeb0 0a47 	vmov.f32	s0, s14
 8002996:	eef0 0a67 	vmov.f32	s1, s15
 800299a:	f7fe fb01 	bl	8000fa0 <write_double_to_eeprom>
    write_double_to_eeprom(right_tilt_threshold, 3*sizeof(double));
 800299e:	4b8c      	ldr	r3, [pc, #560]	; (8002bd0 <eeprom_write+0x274>)
 80029a0:	ed93 7b00 	vldr	d7, [r3]
 80029a4:	2018      	movs	r0, #24
 80029a6:	eeb0 0a47 	vmov.f32	s0, s14
 80029aa:	eef0 0a67 	vmov.f32	s1, s15
 80029ae:	f7fe faf7 	bl	8000fa0 <write_double_to_eeprom>

    for (i=0; i<16; i++) {
 80029b2:	2300      	movs	r3, #0
 80029b4:	81fb      	strh	r3, [r7, #14]
 80029b6:	e07a      	b.n	8002aae <eeprom_write+0x152>

        // x[4:19] = s1_raw_bx[0:15]
    	j=(4+i)*sizeof(double);
 80029b8:	89fb      	ldrh	r3, [r7, #14]
 80029ba:	3304      	adds	r3, #4
 80029bc:	b29b      	uxth	r3, r3
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	81bb      	strh	r3, [r7, #12]
    	write_double_to_eeprom(s1_raw_bx[i], j);   // 32,33,34,35,36,37,38,39 --> 40,41,42,43,44,45,46,47 -->
 80029c2:	89fb      	ldrh	r3, [r7, #14]
 80029c4:	4a83      	ldr	r2, [pc, #524]	; (8002bd4 <eeprom_write+0x278>)
 80029c6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fd fdba 	bl	8000544 <__aeabi_i2d>
 80029d0:	4604      	mov	r4, r0
 80029d2:	460d      	mov	r5, r1
 80029d4:	89bb      	ldrh	r3, [r7, #12]
 80029d6:	4618      	mov	r0, r3
 80029d8:	ec45 4b10 	vmov	d0, r4, r5
 80029dc:	f7fe fae0 	bl	8000fa0 <write_double_to_eeprom>

    	// x[20:35] = s1_raw_by[0:15]
    	k=(20+i)*sizeof(double);
 80029e0:	89fb      	ldrh	r3, [r7, #14]
 80029e2:	3314      	adds	r3, #20
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	817b      	strh	r3, [r7, #10]
    	write_double_to_eeprom(s1_raw_by[i], k);   // 160,
 80029ea:	89fb      	ldrh	r3, [r7, #14]
 80029ec:	4a7a      	ldr	r2, [pc, #488]	; (8002bd8 <eeprom_write+0x27c>)
 80029ee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fd fda6 	bl	8000544 <__aeabi_i2d>
 80029f8:	4604      	mov	r4, r0
 80029fa:	460d      	mov	r5, r1
 80029fc:	897b      	ldrh	r3, [r7, #10]
 80029fe:	4618      	mov	r0, r3
 8002a00:	ec45 4b10 	vmov	d0, r4, r5
 8002a04:	f7fe facc 	bl	8000fa0 <write_double_to_eeprom>

    	// x[36:51] = s1_raw_bz[0:15]
    	l=(36+i)*sizeof(double);
 8002a08:	89fb      	ldrh	r3, [r7, #14]
 8002a0a:	3324      	adds	r3, #36	; 0x24
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	813b      	strh	r3, [r7, #8]
    	write_double_to_eeprom(s1_raw_bz[i], l);
 8002a12:	89fb      	ldrh	r3, [r7, #14]
 8002a14:	4a71      	ldr	r2, [pc, #452]	; (8002bdc <eeprom_write+0x280>)
 8002a16:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fd92 	bl	8000544 <__aeabi_i2d>
 8002a20:	4604      	mov	r4, r0
 8002a22:	460d      	mov	r5, r1
 8002a24:	893b      	ldrh	r3, [r7, #8]
 8002a26:	4618      	mov	r0, r3
 8002a28:	ec45 4b10 	vmov	d0, r4, r5
 8002a2c:	f7fe fab8 	bl	8000fa0 <write_double_to_eeprom>

        // x[52:67] = s2_raw_bx[0:15]
    	m=(52+i)*sizeof(double);
 8002a30:	89fb      	ldrh	r3, [r7, #14]
 8002a32:	3334      	adds	r3, #52	; 0x34
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	80fb      	strh	r3, [r7, #6]
    	write_double_to_eeprom(s2_raw_bx[i], m);
 8002a3a:	89fb      	ldrh	r3, [r7, #14]
 8002a3c:	4a68      	ldr	r2, [pc, #416]	; (8002be0 <eeprom_write+0x284>)
 8002a3e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fd fd7e 	bl	8000544 <__aeabi_i2d>
 8002a48:	4604      	mov	r4, r0
 8002a4a:	460d      	mov	r5, r1
 8002a4c:	88fb      	ldrh	r3, [r7, #6]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	ec45 4b10 	vmov	d0, r4, r5
 8002a54:	f7fe faa4 	bl	8000fa0 <write_double_to_eeprom>

    	// x[68:83] = s2_raw_by[0:15]
    	n=(68+i)*sizeof(double);
 8002a58:	89fb      	ldrh	r3, [r7, #14]
 8002a5a:	3344      	adds	r3, #68	; 0x44
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	80bb      	strh	r3, [r7, #4]
    	write_double_to_eeprom(s2_raw_by[i], n);
 8002a62:	89fb      	ldrh	r3, [r7, #14]
 8002a64:	4a5f      	ldr	r2, [pc, #380]	; (8002be4 <eeprom_write+0x288>)
 8002a66:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fd fd6a 	bl	8000544 <__aeabi_i2d>
 8002a70:	4604      	mov	r4, r0
 8002a72:	460d      	mov	r5, r1
 8002a74:	88bb      	ldrh	r3, [r7, #4]
 8002a76:	4618      	mov	r0, r3
 8002a78:	ec45 4b10 	vmov	d0, r4, r5
 8002a7c:	f7fe fa90 	bl	8000fa0 <write_double_to_eeprom>

    	// x[84:99] = s2_raw_bz[0:15]
    	p=(84+i)*sizeof(double);
 8002a80:	89fb      	ldrh	r3, [r7, #14]
 8002a82:	3354      	adds	r3, #84	; 0x54
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	807b      	strh	r3, [r7, #2]
    	write_double_to_eeprom(s2_raw_bz[i], p);
 8002a8a:	89fb      	ldrh	r3, [r7, #14]
 8002a8c:	4a56      	ldr	r2, [pc, #344]	; (8002be8 <eeprom_write+0x28c>)
 8002a8e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fd fd56 	bl	8000544 <__aeabi_i2d>
 8002a98:	4604      	mov	r4, r0
 8002a9a:	460d      	mov	r5, r1
 8002a9c:	887b      	ldrh	r3, [r7, #2]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	ec45 4b10 	vmov	d0, r4, r5
 8002aa4:	f7fe fa7c 	bl	8000fa0 <write_double_to_eeprom>
    for (i=0; i<16; i++) {
 8002aa8:	89fb      	ldrh	r3, [r7, #14]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	81fb      	strh	r3, [r7, #14]
 8002aae:	89fb      	ldrh	r3, [r7, #14]
 8002ab0:	2b0f      	cmp	r3, #15
 8002ab2:	d981      	bls.n	80029b8 <eeprom_write+0x5c>

    }

    write_double_to_eeprom(s1_raw_bx_p2p, 100*sizeof(double));
 8002ab4:	4b4d      	ldr	r3, [pc, #308]	; (8002bec <eeprom_write+0x290>)
 8002ab6:	ed93 7b00 	vldr	d7, [r3]
 8002aba:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002abe:	eeb0 0a47 	vmov.f32	s0, s14
 8002ac2:	eef0 0a67 	vmov.f32	s1, s15
 8002ac6:	f7fe fa6b 	bl	8000fa0 <write_double_to_eeprom>
    write_double_to_eeprom(s1_raw_by_p2p, 101*sizeof(double));
 8002aca:	4b49      	ldr	r3, [pc, #292]	; (8002bf0 <eeprom_write+0x294>)
 8002acc:	ed93 7b00 	vldr	d7, [r3]
 8002ad0:	f44f 704a 	mov.w	r0, #808	; 0x328
 8002ad4:	eeb0 0a47 	vmov.f32	s0, s14
 8002ad8:	eef0 0a67 	vmov.f32	s1, s15
 8002adc:	f7fe fa60 	bl	8000fa0 <write_double_to_eeprom>
    write_double_to_eeprom(s1_raw_bz_p2p, 102*sizeof(double));
 8002ae0:	4b44      	ldr	r3, [pc, #272]	; (8002bf4 <eeprom_write+0x298>)
 8002ae2:	ed93 7b00 	vldr	d7, [r3]
 8002ae6:	f44f 704c 	mov.w	r0, #816	; 0x330
 8002aea:	eeb0 0a47 	vmov.f32	s0, s14
 8002aee:	eef0 0a67 	vmov.f32	s1, s15
 8002af2:	f7fe fa55 	bl	8000fa0 <write_double_to_eeprom>
    write_double_to_eeprom(s1_raw_bx_offset, 103*sizeof(double));
 8002af6:	4b40      	ldr	r3, [pc, #256]	; (8002bf8 <eeprom_write+0x29c>)
 8002af8:	ed93 7b00 	vldr	d7, [r3]
 8002afc:	f44f 704e 	mov.w	r0, #824	; 0x338
 8002b00:	eeb0 0a47 	vmov.f32	s0, s14
 8002b04:	eef0 0a67 	vmov.f32	s1, s15
 8002b08:	f7fe fa4a 	bl	8000fa0 <write_double_to_eeprom>
    write_double_to_eeprom(s1_raw_by_offset, 104*sizeof(double));
 8002b0c:	4b3b      	ldr	r3, [pc, #236]	; (8002bfc <eeprom_write+0x2a0>)
 8002b0e:	ed93 7b00 	vldr	d7, [r3]
 8002b12:	f44f 7050 	mov.w	r0, #832	; 0x340
 8002b16:	eeb0 0a47 	vmov.f32	s0, s14
 8002b1a:	eef0 0a67 	vmov.f32	s1, s15
 8002b1e:	f7fe fa3f 	bl	8000fa0 <write_double_to_eeprom>
    write_double_to_eeprom(s1_raw_bz_offset, 105*sizeof(double));
 8002b22:	4b37      	ldr	r3, [pc, #220]	; (8002c00 <eeprom_write+0x2a4>)
 8002b24:	ed93 7b00 	vldr	d7, [r3]
 8002b28:	f44f 7052 	mov.w	r0, #840	; 0x348
 8002b2c:	eeb0 0a47 	vmov.f32	s0, s14
 8002b30:	eef0 0a67 	vmov.f32	s1, s15
 8002b34:	f7fe fa34 	bl	8000fa0 <write_double_to_eeprom>
    write_double_to_eeprom(s2_raw_bx_p2p, 106*sizeof(double));
 8002b38:	4b32      	ldr	r3, [pc, #200]	; (8002c04 <eeprom_write+0x2a8>)
 8002b3a:	ed93 7b00 	vldr	d7, [r3]
 8002b3e:	f44f 7054 	mov.w	r0, #848	; 0x350
 8002b42:	eeb0 0a47 	vmov.f32	s0, s14
 8002b46:	eef0 0a67 	vmov.f32	s1, s15
 8002b4a:	f7fe fa29 	bl	8000fa0 <write_double_to_eeprom>
    write_double_to_eeprom(s2_raw_by_p2p, 107*sizeof(double));
 8002b4e:	4b2e      	ldr	r3, [pc, #184]	; (8002c08 <eeprom_write+0x2ac>)
 8002b50:	ed93 7b00 	vldr	d7, [r3]
 8002b54:	f44f 7056 	mov.w	r0, #856	; 0x358
 8002b58:	eeb0 0a47 	vmov.f32	s0, s14
 8002b5c:	eef0 0a67 	vmov.f32	s1, s15
 8002b60:	f7fe fa1e 	bl	8000fa0 <write_double_to_eeprom>
    write_double_to_eeprom(s2_raw_bz_p2p, 108*sizeof(double));
 8002b64:	4b29      	ldr	r3, [pc, #164]	; (8002c0c <eeprom_write+0x2b0>)
 8002b66:	ed93 7b00 	vldr	d7, [r3]
 8002b6a:	f44f 7058 	mov.w	r0, #864	; 0x360
 8002b6e:	eeb0 0a47 	vmov.f32	s0, s14
 8002b72:	eef0 0a67 	vmov.f32	s1, s15
 8002b76:	f7fe fa13 	bl	8000fa0 <write_double_to_eeprom>
    write_double_to_eeprom(s2_raw_bx_offset, 109*sizeof(double));
 8002b7a:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <eeprom_write+0x2b4>)
 8002b7c:	ed93 7b00 	vldr	d7, [r3]
 8002b80:	f44f 705a 	mov.w	r0, #872	; 0x368
 8002b84:	eeb0 0a47 	vmov.f32	s0, s14
 8002b88:	eef0 0a67 	vmov.f32	s1, s15
 8002b8c:	f7fe fa08 	bl	8000fa0 <write_double_to_eeprom>
    write_double_to_eeprom(s2_raw_by_offset, 110*sizeof(double));
 8002b90:	4b20      	ldr	r3, [pc, #128]	; (8002c14 <eeprom_write+0x2b8>)
 8002b92:	ed93 7b00 	vldr	d7, [r3]
 8002b96:	f44f 705c 	mov.w	r0, #880	; 0x370
 8002b9a:	eeb0 0a47 	vmov.f32	s0, s14
 8002b9e:	eef0 0a67 	vmov.f32	s1, s15
 8002ba2:	f7fe f9fd 	bl	8000fa0 <write_double_to_eeprom>
    write_double_to_eeprom(s2_raw_bz_offset, 111*sizeof(double));
 8002ba6:	4b1c      	ldr	r3, [pc, #112]	; (8002c18 <eeprom_write+0x2bc>)
 8002ba8:	ed93 7b00 	vldr	d7, [r3]
 8002bac:	f44f 705e 	mov.w	r0, #888	; 0x378
 8002bb0:	eeb0 0a47 	vmov.f32	s0, s14
 8002bb4:	eef0 0a67 	vmov.f32	s1, s15
 8002bb8:	f7fe f9f2 	bl	8000fa0 <write_double_to_eeprom>

    for (i=0; i<16; i++) {
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	81fb      	strh	r3, [r7, #14]
 8002bc0:	e0a1      	b.n	8002d06 <eeprom_write+0x3aa>
 8002bc2:	bf00      	nop
 8002bc4:	20000008 	.word	0x20000008
 8002bc8:	20000010 	.word	0x20000010
 8002bcc:	20000018 	.word	0x20000018
 8002bd0:	20000020 	.word	0x20000020
 8002bd4:	20000390 	.word	0x20000390
 8002bd8:	200003b0 	.word	0x200003b0
 8002bdc:	200003d0 	.word	0x200003d0
 8002be0:	200003f0 	.word	0x200003f0
 8002be4:	20000410 	.word	0x20000410
 8002be8:	20000430 	.word	0x20000430
 8002bec:	20000450 	.word	0x20000450
 8002bf0:	20000458 	.word	0x20000458
 8002bf4:	20000460 	.word	0x20000460
 8002bf8:	20000480 	.word	0x20000480
 8002bfc:	20000488 	.word	0x20000488
 8002c00:	20000490 	.word	0x20000490
 8002c04:	20000468 	.word	0x20000468
 8002c08:	20000470 	.word	0x20000470
 8002c0c:	20000478 	.word	0x20000478
 8002c10:	20000498 	.word	0x20000498
 8002c14:	200004a0 	.word	0x200004a0
 8002c18:	200004a8 	.word	0x200004a8

        // x[112:127] = s1_std_bx[0:15]
    	j=(112+i)*sizeof(double);
 8002c1c:	89fb      	ldrh	r3, [r7, #14]
 8002c1e:	3370      	adds	r3, #112	; 0x70
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	81bb      	strh	r3, [r7, #12]
    	write_double_to_eeprom(s1_std_bx[i], j);
 8002c26:	89fb      	ldrh	r3, [r7, #14]
 8002c28:	4aa6      	ldr	r2, [pc, #664]	; (8002ec4 <eeprom_write+0x568>)
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	ed93 7b00 	vldr	d7, [r3]
 8002c32:	89bb      	ldrh	r3, [r7, #12]
 8002c34:	4618      	mov	r0, r3
 8002c36:	eeb0 0a47 	vmov.f32	s0, s14
 8002c3a:	eef0 0a67 	vmov.f32	s1, s15
 8002c3e:	f7fe f9af 	bl	8000fa0 <write_double_to_eeprom>

    	// x[128:143] = s1_std_by[0:15]
    	k=(128+i)*sizeof(double);
 8002c42:	89fb      	ldrh	r3, [r7, #14]
 8002c44:	3380      	adds	r3, #128	; 0x80
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	817b      	strh	r3, [r7, #10]
    	write_double_to_eeprom(s1_std_by[i], k);
 8002c4c:	89fb      	ldrh	r3, [r7, #14]
 8002c4e:	4a9e      	ldr	r2, [pc, #632]	; (8002ec8 <eeprom_write+0x56c>)
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4413      	add	r3, r2
 8002c54:	ed93 7b00 	vldr	d7, [r3]
 8002c58:	897b      	ldrh	r3, [r7, #10]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	eeb0 0a47 	vmov.f32	s0, s14
 8002c60:	eef0 0a67 	vmov.f32	s1, s15
 8002c64:	f7fe f99c 	bl	8000fa0 <write_double_to_eeprom>

    	// x[144:159] = s1_std_bz[0:15]
    	l=(144+i)*sizeof(double);
 8002c68:	89fb      	ldrh	r3, [r7, #14]
 8002c6a:	3390      	adds	r3, #144	; 0x90
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	813b      	strh	r3, [r7, #8]
    	write_double_to_eeprom(s1_std_bz[i], l);
 8002c72:	89fb      	ldrh	r3, [r7, #14]
 8002c74:	4a95      	ldr	r2, [pc, #596]	; (8002ecc <eeprom_write+0x570>)
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4413      	add	r3, r2
 8002c7a:	ed93 7b00 	vldr	d7, [r3]
 8002c7e:	893b      	ldrh	r3, [r7, #8]
 8002c80:	4618      	mov	r0, r3
 8002c82:	eeb0 0a47 	vmov.f32	s0, s14
 8002c86:	eef0 0a67 	vmov.f32	s1, s15
 8002c8a:	f7fe f989 	bl	8000fa0 <write_double_to_eeprom>

        // x[160:175] = s2_std_bx[0:15]
    	m=(160+i)*sizeof(double);
 8002c8e:	89fb      	ldrh	r3, [r7, #14]
 8002c90:	33a0      	adds	r3, #160	; 0xa0
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	80fb      	strh	r3, [r7, #6]
    	write_double_to_eeprom(s2_std_bx[i], m);
 8002c98:	89fb      	ldrh	r3, [r7, #14]
 8002c9a:	4a8d      	ldr	r2, [pc, #564]	; (8002ed0 <eeprom_write+0x574>)
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	ed93 7b00 	vldr	d7, [r3]
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	eeb0 0a47 	vmov.f32	s0, s14
 8002cac:	eef0 0a67 	vmov.f32	s1, s15
 8002cb0:	f7fe f976 	bl	8000fa0 <write_double_to_eeprom>

    	// x[176:191] = s2_std_by[0:15]
    	n=(176+i)*sizeof(double);
 8002cb4:	89fb      	ldrh	r3, [r7, #14]
 8002cb6:	33b0      	adds	r3, #176	; 0xb0
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	80bb      	strh	r3, [r7, #4]
    	write_double_to_eeprom(s2_std_by[i], n);
 8002cbe:	89fb      	ldrh	r3, [r7, #14]
 8002cc0:	4a84      	ldr	r2, [pc, #528]	; (8002ed4 <eeprom_write+0x578>)
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	ed93 7b00 	vldr	d7, [r3]
 8002cca:	88bb      	ldrh	r3, [r7, #4]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	eeb0 0a47 	vmov.f32	s0, s14
 8002cd2:	eef0 0a67 	vmov.f32	s1, s15
 8002cd6:	f7fe f963 	bl	8000fa0 <write_double_to_eeprom>

    	// x[192:207] = s2_std_bz[0:15]
    	p=(192+i)*sizeof(double);
 8002cda:	89fb      	ldrh	r3, [r7, #14]
 8002cdc:	33c0      	adds	r3, #192	; 0xc0
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	807b      	strh	r3, [r7, #2]
    	write_double_to_eeprom(s2_std_bz[i], p);
 8002ce4:	89fb      	ldrh	r3, [r7, #14]
 8002ce6:	4a7c      	ldr	r2, [pc, #496]	; (8002ed8 <eeprom_write+0x57c>)
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4413      	add	r3, r2
 8002cec:	ed93 7b00 	vldr	d7, [r3]
 8002cf0:	887b      	ldrh	r3, [r7, #2]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	eeb0 0a47 	vmov.f32	s0, s14
 8002cf8:	eef0 0a67 	vmov.f32	s1, s15
 8002cfc:	f7fe f950 	bl	8000fa0 <write_double_to_eeprom>
    for (i=0; i<16; i++) {
 8002d00:	89fb      	ldrh	r3, [r7, #14]
 8002d02:	3301      	adds	r3, #1
 8002d04:	81fb      	strh	r3, [r7, #14]
 8002d06:	89fb      	ldrh	r3, [r7, #14]
 8002d08:	2b0f      	cmp	r3, #15
 8002d0a:	d987      	bls.n	8002c1c <eeprom_write+0x2c0>

    }

    for (i=0; i<16; i++) {
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	81fb      	strh	r3, [r7, #14]
 8002d10:	e04f      	b.n	8002db2 <eeprom_write+0x456>

        // x[208:223] = s1_atan[0:15]
    	j=(208+i)*sizeof(double);
 8002d12:	89fb      	ldrh	r3, [r7, #14]
 8002d14:	33d0      	adds	r3, #208	; 0xd0
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	81bb      	strh	r3, [r7, #12]
    	write_double_to_eeprom(s1_atan[i], j);
 8002d1c:	89fb      	ldrh	r3, [r7, #14]
 8002d1e:	4a6f      	ldr	r2, [pc, #444]	; (8002edc <eeprom_write+0x580>)
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	4413      	add	r3, r2
 8002d24:	ed93 7b00 	vldr	d7, [r3]
 8002d28:	89bb      	ldrh	r3, [r7, #12]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	eeb0 0a47 	vmov.f32	s0, s14
 8002d30:	eef0 0a67 	vmov.f32	s1, s15
 8002d34:	f7fe f934 	bl	8000fa0 <write_double_to_eeprom>

    	// x[224:239] = s2_atan[0:15]
    	k=(224+i)*sizeof(double);
 8002d38:	89fb      	ldrh	r3, [r7, #14]
 8002d3a:	33e0      	adds	r3, #224	; 0xe0
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	817b      	strh	r3, [r7, #10]
    	write_double_to_eeprom(s2_atan[i], k);
 8002d42:	89fb      	ldrh	r3, [r7, #14]
 8002d44:	4a66      	ldr	r2, [pc, #408]	; (8002ee0 <eeprom_write+0x584>)
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	ed93 7b00 	vldr	d7, [r3]
 8002d4e:	897b      	ldrh	r3, [r7, #10]
 8002d50:	4618      	mov	r0, r3
 8002d52:	eeb0 0a47 	vmov.f32	s0, s14
 8002d56:	eef0 0a67 	vmov.f32	s1, s15
 8002d5a:	f7fe f921 	bl	8000fa0 <write_double_to_eeprom>

    	// x[240:255] = s1_std_bx_sign[0:15]
    	l=(240+i)*sizeof(double);
 8002d5e:	89fb      	ldrh	r3, [r7, #14]
 8002d60:	33f0      	adds	r3, #240	; 0xf0
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	813b      	strh	r3, [r7, #8]
    	write_double_to_eeprom(s1_std_bx_sign[i], l);
 8002d68:	89fb      	ldrh	r3, [r7, #14]
 8002d6a:	4a5e      	ldr	r2, [pc, #376]	; (8002ee4 <eeprom_write+0x588>)
 8002d6c:	5cd3      	ldrb	r3, [r2, r3]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd fbd8 	bl	8000524 <__aeabi_ui2d>
 8002d74:	4604      	mov	r4, r0
 8002d76:	460d      	mov	r5, r1
 8002d78:	893b      	ldrh	r3, [r7, #8]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	ec45 4b10 	vmov	d0, r4, r5
 8002d80:	f7fe f90e 	bl	8000fa0 <write_double_to_eeprom>

        // x[256:271] = s2_std_bx_sign[0:15]
    	m=(256+i)*sizeof(double);
 8002d84:	89fb      	ldrh	r3, [r7, #14]
 8002d86:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	80fb      	strh	r3, [r7, #6]
    	write_double_to_eeprom(s2_std_bx_sign[i], m);
 8002d90:	89fb      	ldrh	r3, [r7, #14]
 8002d92:	4a55      	ldr	r2, [pc, #340]	; (8002ee8 <eeprom_write+0x58c>)
 8002d94:	5cd3      	ldrb	r3, [r2, r3]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fd fbc4 	bl	8000524 <__aeabi_ui2d>
 8002d9c:	4604      	mov	r4, r0
 8002d9e:	460d      	mov	r5, r1
 8002da0:	88fb      	ldrh	r3, [r7, #6]
 8002da2:	4618      	mov	r0, r3
 8002da4:	ec45 4b10 	vmov	d0, r4, r5
 8002da8:	f7fe f8fa 	bl	8000fa0 <write_double_to_eeprom>
    for (i=0; i<16; i++) {
 8002dac:	89fb      	ldrh	r3, [r7, #14]
 8002dae:	3301      	adds	r3, #1
 8002db0:	81fb      	strh	r3, [r7, #14]
 8002db2:	89fb      	ldrh	r3, [r7, #14]
 8002db4:	2b0f      	cmp	r3, #15
 8002db6:	d9ac      	bls.n	8002d12 <eeprom_write+0x3b6>

    }


    for (i=0; i<16; i++) {
 8002db8:	2300      	movs	r3, #0
 8002dba:	81fb      	strh	r3, [r7, #14]
 8002dbc:	e07a      	b.n	8002eb4 <eeprom_write+0x558>

        // x[272:287] = s1_theta[0:15]
    	j=(272+i)*sizeof(double);
 8002dbe:	89fb      	ldrh	r3, [r7, #14]
 8002dc0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	81bb      	strh	r3, [r7, #12]
    	write_double_to_eeprom(s1_theta[i], j);
 8002dca:	89fb      	ldrh	r3, [r7, #14]
 8002dcc:	4a47      	ldr	r2, [pc, #284]	; (8002eec <eeprom_write+0x590>)
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	ed93 7b00 	vldr	d7, [r3]
 8002dd6:	89bb      	ldrh	r3, [r7, #12]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	eeb0 0a47 	vmov.f32	s0, s14
 8002dde:	eef0 0a67 	vmov.f32	s1, s15
 8002de2:	f7fe f8dd 	bl	8000fa0 <write_double_to_eeprom>

    	// x[288:303] = s2_theta[0:15]
    	k=(288+i)*sizeof(double);
 8002de6:	89fb      	ldrh	r3, [r7, #14]
 8002de8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	817b      	strh	r3, [r7, #10]
    	write_double_to_eeprom(s2_theta[i], k);
 8002df2:	89fb      	ldrh	r3, [r7, #14]
 8002df4:	4a3e      	ldr	r2, [pc, #248]	; (8002ef0 <eeprom_write+0x594>)
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4413      	add	r3, r2
 8002dfa:	ed93 7b00 	vldr	d7, [r3]
 8002dfe:	897b      	ldrh	r3, [r7, #10]
 8002e00:	4618      	mov	r0, r3
 8002e02:	eeb0 0a47 	vmov.f32	s0, s14
 8002e06:	eef0 0a67 	vmov.f32	s1, s15
 8002e0a:	f7fe f8c9 	bl	8000fa0 <write_double_to_eeprom>

    	// x[304:319] = s1_theta_low[0:15]
    	l=(304+i)*sizeof(double);
 8002e0e:	89fb      	ldrh	r3, [r7, #14]
 8002e10:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	813b      	strh	r3, [r7, #8]
    	write_double_to_eeprom(s1_theta_low[i], l);
 8002e1a:	89fb      	ldrh	r3, [r7, #14]
 8002e1c:	4a35      	ldr	r2, [pc, #212]	; (8002ef4 <eeprom_write+0x598>)
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4413      	add	r3, r2
 8002e22:	ed93 7b00 	vldr	d7, [r3]
 8002e26:	893b      	ldrh	r3, [r7, #8]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	eeb0 0a47 	vmov.f32	s0, s14
 8002e2e:	eef0 0a67 	vmov.f32	s1, s15
 8002e32:	f7fe f8b5 	bl	8000fa0 <write_double_to_eeprom>

        // x[320:335] = s2_theta_low[0:15]
    	m=(320+i)*sizeof(double);
 8002e36:	89fb      	ldrh	r3, [r7, #14]
 8002e38:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	80fb      	strh	r3, [r7, #6]
    	write_double_to_eeprom(s2_theta_low[i], m);
 8002e42:	89fb      	ldrh	r3, [r7, #14]
 8002e44:	4a2c      	ldr	r2, [pc, #176]	; (8002ef8 <eeprom_write+0x59c>)
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4413      	add	r3, r2
 8002e4a:	ed93 7b00 	vldr	d7, [r3]
 8002e4e:	88fb      	ldrh	r3, [r7, #6]
 8002e50:	4618      	mov	r0, r3
 8002e52:	eeb0 0a47 	vmov.f32	s0, s14
 8002e56:	eef0 0a67 	vmov.f32	s1, s15
 8002e5a:	f7fe f8a1 	bl	8000fa0 <write_double_to_eeprom>

    	// x[336:351] = s1_theta_high[0:15]
    	n=(336+i)*sizeof(double);
 8002e5e:	89fb      	ldrh	r3, [r7, #14]
 8002e60:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	80bb      	strh	r3, [r7, #4]
    	write_double_to_eeprom(s1_theta_high[i], n);
 8002e6a:	89fb      	ldrh	r3, [r7, #14]
 8002e6c:	4a23      	ldr	r2, [pc, #140]	; (8002efc <eeprom_write+0x5a0>)
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4413      	add	r3, r2
 8002e72:	ed93 7b00 	vldr	d7, [r3]
 8002e76:	88bb      	ldrh	r3, [r7, #4]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	eeb0 0a47 	vmov.f32	s0, s14
 8002e7e:	eef0 0a67 	vmov.f32	s1, s15
 8002e82:	f7fe f88d 	bl	8000fa0 <write_double_to_eeprom>

    	// x[352:367] = s2_theta_high[0:15]
    	p=(352+i)*sizeof(double);
 8002e86:	89fb      	ldrh	r3, [r7, #14]
 8002e88:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	807b      	strh	r3, [r7, #2]
    	write_double_to_eeprom(s2_theta_high[i], p);
 8002e92:	89fb      	ldrh	r3, [r7, #14]
 8002e94:	4a1a      	ldr	r2, [pc, #104]	; (8002f00 <eeprom_write+0x5a4>)
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4413      	add	r3, r2
 8002e9a:	ed93 7b00 	vldr	d7, [r3]
 8002e9e:	887b      	ldrh	r3, [r7, #2]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	eeb0 0a47 	vmov.f32	s0, s14
 8002ea6:	eef0 0a67 	vmov.f32	s1, s15
 8002eaa:	f7fe f879 	bl	8000fa0 <write_double_to_eeprom>
    for (i=0; i<16; i++) {
 8002eae:	89fb      	ldrh	r3, [r7, #14]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	81fb      	strh	r3, [r7, #14]
 8002eb4:	89fb      	ldrh	r3, [r7, #14]
 8002eb6:	2b0f      	cmp	r3, #15
 8002eb8:	d981      	bls.n	8002dbe <eeprom_write+0x462>

    }

}
 8002eba:	bf00      	nop
 8002ebc:	bf00      	nop
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ec4:	200004b0 	.word	0x200004b0
 8002ec8:	20000530 	.word	0x20000530
 8002ecc:	200005b0 	.word	0x200005b0
 8002ed0:	20000630 	.word	0x20000630
 8002ed4:	200006b0 	.word	0x200006b0
 8002ed8:	20000730 	.word	0x20000730
 8002edc:	200007b0 	.word	0x200007b0
 8002ee0:	20000830 	.word	0x20000830
 8002ee4:	200008b0 	.word	0x200008b0
 8002ee8:	200008c0 	.word	0x200008c0
 8002eec:	200008d0 	.word	0x200008d0
 8002ef0:	20000950 	.word	0x20000950
 8002ef4:	200009d0 	.word	0x200009d0
 8002ef8:	20000a50 	.word	0x20000a50
 8002efc:	20000ad0 	.word	0x20000ad0
 8002f00:	20000b50 	.word	0x20000b50
 8002f04:	00000000 	.word	0x00000000

08002f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b0a2      	sub	sp, #136	; 0x88
 8002f0c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f0e:	f000 fe9a 	bl	8003c46 <HAL_Init>

  /* USER CODE BEGIN Init */
  setvbuf(stdin, NULL, _IONBF, 0);    // scanf/printfに関する。バッファを初期化。
 8002f12:	4b8b      	ldr	r3, [pc, #556]	; (8003140 <main+0x238>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6858      	ldr	r0, [r3, #4]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	f005 fccd 	bl	80088bc <setvbuf>
  char input[100];
  uint8_t cntl_w[1]={0x10};    // Addr0x21のOperation modeの設定　（例　0x10 = ODR 2000Hz 連続測定モード）
 8002f22:	2310      	movs	r3, #16
 8002f24:	713b      	strb	r3, [r7, #4]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f26:	f000 faf3 	bl	8003510 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f2a:	f000 fbf3 	bl	8003714 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002f2e:	f000 fb51 	bl	80035d4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002f32:	f000 fb8f 	bl	8003654 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002f36:	f000 fbbd 	bl	80036b4 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  /* Console(TeraTerm)立ち上げ時に表示 */
  printf("Welcome to the interactive command prompt.\n");
 8002f3a:	4882      	ldr	r0, [pc, #520]	; (8003144 <main+0x23c>)
 8002f3c:	f005 fca4 	bl	8008888 <puts>

  /* Device ID読み出せたら、Addr0x21にData0x10でPower-downモード以外に入って出力モニタできるようになる */
  HAL_I2C_Mem_Write(&hi2c1, dev_address_1<<1, 0x21, 1, cntl_w, 1, 1000);
 8002f40:	4b81      	ldr	r3, [pc, #516]	; (8003148 <main+0x240>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	b299      	uxth	r1, r3
 8002f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f4e:	9302      	str	r3, [sp, #8]
 8002f50:	2301      	movs	r3, #1
 8002f52:	9301      	str	r3, [sp, #4]
 8002f54:	1d3b      	adds	r3, r7, #4
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	2301      	movs	r3, #1
 8002f5a:	2221      	movs	r2, #33	; 0x21
 8002f5c:	487b      	ldr	r0, [pc, #492]	; (800314c <main+0x244>)
 8002f5e:	f001 fa0f 	bl	8004380 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(&hi2c1, dev_address_2<<1, 0x21, 1, cntl_w, 1, 1000);
 8002f62:	4b7b      	ldr	r3, [pc, #492]	; (8003150 <main+0x248>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	b299      	uxth	r1, r3
 8002f6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f70:	9302      	str	r3, [sp, #8]
 8002f72:	2301      	movs	r3, #1
 8002f74:	9301      	str	r3, [sp, #4]
 8002f76:	1d3b      	adds	r3, r7, #4
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	2221      	movs	r2, #33	; 0x21
 8002f7e:	4873      	ldr	r0, [pc, #460]	; (800314c <main+0x244>)
 8002f80:	f001 f9fe 	bl	8004380 <HAL_I2C_Mem_Write>

  /* キャリブデータなどをEEPROMからバッファに読み出す */
  eeprom_read();
 8002f84:	f7ff fcc4 	bl	8002910 <eeprom_read>
//  tolerance = eeprom[0];				// 10　が基本。toleranceは初期値設定されているが、ここでEEPROM格納値に更新される。
//  center_push_threshold = eeprom[1];	//　2.7 が基本。center_push_thresholdは初期値設定されているが、ここでEEPROM格納値に更新される。
//  left_tilt_threshold = eeprom[2];		//　-1.2　が基本。left_tilt_thresholdは初期値設定されているが、ここでEEPROM格納値に更新される。
//  right_tilt_threshold = eeprom[3];		//　1.2　が基本。right_tilt_thresholdは初期値設定されているが、ここでEEPROM格納値に更新される。

  tolerance = 10;				// 10　が基本。toleranceは初期値設定されているが、ここでEEPROM格納値に更新される。
 8002f88:	4972      	ldr	r1, [pc, #456]	; (8003154 <main+0x24c>)
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	4b72      	ldr	r3, [pc, #456]	; (8003158 <main+0x250>)
 8002f90:	e9c1 2300 	strd	r2, r3, [r1]
  center_push_threshold = 2.7;	//　2.7 が基本。center_push_thresholdは初期値設定されているが、ここでEEPROM格納値に更新される。
 8002f94:	4971      	ldr	r1, [pc, #452]	; (800315c <main+0x254>)
 8002f96:	a366      	add	r3, pc, #408	; (adr r3, 8003130 <main+0x228>)
 8002f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9c:	e9c1 2300 	strd	r2, r3, [r1]
  left_tilt_threshold = -1.2;		//　-1.2　が基本。left_tilt_thresholdは初期値設定されているが、ここでEEPROM格納値に更新される。
 8002fa0:	496f      	ldr	r1, [pc, #444]	; (8003160 <main+0x258>)
 8002fa2:	a365      	add	r3, pc, #404	; (adr r3, 8003138 <main+0x230>)
 8002fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa8:	e9c1 2300 	strd	r2, r3, [r1]
  right_tilt_threshold = 1.2;		//　1.2　が基本。right_tilt_thresholdは初期値設定されているが、ここでEEPROM格納値に更新される。
 8002fac:	496d      	ldr	r1, [pc, #436]	; (8003164 <main+0x25c>)
 8002fae:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8002fb2:	4b6d      	ldr	r3, [pc, #436]	; (8003168 <main+0x260>)
 8002fb4:	e9c1 2300 	strd	r2, r3, [r1]

  for (int i=0; i<16; i++) {
 8002fb8:	2300      	movs	r3, #0
 8002fba:	677b      	str	r3, [r7, #116]	; 0x74
 8002fbc:	e068      	b.n	8003090 <main+0x188>
	  s1_raw_bx[i] = eeprom[4+i];
 8002fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	4a6a      	ldr	r2, [pc, #424]	; (800316c <main+0x264>)
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4619      	mov	r1, r3
 8002fd0:	f7fd fdd2 	bl	8000b78 <__aeabi_d2iz>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	b219      	sxth	r1, r3
 8002fd8:	4a65      	ldr	r2, [pc, #404]	; (8003170 <main+0x268>)
 8002fda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fdc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  s1_raw_by[i] = eeprom[20+i];
 8002fe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fe2:	3314      	adds	r3, #20
 8002fe4:	4a61      	ldr	r2, [pc, #388]	; (800316c <main+0x264>)
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4413      	add	r3, r2
 8002fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fee:	4610      	mov	r0, r2
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	f7fd fdc1 	bl	8000b78 <__aeabi_d2iz>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	b219      	sxth	r1, r3
 8002ffa:	4a5e      	ldr	r2, [pc, #376]	; (8003174 <main+0x26c>)
 8002ffc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ffe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  s1_raw_bz[i] = eeprom[36+i];
 8003002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003004:	3324      	adds	r3, #36	; 0x24
 8003006:	4a59      	ldr	r2, [pc, #356]	; (800316c <main+0x264>)
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003010:	4610      	mov	r0, r2
 8003012:	4619      	mov	r1, r3
 8003014:	f7fd fdb0 	bl	8000b78 <__aeabi_d2iz>
 8003018:	4603      	mov	r3, r0
 800301a:	b219      	sxth	r1, r3
 800301c:	4a56      	ldr	r2, [pc, #344]	; (8003178 <main+0x270>)
 800301e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003020:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  s2_raw_bx[i] = eeprom[52+i];
 8003024:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003026:	3334      	adds	r3, #52	; 0x34
 8003028:	4a50      	ldr	r2, [pc, #320]	; (800316c <main+0x264>)
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4413      	add	r3, r2
 800302e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003032:	4610      	mov	r0, r2
 8003034:	4619      	mov	r1, r3
 8003036:	f7fd fd9f 	bl	8000b78 <__aeabi_d2iz>
 800303a:	4603      	mov	r3, r0
 800303c:	b219      	sxth	r1, r3
 800303e:	4a4f      	ldr	r2, [pc, #316]	; (800317c <main+0x274>)
 8003040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003042:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  s2_raw_by[i] = eeprom[68+i];
 8003046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003048:	3344      	adds	r3, #68	; 0x44
 800304a:	4a48      	ldr	r2, [pc, #288]	; (800316c <main+0x264>)
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	4413      	add	r3, r2
 8003050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003054:	4610      	mov	r0, r2
 8003056:	4619      	mov	r1, r3
 8003058:	f7fd fd8e 	bl	8000b78 <__aeabi_d2iz>
 800305c:	4603      	mov	r3, r0
 800305e:	b219      	sxth	r1, r3
 8003060:	4a47      	ldr	r2, [pc, #284]	; (8003180 <main+0x278>)
 8003062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003064:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  s2_raw_bz[i] = eeprom[84+i];
 8003068:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800306a:	3354      	adds	r3, #84	; 0x54
 800306c:	4a3f      	ldr	r2, [pc, #252]	; (800316c <main+0x264>)
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4413      	add	r3, r2
 8003072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003076:	4610      	mov	r0, r2
 8003078:	4619      	mov	r1, r3
 800307a:	f7fd fd7d 	bl	8000b78 <__aeabi_d2iz>
 800307e:	4603      	mov	r3, r0
 8003080:	b219      	sxth	r1, r3
 8003082:	4a40      	ldr	r2, [pc, #256]	; (8003184 <main+0x27c>)
 8003084:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003086:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i=0; i<16; i++) {
 800308a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800308c:	3301      	adds	r3, #1
 800308e:	677b      	str	r3, [r7, #116]	; 0x74
 8003090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003092:	2b0f      	cmp	r3, #15
 8003094:	dd93      	ble.n	8002fbe <main+0xb6>
  }

  s1_raw_bx_p2p = eeprom[100];
 8003096:	4b35      	ldr	r3, [pc, #212]	; (800316c <main+0x264>)
 8003098:	e9d3 23c8 	ldrd	r2, r3, [r3, #800]	; 0x320
 800309c:	493a      	ldr	r1, [pc, #232]	; (8003188 <main+0x280>)
 800309e:	e9c1 2300 	strd	r2, r3, [r1]
  s1_raw_by_p2p = eeprom[101];
 80030a2:	4b32      	ldr	r3, [pc, #200]	; (800316c <main+0x264>)
 80030a4:	e9d3 23ca 	ldrd	r2, r3, [r3, #808]	; 0x328
 80030a8:	4938      	ldr	r1, [pc, #224]	; (800318c <main+0x284>)
 80030aa:	e9c1 2300 	strd	r2, r3, [r1]
  s1_raw_bz_p2p = eeprom[102];
 80030ae:	4b2f      	ldr	r3, [pc, #188]	; (800316c <main+0x264>)
 80030b0:	e9d3 23cc 	ldrd	r2, r3, [r3, #816]	; 0x330
 80030b4:	4936      	ldr	r1, [pc, #216]	; (8003190 <main+0x288>)
 80030b6:	e9c1 2300 	strd	r2, r3, [r1]
  s1_raw_bx_offset = eeprom[103];
 80030ba:	4b2c      	ldr	r3, [pc, #176]	; (800316c <main+0x264>)
 80030bc:	e9d3 23ce 	ldrd	r2, r3, [r3, #824]	; 0x338
 80030c0:	4934      	ldr	r1, [pc, #208]	; (8003194 <main+0x28c>)
 80030c2:	e9c1 2300 	strd	r2, r3, [r1]
  s1_raw_by_offset = eeprom[104];
 80030c6:	4b29      	ldr	r3, [pc, #164]	; (800316c <main+0x264>)
 80030c8:	e9d3 23d0 	ldrd	r2, r3, [r3, #832]	; 0x340
 80030cc:	4932      	ldr	r1, [pc, #200]	; (8003198 <main+0x290>)
 80030ce:	e9c1 2300 	strd	r2, r3, [r1]
  s1_raw_bz_offset = eeprom[105];
 80030d2:	4b26      	ldr	r3, [pc, #152]	; (800316c <main+0x264>)
 80030d4:	e9d3 23d2 	ldrd	r2, r3, [r3, #840]	; 0x348
 80030d8:	4930      	ldr	r1, [pc, #192]	; (800319c <main+0x294>)
 80030da:	e9c1 2300 	strd	r2, r3, [r1]
  s2_raw_bx_p2p = eeprom[106];
 80030de:	4b23      	ldr	r3, [pc, #140]	; (800316c <main+0x264>)
 80030e0:	e9d3 23d4 	ldrd	r2, r3, [r3, #848]	; 0x350
 80030e4:	492e      	ldr	r1, [pc, #184]	; (80031a0 <main+0x298>)
 80030e6:	e9c1 2300 	strd	r2, r3, [r1]
  s2_raw_by_p2p = eeprom[107];
 80030ea:	4b20      	ldr	r3, [pc, #128]	; (800316c <main+0x264>)
 80030ec:	e9d3 23d6 	ldrd	r2, r3, [r3, #856]	; 0x358
 80030f0:	492c      	ldr	r1, [pc, #176]	; (80031a4 <main+0x29c>)
 80030f2:	e9c1 2300 	strd	r2, r3, [r1]
  s2_raw_bz_p2p = eeprom[108];
 80030f6:	4b1d      	ldr	r3, [pc, #116]	; (800316c <main+0x264>)
 80030f8:	e9d3 23d8 	ldrd	r2, r3, [r3, #864]	; 0x360
 80030fc:	492a      	ldr	r1, [pc, #168]	; (80031a8 <main+0x2a0>)
 80030fe:	e9c1 2300 	strd	r2, r3, [r1]
  s2_raw_bx_offset = eeprom[109];
 8003102:	4b1a      	ldr	r3, [pc, #104]	; (800316c <main+0x264>)
 8003104:	e9d3 23da 	ldrd	r2, r3, [r3, #872]	; 0x368
 8003108:	4928      	ldr	r1, [pc, #160]	; (80031ac <main+0x2a4>)
 800310a:	e9c1 2300 	strd	r2, r3, [r1]
  s2_raw_by_offset = eeprom[110];
 800310e:	4b17      	ldr	r3, [pc, #92]	; (800316c <main+0x264>)
 8003110:	e9d3 23dc 	ldrd	r2, r3, [r3, #880]	; 0x370
 8003114:	4926      	ldr	r1, [pc, #152]	; (80031b0 <main+0x2a8>)
 8003116:	e9c1 2300 	strd	r2, r3, [r1]
  s2_raw_bz_offset = eeprom[111];
 800311a:	4b14      	ldr	r3, [pc, #80]	; (800316c <main+0x264>)
 800311c:	e9d3 23de 	ldrd	r2, r3, [r3, #888]	; 0x378
 8003120:	4924      	ldr	r1, [pc, #144]	; (80031b4 <main+0x2ac>)
 8003122:	e9c1 2300 	strd	r2, r3, [r1]

  for (int i=0; i<16; i++) {
 8003126:	2300      	movs	r3, #0
 8003128:	673b      	str	r3, [r7, #112]	; 0x70
 800312a:	e129      	b.n	8003380 <main+0x478>
 800312c:	f3af 8000 	nop.w
 8003130:	9999999a 	.word	0x9999999a
 8003134:	40059999 	.word	0x40059999
 8003138:	33333333 	.word	0x33333333
 800313c:	bff33333 	.word	0xbff33333
 8003140:	200001f8 	.word	0x200001f8
 8003144:	0800d170 	.word	0x0800d170
 8003148:	20000000 	.word	0x20000000
 800314c:	2000022c 	.word	0x2000022c
 8003150:	20000001 	.word	0x20000001
 8003154:	20000008 	.word	0x20000008
 8003158:	40240000 	.word	0x40240000
 800315c:	20000010 	.word	0x20000010
 8003160:	20000018 	.word	0x20000018
 8003164:	20000020 	.word	0x20000020
 8003168:	3ff33333 	.word	0x3ff33333
 800316c:	20000bd0 	.word	0x20000bd0
 8003170:	20000390 	.word	0x20000390
 8003174:	200003b0 	.word	0x200003b0
 8003178:	200003d0 	.word	0x200003d0
 800317c:	200003f0 	.word	0x200003f0
 8003180:	20000410 	.word	0x20000410
 8003184:	20000430 	.word	0x20000430
 8003188:	20000450 	.word	0x20000450
 800318c:	20000458 	.word	0x20000458
 8003190:	20000460 	.word	0x20000460
 8003194:	20000480 	.word	0x20000480
 8003198:	20000488 	.word	0x20000488
 800319c:	20000490 	.word	0x20000490
 80031a0:	20000468 	.word	0x20000468
 80031a4:	20000470 	.word	0x20000470
 80031a8:	20000478 	.word	0x20000478
 80031ac:	20000498 	.word	0x20000498
 80031b0:	200004a0 	.word	0x200004a0
 80031b4:	200004a8 	.word	0x200004a8
	  s1_std_bx[i] = eeprom[112+i];
 80031b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031ba:	3370      	adds	r3, #112	; 0x70
 80031bc:	4aa3      	ldr	r2, [pc, #652]	; (800344c <main+0x544>)
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4413      	add	r3, r2
 80031c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c6:	48a2      	ldr	r0, [pc, #648]	; (8003450 <main+0x548>)
 80031c8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80031ca:	00c9      	lsls	r1, r1, #3
 80031cc:	4401      	add	r1, r0
 80031ce:	e9c1 2300 	strd	r2, r3, [r1]
	  s1_std_by[i] = eeprom[128+i];
 80031d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031d4:	3380      	adds	r3, #128	; 0x80
 80031d6:	4a9d      	ldr	r2, [pc, #628]	; (800344c <main+0x544>)
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4413      	add	r3, r2
 80031dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e0:	489c      	ldr	r0, [pc, #624]	; (8003454 <main+0x54c>)
 80031e2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80031e4:	00c9      	lsls	r1, r1, #3
 80031e6:	4401      	add	r1, r0
 80031e8:	e9c1 2300 	strd	r2, r3, [r1]
	  s1_std_bz[i] = eeprom[144+i];
 80031ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031ee:	3390      	adds	r3, #144	; 0x90
 80031f0:	4a96      	ldr	r2, [pc, #600]	; (800344c <main+0x544>)
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4413      	add	r3, r2
 80031f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fa:	4897      	ldr	r0, [pc, #604]	; (8003458 <main+0x550>)
 80031fc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80031fe:	00c9      	lsls	r1, r1, #3
 8003200:	4401      	add	r1, r0
 8003202:	e9c1 2300 	strd	r2, r3, [r1]
	  s2_std_bx[i] = eeprom[160+i];
 8003206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003208:	33a0      	adds	r3, #160	; 0xa0
 800320a:	4a90      	ldr	r2, [pc, #576]	; (800344c <main+0x544>)
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4413      	add	r3, r2
 8003210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003214:	4891      	ldr	r0, [pc, #580]	; (800345c <main+0x554>)
 8003216:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003218:	00c9      	lsls	r1, r1, #3
 800321a:	4401      	add	r1, r0
 800321c:	e9c1 2300 	strd	r2, r3, [r1]
	  s2_std_by[i] = eeprom[176+i];
 8003220:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003222:	33b0      	adds	r3, #176	; 0xb0
 8003224:	4a89      	ldr	r2, [pc, #548]	; (800344c <main+0x544>)
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	4413      	add	r3, r2
 800322a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322e:	488c      	ldr	r0, [pc, #560]	; (8003460 <main+0x558>)
 8003230:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003232:	00c9      	lsls	r1, r1, #3
 8003234:	4401      	add	r1, r0
 8003236:	e9c1 2300 	strd	r2, r3, [r1]
	  s2_std_bz[i] = eeprom[192+i];
 800323a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800323c:	33c0      	adds	r3, #192	; 0xc0
 800323e:	4a83      	ldr	r2, [pc, #524]	; (800344c <main+0x544>)
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4413      	add	r3, r2
 8003244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003248:	4886      	ldr	r0, [pc, #536]	; (8003464 <main+0x55c>)
 800324a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800324c:	00c9      	lsls	r1, r1, #3
 800324e:	4401      	add	r1, r0
 8003250:	e9c1 2300 	strd	r2, r3, [r1]
	  s1_atan[i] = eeprom[208+i];
 8003254:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003256:	33d0      	adds	r3, #208	; 0xd0
 8003258:	4a7c      	ldr	r2, [pc, #496]	; (800344c <main+0x544>)
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4413      	add	r3, r2
 800325e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003262:	4881      	ldr	r0, [pc, #516]	; (8003468 <main+0x560>)
 8003264:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003266:	00c9      	lsls	r1, r1, #3
 8003268:	4401      	add	r1, r0
 800326a:	e9c1 2300 	strd	r2, r3, [r1]
	  s2_atan[i] = eeprom[224+i];
 800326e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003270:	33e0      	adds	r3, #224	; 0xe0
 8003272:	4a76      	ldr	r2, [pc, #472]	; (800344c <main+0x544>)
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4413      	add	r3, r2
 8003278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327c:	487b      	ldr	r0, [pc, #492]	; (800346c <main+0x564>)
 800327e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003280:	00c9      	lsls	r1, r1, #3
 8003282:	4401      	add	r1, r0
 8003284:	e9c1 2300 	strd	r2, r3, [r1]
	  s1_std_bx_sign[i] = eeprom[240+i];
 8003288:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800328a:	33f0      	adds	r3, #240	; 0xf0
 800328c:	4a6f      	ldr	r2, [pc, #444]	; (800344c <main+0x544>)
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4413      	add	r3, r2
 8003292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003296:	4610      	mov	r0, r2
 8003298:	4619      	mov	r1, r3
 800329a:	f7fd fc95 	bl	8000bc8 <__aeabi_d2uiz>
 800329e:	4603      	mov	r3, r0
 80032a0:	b2d9      	uxtb	r1, r3
 80032a2:	4a73      	ldr	r2, [pc, #460]	; (8003470 <main+0x568>)
 80032a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032a6:	4413      	add	r3, r2
 80032a8:	460a      	mov	r2, r1
 80032aa:	701a      	strb	r2, [r3, #0]
	  s2_std_bx_sign[i] = eeprom[256+i];
 80032ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80032b2:	4a66      	ldr	r2, [pc, #408]	; (800344c <main+0x544>)
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4413      	add	r3, r2
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	4610      	mov	r0, r2
 80032be:	4619      	mov	r1, r3
 80032c0:	f7fd fc82 	bl	8000bc8 <__aeabi_d2uiz>
 80032c4:	4603      	mov	r3, r0
 80032c6:	b2d9      	uxtb	r1, r3
 80032c8:	4a6a      	ldr	r2, [pc, #424]	; (8003474 <main+0x56c>)
 80032ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032cc:	4413      	add	r3, r2
 80032ce:	460a      	mov	r2, r1
 80032d0:	701a      	strb	r2, [r3, #0]
	  s1_theta[i] = eeprom[272+i];
 80032d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032d4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80032d8:	4a5c      	ldr	r2, [pc, #368]	; (800344c <main+0x544>)
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	4413      	add	r3, r2
 80032de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e2:	4865      	ldr	r0, [pc, #404]	; (8003478 <main+0x570>)
 80032e4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80032e6:	00c9      	lsls	r1, r1, #3
 80032e8:	4401      	add	r1, r0
 80032ea:	e9c1 2300 	strd	r2, r3, [r1]
	  s2_theta[i] = eeprom[288+i];
 80032ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032f0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80032f4:	4a55      	ldr	r2, [pc, #340]	; (800344c <main+0x544>)
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	4413      	add	r3, r2
 80032fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fe:	485f      	ldr	r0, [pc, #380]	; (800347c <main+0x574>)
 8003300:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003302:	00c9      	lsls	r1, r1, #3
 8003304:	4401      	add	r1, r0
 8003306:	e9c1 2300 	strd	r2, r3, [r1]
	  s1_theta_low[i] = eeprom[304+i];
 800330a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800330c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8003310:	4a4e      	ldr	r2, [pc, #312]	; (800344c <main+0x544>)
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4413      	add	r3, r2
 8003316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331a:	4859      	ldr	r0, [pc, #356]	; (8003480 <main+0x578>)
 800331c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800331e:	00c9      	lsls	r1, r1, #3
 8003320:	4401      	add	r1, r0
 8003322:	e9c1 2300 	strd	r2, r3, [r1]
	  s2_theta_low[i] = eeprom[320+i];
 8003326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003328:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800332c:	4a47      	ldr	r2, [pc, #284]	; (800344c <main+0x544>)
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4413      	add	r3, r2
 8003332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003336:	4853      	ldr	r0, [pc, #332]	; (8003484 <main+0x57c>)
 8003338:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800333a:	00c9      	lsls	r1, r1, #3
 800333c:	4401      	add	r1, r0
 800333e:	e9c1 2300 	strd	r2, r3, [r1]
	  s1_theta_high[i] = eeprom[336+i];
 8003342:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003344:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003348:	4a40      	ldr	r2, [pc, #256]	; (800344c <main+0x544>)
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	4413      	add	r3, r2
 800334e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003352:	484d      	ldr	r0, [pc, #308]	; (8003488 <main+0x580>)
 8003354:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003356:	00c9      	lsls	r1, r1, #3
 8003358:	4401      	add	r1, r0
 800335a:	e9c1 2300 	strd	r2, r3, [r1]
	  s2_theta_high[i] = eeprom[352+i];
 800335e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003360:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003364:	4a39      	ldr	r2, [pc, #228]	; (800344c <main+0x544>)
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	4413      	add	r3, r2
 800336a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336e:	4847      	ldr	r0, [pc, #284]	; (800348c <main+0x584>)
 8003370:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003372:	00c9      	lsls	r1, r1, #3
 8003374:	4401      	add	r1, r0
 8003376:	e9c1 2300 	strd	r2, r3, [r1]
  for (int i=0; i<16; i++) {
 800337a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800337c:	3301      	adds	r3, #1
 800337e:	673b      	str	r3, [r7, #112]	; 0x70
 8003380:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003382:	2b0f      	cmp	r3, #15
 8003384:	f77f af18 	ble.w	80031b8 <main+0x2b0>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("\n");
 8003388:	200a      	movs	r0, #10
 800338a:	f005 fa21 	bl	80087d0 <putchar>
	  printf("1:calibration\n");
 800338e:	4840      	ldr	r0, [pc, #256]	; (8003490 <main+0x588>)
 8003390:	f005 fa7a 	bl	8008888 <puts>
	  printf("2:store memory\n");
 8003394:	483f      	ldr	r0, [pc, #252]	; (8003494 <main+0x58c>)
 8003396:	f005 fa77 	bl	8008888 <puts>
	  printf("3:read eeprom\n");
 800339a:	483f      	ldr	r0, [pc, #252]	; (8003498 <main+0x590>)
 800339c:	f005 fa74 	bl	8008888 <puts>
	  printf("4:sensitivity adjustment\n");
 80033a0:	483e      	ldr	r0, [pc, #248]	; (800349c <main+0x594>)
 80033a2:	f005 fa71 	bl	8008888 <puts>
	  printf("5:operation\n");
 80033a6:	483e      	ldr	r0, [pc, #248]	; (80034a0 <main+0x598>)
 80033a8:	f005 fa6e 	bl	8008888 <puts>
	  printf("6:exit\n");
 80033ac:	483d      	ldr	r0, [pc, #244]	; (80034a4 <main+0x59c>)
 80033ae:	f005 fa6b 	bl	8008888 <puts>
	  scanf("%s", input);
 80033b2:	f107 0308 	add.w	r3, r7, #8
 80033b6:	4619      	mov	r1, r3
 80033b8:	483b      	ldr	r0, [pc, #236]	; (80034a8 <main+0x5a0>)
 80033ba:	f005 fa6d 	bl	8008898 <iscanf>

      if (strcmp(input, "1") == 0) {
 80033be:	f107 0308 	add.w	r3, r7, #8
 80033c2:	493a      	ldr	r1, [pc, #232]	; (80034ac <main+0x5a4>)
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fc ff03 	bl	80001d0 <strcmp>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d102      	bne.n	80033d6 <main+0x4ce>
          calibration();
 80033d0:	f7fd fe46 	bl	8001060 <calibration>
 80033d4:	e092      	b.n	80034fc <main+0x5f4>
      } else if (strcmp(input, "2") == 0) {
 80033d6:	f107 0308 	add.w	r3, r7, #8
 80033da:	4935      	ldr	r1, [pc, #212]	; (80034b0 <main+0x5a8>)
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fc fef7 	bl	80001d0 <strcmp>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d102      	bne.n	80033ee <main+0x4e6>
    	  eeprom_write();
 80033e8:	f7ff fab8 	bl	800295c <eeprom_write>
 80033ec:	e086      	b.n	80034fc <main+0x5f4>
      } else if (strcmp(input, "3") == 0) {
 80033ee:	f107 0308 	add.w	r3, r7, #8
 80033f2:	4930      	ldr	r1, [pc, #192]	; (80034b4 <main+0x5ac>)
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fc feeb 	bl	80001d0 <strcmp>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d119      	bne.n	8003434 <main+0x52c>
    	  eeprom_read();
 8003400:	f7ff fa86 	bl	8002910 <eeprom_read>
    	  printf("\n");
 8003404:	200a      	movs	r0, #10
 8003406:	f005 f9e3 	bl	80087d0 <putchar>
    	  for(int i=0; i<368; i++) {
 800340a:	2300      	movs	r3, #0
 800340c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800340e:	e00c      	b.n	800342a <main+0x522>
    		  printf("eeprom[%d]   %f\n",i,eeprom[i]);
 8003410:	4a0e      	ldr	r2, [pc, #56]	; (800344c <main+0x544>)
 8003412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	4413      	add	r3, r2
 8003418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800341e:	4826      	ldr	r0, [pc, #152]	; (80034b8 <main+0x5b0>)
 8003420:	f005 f9c4 	bl	80087ac <iprintf>
    	  for(int i=0; i<368; i++) {
 8003424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003426:	3301      	adds	r3, #1
 8003428:	66fb      	str	r3, [r7, #108]	; 0x6c
 800342a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800342c:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8003430:	dbee      	blt.n	8003410 <main+0x508>
 8003432:	e063      	b.n	80034fc <main+0x5f4>
    	  }
      } else if (strcmp(input, "4") == 0) {
 8003434:	f107 0308 	add.w	r3, r7, #8
 8003438:	4920      	ldr	r1, [pc, #128]	; (80034bc <main+0x5b4>)
 800343a:	4618      	mov	r0, r3
 800343c:	f7fc fec8 	bl	80001d0 <strcmp>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d13c      	bne.n	80034c0 <main+0x5b8>
    	  sense_adjust();
 8003446:	f7ff f9cd 	bl	80027e4 <sense_adjust>
 800344a:	e057      	b.n	80034fc <main+0x5f4>
 800344c:	20000bd0 	.word	0x20000bd0
 8003450:	200004b0 	.word	0x200004b0
 8003454:	20000530 	.word	0x20000530
 8003458:	200005b0 	.word	0x200005b0
 800345c:	20000630 	.word	0x20000630
 8003460:	200006b0 	.word	0x200006b0
 8003464:	20000730 	.word	0x20000730
 8003468:	200007b0 	.word	0x200007b0
 800346c:	20000830 	.word	0x20000830
 8003470:	200008b0 	.word	0x200008b0
 8003474:	200008c0 	.word	0x200008c0
 8003478:	200008d0 	.word	0x200008d0
 800347c:	20000950 	.word	0x20000950
 8003480:	200009d0 	.word	0x200009d0
 8003484:	20000a50 	.word	0x20000a50
 8003488:	20000ad0 	.word	0x20000ad0
 800348c:	20000b50 	.word	0x20000b50
 8003490:	0800d19c 	.word	0x0800d19c
 8003494:	0800d1ac 	.word	0x0800d1ac
 8003498:	0800d1bc 	.word	0x0800d1bc
 800349c:	0800d1cc 	.word	0x0800d1cc
 80034a0:	0800d1e8 	.word	0x0800d1e8
 80034a4:	0800d1f4 	.word	0x0800d1f4
 80034a8:	0800d0d8 	.word	0x0800d0d8
 80034ac:	0800d1fc 	.word	0x0800d1fc
 80034b0:	0800d200 	.word	0x0800d200
 80034b4:	0800d204 	.word	0x0800d204
 80034b8:	0800d208 	.word	0x0800d208
 80034bc:	0800d21c 	.word	0x0800d21c
      } else if (strcmp(input, "5") == 0) {
 80034c0:	f107 0308 	add.w	r3, r7, #8
 80034c4:	490f      	ldr	r1, [pc, #60]	; (8003504 <main+0x5fc>)
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fc fe82 	bl	80001d0 <strcmp>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d105      	bne.n	80034de <main+0x5d6>
    	  while (1) {
    		  operation();
 80034d2:	f7fe fc79 	bl	8001dc8 <operation>
    		  HAL_Delay(2);   // 繰り返し出力の待ち時間はここで決まる
 80034d6:	2002      	movs	r0, #2
 80034d8:	f000 fc2a 	bl	8003d30 <HAL_Delay>
    		  operation();
 80034dc:	e7f9      	b.n	80034d2 <main+0x5ca>
    	  }
      } else if (strcmp(input, "6") == 0) {
 80034de:	f107 0308 	add.w	r3, r7, #8
 80034e2:	4909      	ldr	r1, [pc, #36]	; (8003508 <main+0x600>)
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fc fe73 	bl	80001d0 <strcmp>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d102      	bne.n	80034f6 <main+0x5ee>
    	  com_debug();
 80034f0:	f7ff f950 	bl	8002794 <com_debug>
 80034f4:	e002      	b.n	80034fc <main+0x5f4>
      } else {
          printf("\nInvalid command.\n");
 80034f6:	4805      	ldr	r0, [pc, #20]	; (800350c <main+0x604>)
 80034f8:	f005 f9c6 	bl	8008888 <puts>
      }

	  HAL_Delay (100);
 80034fc:	2064      	movs	r0, #100	; 0x64
 80034fe:	f000 fc17 	bl	8003d30 <HAL_Delay>
	  printf("\n");
 8003502:	e741      	b.n	8003388 <main+0x480>
 8003504:	0800d220 	.word	0x0800d220
 8003508:	0800d224 	.word	0x0800d224
 800350c:	0800d228 	.word	0x0800d228

08003510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b096      	sub	sp, #88	; 0x58
 8003514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003516:	f107 0314 	add.w	r3, r7, #20
 800351a:	2244      	movs	r2, #68	; 0x44
 800351c:	2100      	movs	r1, #0
 800351e:	4618      	mov	r0, r3
 8003520:	f005 fb52 	bl	8008bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003524:	463b      	mov	r3, r7
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	605a      	str	r2, [r3, #4]
 800352c:	609a      	str	r2, [r3, #8]
 800352e:	60da      	str	r2, [r3, #12]
 8003530:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003532:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003536:	f001 fdc9 	bl	80050cc <HAL_PWREx_ControlVoltageScaling>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003540:	f000 f946 	bl	80037d0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003544:	f001 fda4 	bl	8005090 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003548:	4b21      	ldr	r3, [pc, #132]	; (80035d0 <SystemClock_Config+0xc0>)
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354e:	4a20      	ldr	r2, [pc, #128]	; (80035d0 <SystemClock_Config+0xc0>)
 8003550:	f023 0318 	bic.w	r3, r3, #24
 8003554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003558:	2314      	movs	r3, #20
 800355a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800355c:	2301      	movs	r3, #1
 800355e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003560:	2301      	movs	r3, #1
 8003562:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003568:	2360      	movs	r3, #96	; 0x60
 800356a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800356c:	2302      	movs	r3, #2
 800356e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003570:	2301      	movs	r3, #1
 8003572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003574:	2301      	movs	r3, #1
 8003576:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8003578:	2310      	movs	r3, #16
 800357a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800357c:	2307      	movs	r3, #7
 800357e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003580:	2302      	movs	r3, #2
 8003582:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003584:	2302      	movs	r3, #2
 8003586:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003588:	f107 0314 	add.w	r3, r7, #20
 800358c:	4618      	mov	r0, r3
 800358e:	f001 fdf3 	bl	8005178 <HAL_RCC_OscConfig>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003598:	f000 f91a 	bl	80037d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800359c:	230f      	movs	r3, #15
 800359e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035a0:	2303      	movs	r3, #3
 80035a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035a4:	2300      	movs	r3, #0
 80035a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80035a8:	2300      	movs	r3, #0
 80035aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035ac:	2300      	movs	r3, #0
 80035ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80035b0:	463b      	mov	r3, r7
 80035b2:	2101      	movs	r1, #1
 80035b4:	4618      	mov	r0, r3
 80035b6:	f002 f9f3 	bl	80059a0 <HAL_RCC_ClockConfig>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80035c0:	f000 f906 	bl	80037d0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80035c4:	f002 fe06 	bl	80061d4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80035c8:	bf00      	nop
 80035ca:	3758      	adds	r7, #88	; 0x58
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40021000 	.word	0x40021000

080035d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035d8:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <MX_I2C1_Init+0x74>)
 80035da:	4a1c      	ldr	r2, [pc, #112]	; (800364c <MX_I2C1_Init+0x78>)
 80035dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80035de:	4b1a      	ldr	r3, [pc, #104]	; (8003648 <MX_I2C1_Init+0x74>)
 80035e0:	4a1b      	ldr	r2, [pc, #108]	; (8003650 <MX_I2C1_Init+0x7c>)
 80035e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80035e4:	4b18      	ldr	r3, [pc, #96]	; (8003648 <MX_I2C1_Init+0x74>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035ea:	4b17      	ldr	r3, [pc, #92]	; (8003648 <MX_I2C1_Init+0x74>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035f0:	4b15      	ldr	r3, [pc, #84]	; (8003648 <MX_I2C1_Init+0x74>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80035f6:	4b14      	ldr	r3, [pc, #80]	; (8003648 <MX_I2C1_Init+0x74>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80035fc:	4b12      	ldr	r3, [pc, #72]	; (8003648 <MX_I2C1_Init+0x74>)
 80035fe:	2200      	movs	r2, #0
 8003600:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003602:	4b11      	ldr	r3, [pc, #68]	; (8003648 <MX_I2C1_Init+0x74>)
 8003604:	2200      	movs	r2, #0
 8003606:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003608:	4b0f      	ldr	r3, [pc, #60]	; (8003648 <MX_I2C1_Init+0x74>)
 800360a:	2200      	movs	r2, #0
 800360c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800360e:	480e      	ldr	r0, [pc, #56]	; (8003648 <MX_I2C1_Init+0x74>)
 8003610:	f000 fe1a 	bl	8004248 <HAL_I2C_Init>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800361a:	f000 f8d9 	bl	80037d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800361e:	2100      	movs	r1, #0
 8003620:	4809      	ldr	r0, [pc, #36]	; (8003648 <MX_I2C1_Init+0x74>)
 8003622:	f001 fc9d 	bl	8004f60 <HAL_I2CEx_ConfigAnalogFilter>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800362c:	f000 f8d0 	bl	80037d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003630:	2100      	movs	r1, #0
 8003632:	4805      	ldr	r0, [pc, #20]	; (8003648 <MX_I2C1_Init+0x74>)
 8003634:	f001 fcdf 	bl	8004ff6 <HAL_I2CEx_ConfigDigitalFilter>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800363e:	f000 f8c7 	bl	80037d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003642:	bf00      	nop
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	2000022c 	.word	0x2000022c
 800364c:	40005400 	.word	0x40005400
 8003650:	00707cbb 	.word	0x00707cbb

08003654 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003658:	4b14      	ldr	r3, [pc, #80]	; (80036ac <MX_USART1_UART_Init+0x58>)
 800365a:	4a15      	ldr	r2, [pc, #84]	; (80036b0 <MX_USART1_UART_Init+0x5c>)
 800365c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800365e:	4b13      	ldr	r3, [pc, #76]	; (80036ac <MX_USART1_UART_Init+0x58>)
 8003660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003664:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003666:	4b11      	ldr	r3, [pc, #68]	; (80036ac <MX_USART1_UART_Init+0x58>)
 8003668:	2200      	movs	r2, #0
 800366a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800366c:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <MX_USART1_UART_Init+0x58>)
 800366e:	2200      	movs	r2, #0
 8003670:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003672:	4b0e      	ldr	r3, [pc, #56]	; (80036ac <MX_USART1_UART_Init+0x58>)
 8003674:	2200      	movs	r2, #0
 8003676:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003678:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <MX_USART1_UART_Init+0x58>)
 800367a:	220c      	movs	r2, #12
 800367c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800367e:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <MX_USART1_UART_Init+0x58>)
 8003680:	2200      	movs	r2, #0
 8003682:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003684:	4b09      	ldr	r3, [pc, #36]	; (80036ac <MX_USART1_UART_Init+0x58>)
 8003686:	2200      	movs	r2, #0
 8003688:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800368a:	4b08      	ldr	r3, [pc, #32]	; (80036ac <MX_USART1_UART_Init+0x58>)
 800368c:	2200      	movs	r2, #0
 800368e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <MX_USART1_UART_Init+0x58>)
 8003692:	2200      	movs	r2, #0
 8003694:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003696:	4805      	ldr	r0, [pc, #20]	; (80036ac <MX_USART1_UART_Init+0x58>)
 8003698:	f002 fe9e 	bl	80063d8 <HAL_UART_Init>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80036a2:	f000 f895 	bl	80037d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80036a6:	bf00      	nop
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20000280 	.word	0x20000280
 80036b0:	40013800 	.word	0x40013800

080036b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80036b8:	4b14      	ldr	r3, [pc, #80]	; (800370c <MX_USART2_UART_Init+0x58>)
 80036ba:	4a15      	ldr	r2, [pc, #84]	; (8003710 <MX_USART2_UART_Init+0x5c>)
 80036bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80036be:	4b13      	ldr	r3, [pc, #76]	; (800370c <MX_USART2_UART_Init+0x58>)
 80036c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80036c6:	4b11      	ldr	r3, [pc, #68]	; (800370c <MX_USART2_UART_Init+0x58>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80036cc:	4b0f      	ldr	r3, [pc, #60]	; (800370c <MX_USART2_UART_Init+0x58>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80036d2:	4b0e      	ldr	r3, [pc, #56]	; (800370c <MX_USART2_UART_Init+0x58>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80036d8:	4b0c      	ldr	r3, [pc, #48]	; (800370c <MX_USART2_UART_Init+0x58>)
 80036da:	220c      	movs	r2, #12
 80036dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036de:	4b0b      	ldr	r3, [pc, #44]	; (800370c <MX_USART2_UART_Init+0x58>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80036e4:	4b09      	ldr	r3, [pc, #36]	; (800370c <MX_USART2_UART_Init+0x58>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036ea:	4b08      	ldr	r3, [pc, #32]	; (800370c <MX_USART2_UART_Init+0x58>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036f0:	4b06      	ldr	r3, [pc, #24]	; (800370c <MX_USART2_UART_Init+0x58>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036f6:	4805      	ldr	r0, [pc, #20]	; (800370c <MX_USART2_UART_Init+0x58>)
 80036f8:	f002 fe6e 	bl	80063d8 <HAL_UART_Init>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003702:	f000 f865 	bl	80037d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20000308 	.word	0x20000308
 8003710:	40004400 	.word	0x40004400

08003714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800371a:	f107 030c 	add.w	r3, r7, #12
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	605a      	str	r2, [r3, #4]
 8003724:	609a      	str	r2, [r3, #8]
 8003726:	60da      	str	r2, [r3, #12]
 8003728:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800372a:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <MX_GPIO_Init+0x8c>)
 800372c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372e:	4a1c      	ldr	r2, [pc, #112]	; (80037a0 <MX_GPIO_Init+0x8c>)
 8003730:	f043 0304 	orr.w	r3, r3, #4
 8003734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003736:	4b1a      	ldr	r3, [pc, #104]	; (80037a0 <MX_GPIO_Init+0x8c>)
 8003738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003742:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <MX_GPIO_Init+0x8c>)
 8003744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003746:	4a16      	ldr	r2, [pc, #88]	; (80037a0 <MX_GPIO_Init+0x8c>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800374e:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <MX_GPIO_Init+0x8c>)
 8003750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	607b      	str	r3, [r7, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800375a:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <MX_GPIO_Init+0x8c>)
 800375c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375e:	4a10      	ldr	r2, [pc, #64]	; (80037a0 <MX_GPIO_Init+0x8c>)
 8003760:	f043 0302 	orr.w	r3, r3, #2
 8003764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003766:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <MX_GPIO_Init+0x8c>)
 8003768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	603b      	str	r3, [r7, #0]
 8003770:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003772:	2200      	movs	r2, #0
 8003774:	2108      	movs	r1, #8
 8003776:	480b      	ldr	r0, [pc, #44]	; (80037a4 <MX_GPIO_Init+0x90>)
 8003778:	f000 fd4e 	bl	8004218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800377c:	2308      	movs	r3, #8
 800377e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003780:	2301      	movs	r3, #1
 8003782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003788:	2300      	movs	r3, #0
 800378a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800378c:	f107 030c 	add.w	r3, r7, #12
 8003790:	4619      	mov	r1, r3
 8003792:	4804      	ldr	r0, [pc, #16]	; (80037a4 <MX_GPIO_Init+0x90>)
 8003794:	f000 fbd6 	bl	8003f44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003798:	bf00      	nop
 800379a:	3720      	adds	r7, #32
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40021000 	.word	0x40021000
 80037a4:	48000400 	.word	0x48000400

080037a8 <_write>:

/* USER CODE BEGIN 4 */
//追加; printfの内部で実際に書き込み処理をしているのは_write()関数です。_write()関数はweak宣言されているので、新しく作って上書きした形になります。
int _write(int file, char *ptr, int len)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	230a      	movs	r3, #10
 80037ba:	68b9      	ldr	r1, [r7, #8]
 80037bc:	4803      	ldr	r0, [pc, #12]	; (80037cc <_write+0x24>)
 80037be:	f002 fe59 	bl	8006474 <HAL_UART_Transmit>
  return len;
 80037c2:	687b      	ldr	r3, [r7, #4]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20000308 	.word	0x20000308

080037d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037d4:	b672      	cpsid	i
}
 80037d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037d8:	e7fe      	b.n	80037d8 <Error_Handler+0x8>
	...

080037dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037e2:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <HAL_MspInit+0x44>)
 80037e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e6:	4a0e      	ldr	r2, [pc, #56]	; (8003820 <HAL_MspInit+0x44>)
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	6613      	str	r3, [r2, #96]	; 0x60
 80037ee:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <HAL_MspInit+0x44>)
 80037f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	607b      	str	r3, [r7, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037fa:	4b09      	ldr	r3, [pc, #36]	; (8003820 <HAL_MspInit+0x44>)
 80037fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fe:	4a08      	ldr	r2, [pc, #32]	; (8003820 <HAL_MspInit+0x44>)
 8003800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003804:	6593      	str	r3, [r2, #88]	; 0x58
 8003806:	4b06      	ldr	r3, [pc, #24]	; (8003820 <HAL_MspInit+0x44>)
 8003808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40021000 	.word	0x40021000

08003824 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b09e      	sub	sp, #120	; 0x78
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800382c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	605a      	str	r2, [r3, #4]
 8003836:	609a      	str	r2, [r3, #8]
 8003838:	60da      	str	r2, [r3, #12]
 800383a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800383c:	f107 0310 	add.w	r3, r7, #16
 8003840:	2254      	movs	r2, #84	; 0x54
 8003842:	2100      	movs	r1, #0
 8003844:	4618      	mov	r0, r3
 8003846:	f005 f9bf 	bl	8008bc8 <memset>
  if(hi2c->Instance==I2C1)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a1f      	ldr	r2, [pc, #124]	; (80038cc <HAL_I2C_MspInit+0xa8>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d137      	bne.n	80038c4 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003854:	2340      	movs	r3, #64	; 0x40
 8003856:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003858:	2300      	movs	r3, #0
 800385a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800385c:	f107 0310 	add.w	r3, r7, #16
 8003860:	4618      	mov	r0, r3
 8003862:	f002 fac1 	bl	8005de8 <HAL_RCCEx_PeriphCLKConfig>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800386c:	f7ff ffb0 	bl	80037d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003870:	4b17      	ldr	r3, [pc, #92]	; (80038d0 <HAL_I2C_MspInit+0xac>)
 8003872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003874:	4a16      	ldr	r2, [pc, #88]	; (80038d0 <HAL_I2C_MspInit+0xac>)
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800387c:	4b14      	ldr	r3, [pc, #80]	; (80038d0 <HAL_I2C_MspInit+0xac>)
 800387e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003888:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800388c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800388e:	2312      	movs	r3, #18
 8003890:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003892:	2300      	movs	r3, #0
 8003894:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003896:	2303      	movs	r3, #3
 8003898:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800389a:	2304      	movs	r3, #4
 800389c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800389e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80038a2:	4619      	mov	r1, r3
 80038a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038a8:	f000 fb4c 	bl	8003f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038ac:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <HAL_I2C_MspInit+0xac>)
 80038ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b0:	4a07      	ldr	r2, [pc, #28]	; (80038d0 <HAL_I2C_MspInit+0xac>)
 80038b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038b6:	6593      	str	r3, [r2, #88]	; 0x58
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_I2C_MspInit+0xac>)
 80038ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038c0:	60bb      	str	r3, [r7, #8]
 80038c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80038c4:	bf00      	nop
 80038c6:	3778      	adds	r7, #120	; 0x78
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40005400 	.word	0x40005400
 80038d0:	40021000 	.word	0x40021000

080038d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b0a0      	sub	sp, #128	; 0x80
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	60da      	str	r2, [r3, #12]
 80038ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038ec:	f107 0318 	add.w	r3, r7, #24
 80038f0:	2254      	movs	r2, #84	; 0x54
 80038f2:	2100      	movs	r1, #0
 80038f4:	4618      	mov	r0, r3
 80038f6:	f005 f967 	bl	8008bc8 <memset>
  if(huart->Instance==USART1)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a46      	ldr	r2, [pc, #280]	; (8003a18 <HAL_UART_MspInit+0x144>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d136      	bne.n	8003972 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003904:	2301      	movs	r3, #1
 8003906:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003908:	2300      	movs	r3, #0
 800390a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800390c:	f107 0318 	add.w	r3, r7, #24
 8003910:	4618      	mov	r0, r3
 8003912:	f002 fa69 	bl	8005de8 <HAL_RCCEx_PeriphCLKConfig>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800391c:	f7ff ff58 	bl	80037d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003920:	4b3e      	ldr	r3, [pc, #248]	; (8003a1c <HAL_UART_MspInit+0x148>)
 8003922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003924:	4a3d      	ldr	r2, [pc, #244]	; (8003a1c <HAL_UART_MspInit+0x148>)
 8003926:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800392a:	6613      	str	r3, [r2, #96]	; 0x60
 800392c:	4b3b      	ldr	r3, [pc, #236]	; (8003a1c <HAL_UART_MspInit+0x148>)
 800392e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003938:	4b38      	ldr	r3, [pc, #224]	; (8003a1c <HAL_UART_MspInit+0x148>)
 800393a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393c:	4a37      	ldr	r2, [pc, #220]	; (8003a1c <HAL_UART_MspInit+0x148>)
 800393e:	f043 0302 	orr.w	r3, r3, #2
 8003942:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003944:	4b35      	ldr	r3, [pc, #212]	; (8003a1c <HAL_UART_MspInit+0x148>)
 8003946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	613b      	str	r3, [r7, #16]
 800394e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003950:	23c0      	movs	r3, #192	; 0xc0
 8003952:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003954:	2302      	movs	r3, #2
 8003956:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003958:	2300      	movs	r3, #0
 800395a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800395c:	2303      	movs	r3, #3
 800395e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003960:	2307      	movs	r3, #7
 8003962:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003964:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003968:	4619      	mov	r1, r3
 800396a:	482d      	ldr	r0, [pc, #180]	; (8003a20 <HAL_UART_MspInit+0x14c>)
 800396c:	f000 faea 	bl	8003f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003970:	e04d      	b.n	8003a0e <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a2b      	ldr	r2, [pc, #172]	; (8003a24 <HAL_UART_MspInit+0x150>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d148      	bne.n	8003a0e <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800397c:	2302      	movs	r3, #2
 800397e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003980:	2300      	movs	r3, #0
 8003982:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003984:	f107 0318 	add.w	r3, r7, #24
 8003988:	4618      	mov	r0, r3
 800398a:	f002 fa2d 	bl	8005de8 <HAL_RCCEx_PeriphCLKConfig>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8003994:	f7ff ff1c 	bl	80037d0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003998:	4b20      	ldr	r3, [pc, #128]	; (8003a1c <HAL_UART_MspInit+0x148>)
 800399a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399c:	4a1f      	ldr	r2, [pc, #124]	; (8003a1c <HAL_UART_MspInit+0x148>)
 800399e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a2:	6593      	str	r3, [r2, #88]	; 0x58
 80039a4:	4b1d      	ldr	r3, [pc, #116]	; (8003a1c <HAL_UART_MspInit+0x148>)
 80039a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b0:	4b1a      	ldr	r3, [pc, #104]	; (8003a1c <HAL_UART_MspInit+0x148>)
 80039b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b4:	4a19      	ldr	r2, [pc, #100]	; (8003a1c <HAL_UART_MspInit+0x148>)
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039bc:	4b17      	ldr	r3, [pc, #92]	; (8003a1c <HAL_UART_MspInit+0x148>)
 80039be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80039c8:	2304      	movs	r3, #4
 80039ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039cc:	2302      	movs	r3, #2
 80039ce:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d4:	2303      	movs	r3, #3
 80039d6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039d8:	2307      	movs	r3, #7
 80039da:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80039dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80039e0:	4619      	mov	r1, r3
 80039e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039e6:	f000 faad 	bl	8003f44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80039ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f0:	2302      	movs	r3, #2
 80039f2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f8:	2303      	movs	r3, #3
 80039fa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80039fc:	2303      	movs	r3, #3
 80039fe:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003a00:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003a04:	4619      	mov	r1, r3
 8003a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a0a:	f000 fa9b 	bl	8003f44 <HAL_GPIO_Init>
}
 8003a0e:	bf00      	nop
 8003a10:	3780      	adds	r7, #128	; 0x80
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40013800 	.word	0x40013800
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	48000400 	.word	0x48000400
 8003a24:	40004400 	.word	0x40004400

08003a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a2c:	e7fe      	b.n	8003a2c <NMI_Handler+0x4>

08003a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a32:	e7fe      	b.n	8003a32 <HardFault_Handler+0x4>

08003a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a38:	e7fe      	b.n	8003a38 <MemManage_Handler+0x4>

08003a3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a3e:	e7fe      	b.n	8003a3e <BusFault_Handler+0x4>

08003a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a44:	e7fe      	b.n	8003a44 <UsageFault_Handler+0x4>

08003a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a46:	b480      	push	{r7}
 8003a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a4a:	bf00      	nop
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a58:	bf00      	nop
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a62:	b480      	push	{r7}
 8003a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a66:	bf00      	nop
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a74:	f000 f93c 	bl	8003cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a78:	bf00      	nop
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  return 1;
 8003a80:	2301      	movs	r3, #1
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <_kill>:

int _kill(int pid, int sig)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a96:	f005 f8fb 	bl	8008c90 <__errno>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2216      	movs	r2, #22
 8003a9e:	601a      	str	r2, [r3, #0]
  return -1;
 8003aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <_exit>:

void _exit (int status)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff ffe7 	bl	8003a8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003abe:	e7fe      	b.n	8003abe <_exit+0x12>

08003ac0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	e00a      	b.n	8003ae8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ad2:	f7fd fa4d 	bl	8000f70 <__io_getchar>
 8003ad6:	4601      	mov	r1, r0
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	1c5a      	adds	r2, r3, #1
 8003adc:	60ba      	str	r2, [r7, #8]
 8003ade:	b2ca      	uxtb	r2, r1
 8003ae0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	dbf0      	blt.n	8003ad2 <_read+0x12>
  }

  return len;
 8003af0:	687b      	ldr	r3, [r7, #4]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <_close>:
  }
  return len;
}

int _close(int file)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b22:	605a      	str	r2, [r3, #4]
  return 0;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <_isatty>:

int _isatty(int file)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b3a:	2301      	movs	r3, #1
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b6c:	4a14      	ldr	r2, [pc, #80]	; (8003bc0 <_sbrk+0x5c>)
 8003b6e:	4b15      	ldr	r3, [pc, #84]	; (8003bc4 <_sbrk+0x60>)
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b78:	4b13      	ldr	r3, [pc, #76]	; (8003bc8 <_sbrk+0x64>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d102      	bne.n	8003b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b80:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <_sbrk+0x64>)
 8003b82:	4a12      	ldr	r2, [pc, #72]	; (8003bcc <_sbrk+0x68>)
 8003b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b86:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <_sbrk+0x64>)
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d207      	bcs.n	8003ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b94:	f005 f87c 	bl	8008c90 <__errno>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	220c      	movs	r2, #12
 8003b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba2:	e009      	b.n	8003bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ba4:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <_sbrk+0x64>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003baa:	4b07      	ldr	r3, [pc, #28]	; (8003bc8 <_sbrk+0x64>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	4a05      	ldr	r2, [pc, #20]	; (8003bc8 <_sbrk+0x64>)
 8003bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	20010000 	.word	0x20010000
 8003bc4:	00000400 	.word	0x00000400
 8003bc8:	20002b10 	.word	0x20002b10
 8003bcc:	20002c68 	.word	0x20002c68

08003bd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003bd4:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <SystemInit+0x20>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bda:	4a05      	ldr	r2, [pc, #20]	; (8003bf0 <SystemInit+0x20>)
 8003bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003be4:	bf00      	nop
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	e000ed00 	.word	0xe000ed00

08003bf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003bf8:	f7ff ffea 	bl	8003bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003bfc:	480c      	ldr	r0, [pc, #48]	; (8003c30 <LoopForever+0x6>)
  ldr r1, =_edata
 8003bfe:	490d      	ldr	r1, [pc, #52]	; (8003c34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c00:	4a0d      	ldr	r2, [pc, #52]	; (8003c38 <LoopForever+0xe>)
  movs r3, #0
 8003c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c04:	e002      	b.n	8003c0c <LoopCopyDataInit>

08003c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c0a:	3304      	adds	r3, #4

08003c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c10:	d3f9      	bcc.n	8003c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c12:	4a0a      	ldr	r2, [pc, #40]	; (8003c3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c14:	4c0a      	ldr	r4, [pc, #40]	; (8003c40 <LoopForever+0x16>)
  movs r3, #0
 8003c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c18:	e001      	b.n	8003c1e <LoopFillZerobss>

08003c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c1c:	3204      	adds	r2, #4

08003c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c20:	d3fb      	bcc.n	8003c1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c22:	f005 f83b 	bl	8008c9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c26:	f7ff f96f 	bl	8002f08 <main>

08003c2a <LoopForever>:

LoopForever:
    b LoopForever
 8003c2a:	e7fe      	b.n	8003c2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003c2c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c34:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8003c38:	0800d750 	.word	0x0800d750
  ldr r2, =_sbss
 8003c3c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8003c40:	20002c64 	.word	0x20002c64

08003c44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c44:	e7fe      	b.n	8003c44 <ADC1_IRQHandler>

08003c46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b082      	sub	sp, #8
 8003c4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c50:	2003      	movs	r0, #3
 8003c52:	f000 f943 	bl	8003edc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c56:	2000      	movs	r0, #0
 8003c58:	f000 f80e 	bl	8003c78 <HAL_InitTick>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	71fb      	strb	r3, [r7, #7]
 8003c66:	e001      	b.n	8003c6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c68:	f7ff fdb8 	bl	80037dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c6c:	79fb      	ldrb	r3, [r7, #7]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003c84:	4b17      	ldr	r3, [pc, #92]	; (8003ce4 <HAL_InitTick+0x6c>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d023      	beq.n	8003cd4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003c8c:	4b16      	ldr	r3, [pc, #88]	; (8003ce8 <HAL_InitTick+0x70>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4b14      	ldr	r3, [pc, #80]	; (8003ce4 <HAL_InitTick+0x6c>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	4619      	mov	r1, r3
 8003c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 f941 	bl	8003f2a <HAL_SYSTICK_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10f      	bne.n	8003cce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b0f      	cmp	r3, #15
 8003cb2:	d809      	bhi.n	8003cc8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cbc:	f000 f919 	bl	8003ef2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003cc0:	4a0a      	ldr	r2, [pc, #40]	; (8003cec <HAL_InitTick+0x74>)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e007      	b.n	8003cd8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
 8003ccc:	e004      	b.n	8003cd8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	73fb      	strb	r3, [r7, #15]
 8003cd2:	e001      	b.n	8003cd8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000030 	.word	0x20000030
 8003ce8:	20000028 	.word	0x20000028
 8003cec:	2000002c 	.word	0x2000002c

08003cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003cf4:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <HAL_IncTick+0x20>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <HAL_IncTick+0x24>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4413      	add	r3, r2
 8003d00:	4a04      	ldr	r2, [pc, #16]	; (8003d14 <HAL_IncTick+0x24>)
 8003d02:	6013      	str	r3, [r2, #0]
}
 8003d04:	bf00      	nop
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	20000030 	.word	0x20000030
 8003d14:	20002b14 	.word	0x20002b14

08003d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d1c:	4b03      	ldr	r3, [pc, #12]	; (8003d2c <HAL_GetTick+0x14>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	20002b14 	.word	0x20002b14

08003d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d38:	f7ff ffee 	bl	8003d18 <HAL_GetTick>
 8003d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d48:	d005      	beq.n	8003d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003d4a:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <HAL_Delay+0x44>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4413      	add	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d56:	bf00      	nop
 8003d58:	f7ff ffde 	bl	8003d18 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d8f7      	bhi.n	8003d58 <HAL_Delay+0x28>
  {
  }
}
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000030 	.word	0x20000030

08003d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d88:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <__NVIC_SetPriorityGrouping+0x44>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d94:	4013      	ands	r3, r2
 8003d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003daa:	4a04      	ldr	r2, [pc, #16]	; (8003dbc <__NVIC_SetPriorityGrouping+0x44>)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	60d3      	str	r3, [r2, #12]
}
 8003db0:	bf00      	nop
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	e000ed00 	.word	0xe000ed00

08003dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dc4:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	0a1b      	lsrs	r3, r3, #8
 8003dca:	f003 0307 	and.w	r3, r3, #7
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	e000ed00 	.word	0xe000ed00

08003ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	6039      	str	r1, [r7, #0]
 8003de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	db0a      	blt.n	8003e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	490c      	ldr	r1, [pc, #48]	; (8003e28 <__NVIC_SetPriority+0x4c>)
 8003df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfa:	0112      	lsls	r2, r2, #4
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	440b      	add	r3, r1
 8003e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e04:	e00a      	b.n	8003e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	4908      	ldr	r1, [pc, #32]	; (8003e2c <__NVIC_SetPriority+0x50>)
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	3b04      	subs	r3, #4
 8003e14:	0112      	lsls	r2, r2, #4
 8003e16:	b2d2      	uxtb	r2, r2
 8003e18:	440b      	add	r3, r1
 8003e1a:	761a      	strb	r2, [r3, #24]
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	e000e100 	.word	0xe000e100
 8003e2c:	e000ed00 	.word	0xe000ed00

08003e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b089      	sub	sp, #36	; 0x24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f1c3 0307 	rsb	r3, r3, #7
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	bf28      	it	cs
 8003e4e:	2304      	movcs	r3, #4
 8003e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	3304      	adds	r3, #4
 8003e56:	2b06      	cmp	r3, #6
 8003e58:	d902      	bls.n	8003e60 <NVIC_EncodePriority+0x30>
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	3b03      	subs	r3, #3
 8003e5e:	e000      	b.n	8003e62 <NVIC_EncodePriority+0x32>
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e64:	f04f 32ff 	mov.w	r2, #4294967295
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43da      	mvns	r2, r3
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	401a      	ands	r2, r3
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e78:	f04f 31ff 	mov.w	r1, #4294967295
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e82:	43d9      	mvns	r1, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e88:	4313      	orrs	r3, r2
         );
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3724      	adds	r7, #36	; 0x24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ea8:	d301      	bcc.n	8003eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e00f      	b.n	8003ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eae:	4a0a      	ldr	r2, [pc, #40]	; (8003ed8 <SysTick_Config+0x40>)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eb6:	210f      	movs	r1, #15
 8003eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ebc:	f7ff ff8e 	bl	8003ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ec0:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <SysTick_Config+0x40>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ec6:	4b04      	ldr	r3, [pc, #16]	; (8003ed8 <SysTick_Config+0x40>)
 8003ec8:	2207      	movs	r2, #7
 8003eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	e000e010 	.word	0xe000e010

08003edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff ff47 	bl	8003d78 <__NVIC_SetPriorityGrouping>
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b086      	sub	sp, #24
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	4603      	mov	r3, r0
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	607a      	str	r2, [r7, #4]
 8003efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f04:	f7ff ff5c 	bl	8003dc0 <__NVIC_GetPriorityGrouping>
 8003f08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	68b9      	ldr	r1, [r7, #8]
 8003f0e:	6978      	ldr	r0, [r7, #20]
 8003f10:	f7ff ff8e 	bl	8003e30 <NVIC_EncodePriority>
 8003f14:	4602      	mov	r2, r0
 8003f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff ff5d 	bl	8003ddc <__NVIC_SetPriority>
}
 8003f22:	bf00      	nop
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff ffb0 	bl	8003e98 <SysTick_Config>
 8003f38:	4603      	mov	r3, r0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f52:	e148      	b.n	80041e6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	2101      	movs	r1, #1
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f60:	4013      	ands	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 813a 	beq.w	80041e0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 0303 	and.w	r3, r3, #3
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d005      	beq.n	8003f84 <HAL_GPIO_Init+0x40>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f003 0303 	and.w	r3, r3, #3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d130      	bne.n	8003fe6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	2203      	movs	r2, #3
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	43db      	mvns	r3, r3
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fba:	2201      	movs	r2, #1
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	091b      	lsrs	r3, r3, #4
 8003fd0:	f003 0201 	and.w	r2, r3, #1
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	2b03      	cmp	r3, #3
 8003ff0:	d017      	beq.n	8004022 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	2203      	movs	r2, #3
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	43db      	mvns	r3, r3
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4013      	ands	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d123      	bne.n	8004076 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	08da      	lsrs	r2, r3, #3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3208      	adds	r2, #8
 8004036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800403a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	220f      	movs	r2, #15
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	43db      	mvns	r3, r3
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4013      	ands	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	691a      	ldr	r2, [r3, #16]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	08da      	lsrs	r2, r3, #3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3208      	adds	r2, #8
 8004070:	6939      	ldr	r1, [r7, #16]
 8004072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	2203      	movs	r2, #3
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	43db      	mvns	r3, r3
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4013      	ands	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f003 0203 	and.w	r2, r3, #3
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 8094 	beq.w	80041e0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040b8:	4b52      	ldr	r3, [pc, #328]	; (8004204 <HAL_GPIO_Init+0x2c0>)
 80040ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040bc:	4a51      	ldr	r2, [pc, #324]	; (8004204 <HAL_GPIO_Init+0x2c0>)
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6613      	str	r3, [r2, #96]	; 0x60
 80040c4:	4b4f      	ldr	r3, [pc, #316]	; (8004204 <HAL_GPIO_Init+0x2c0>)
 80040c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	60bb      	str	r3, [r7, #8]
 80040ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80040d0:	4a4d      	ldr	r2, [pc, #308]	; (8004208 <HAL_GPIO_Init+0x2c4>)
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	089b      	lsrs	r3, r3, #2
 80040d6:	3302      	adds	r3, #2
 80040d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	220f      	movs	r2, #15
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4013      	ands	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040fa:	d00d      	beq.n	8004118 <HAL_GPIO_Init+0x1d4>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a43      	ldr	r2, [pc, #268]	; (800420c <HAL_GPIO_Init+0x2c8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d007      	beq.n	8004114 <HAL_GPIO_Init+0x1d0>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a42      	ldr	r2, [pc, #264]	; (8004210 <HAL_GPIO_Init+0x2cc>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d101      	bne.n	8004110 <HAL_GPIO_Init+0x1cc>
 800410c:	2302      	movs	r3, #2
 800410e:	e004      	b.n	800411a <HAL_GPIO_Init+0x1d6>
 8004110:	2307      	movs	r3, #7
 8004112:	e002      	b.n	800411a <HAL_GPIO_Init+0x1d6>
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <HAL_GPIO_Init+0x1d6>
 8004118:	2300      	movs	r3, #0
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	f002 0203 	and.w	r2, r2, #3
 8004120:	0092      	lsls	r2, r2, #2
 8004122:	4093      	lsls	r3, r2
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800412a:	4937      	ldr	r1, [pc, #220]	; (8004208 <HAL_GPIO_Init+0x2c4>)
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	089b      	lsrs	r3, r3, #2
 8004130:	3302      	adds	r3, #2
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004138:	4b36      	ldr	r3, [pc, #216]	; (8004214 <HAL_GPIO_Init+0x2d0>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	43db      	mvns	r3, r3
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4013      	ands	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800415c:	4a2d      	ldr	r2, [pc, #180]	; (8004214 <HAL_GPIO_Init+0x2d0>)
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004162:	4b2c      	ldr	r3, [pc, #176]	; (8004214 <HAL_GPIO_Init+0x2d0>)
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	43db      	mvns	r3, r3
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4013      	ands	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004186:	4a23      	ldr	r2, [pc, #140]	; (8004214 <HAL_GPIO_Init+0x2d0>)
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800418c:	4b21      	ldr	r3, [pc, #132]	; (8004214 <HAL_GPIO_Init+0x2d0>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	43db      	mvns	r3, r3
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4013      	ands	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d003      	beq.n	80041b0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041b0:	4a18      	ldr	r2, [pc, #96]	; (8004214 <HAL_GPIO_Init+0x2d0>)
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80041b6:	4b17      	ldr	r3, [pc, #92]	; (8004214 <HAL_GPIO_Init+0x2d0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	43db      	mvns	r3, r3
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	4013      	ands	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041da:	4a0e      	ldr	r2, [pc, #56]	; (8004214 <HAL_GPIO_Init+0x2d0>)
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	3301      	adds	r3, #1
 80041e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	fa22 f303 	lsr.w	r3, r2, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f47f aeaf 	bne.w	8003f54 <HAL_GPIO_Init+0x10>
  }
}
 80041f6:	bf00      	nop
 80041f8:	bf00      	nop
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	40021000 	.word	0x40021000
 8004208:	40010000 	.word	0x40010000
 800420c:	48000400 	.word	0x48000400
 8004210:	48000800 	.word	0x48000800
 8004214:	40010400 	.word	0x40010400

08004218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	807b      	strh	r3, [r7, #2]
 8004224:	4613      	mov	r3, r2
 8004226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004228:	787b      	ldrb	r3, [r7, #1]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800422e:	887a      	ldrh	r2, [r7, #2]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004234:	e002      	b.n	800423c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004236:	887a      	ldrh	r2, [r7, #2]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e08d      	b.n	8004376 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d106      	bne.n	8004274 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff fad8 	bl	8003824 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2224      	movs	r2, #36	; 0x24
 8004278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0201 	bic.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004298:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d107      	bne.n	80042c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042be:	609a      	str	r2, [r3, #8]
 80042c0:	e006      	b.n	80042d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689a      	ldr	r2, [r3, #8]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80042ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d108      	bne.n	80042ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042e6:	605a      	str	r2, [r3, #4]
 80042e8:	e007      	b.n	80042fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800430c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800431c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	69d9      	ldr	r1, [r3, #28]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1a      	ldr	r2, [r3, #32]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0201 	orr.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
	...

08004380 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b088      	sub	sp, #32
 8004384:	af02      	add	r7, sp, #8
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	4608      	mov	r0, r1
 800438a:	4611      	mov	r1, r2
 800438c:	461a      	mov	r2, r3
 800438e:	4603      	mov	r3, r0
 8004390:	817b      	strh	r3, [r7, #10]
 8004392:	460b      	mov	r3, r1
 8004394:	813b      	strh	r3, [r7, #8]
 8004396:	4613      	mov	r3, r2
 8004398:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b20      	cmp	r3, #32
 80043a4:	f040 80f9 	bne.w	800459a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <HAL_I2C_Mem_Write+0x34>
 80043ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d105      	bne.n	80043c0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e0ed      	b.n	800459c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <HAL_I2C_Mem_Write+0x4e>
 80043ca:	2302      	movs	r3, #2
 80043cc:	e0e6      	b.n	800459c <HAL_I2C_Mem_Write+0x21c>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80043d6:	f7ff fc9f 	bl	8003d18 <HAL_GetTick>
 80043da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	2319      	movs	r3, #25
 80043e2:	2201      	movs	r2, #1
 80043e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 fbcd 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e0d1      	b.n	800459c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2221      	movs	r2, #33	; 0x21
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2240      	movs	r2, #64	; 0x40
 8004404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a3a      	ldr	r2, [r7, #32]
 8004412:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004418:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004420:	88f8      	ldrh	r0, [r7, #6]
 8004422:	893a      	ldrh	r2, [r7, #8]
 8004424:	8979      	ldrh	r1, [r7, #10]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	4603      	mov	r3, r0
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 fadd 	bl	80049f0 <I2C_RequestMemoryWrite>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e0a9      	b.n	800459c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	2bff      	cmp	r3, #255	; 0xff
 8004450:	d90e      	bls.n	8004470 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	22ff      	movs	r2, #255	; 0xff
 8004456:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445c:	b2da      	uxtb	r2, r3
 800445e:	8979      	ldrh	r1, [r7, #10]
 8004460:	2300      	movs	r3, #0
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 fd47 	bl	8004efc <I2C_TransferConfig>
 800446e:	e00f      	b.n	8004490 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004474:	b29a      	uxth	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447e:	b2da      	uxtb	r2, r3
 8004480:	8979      	ldrh	r1, [r7, #10]
 8004482:	2300      	movs	r3, #0
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 fd36 	bl	8004efc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 fbc6 	bl	8004c26 <I2C_WaitOnTXISFlagUntilTimeout>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e07b      	b.n	800459c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	781a      	ldrb	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d034      	beq.n	8004548 <HAL_I2C_Mem_Write+0x1c8>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d130      	bne.n	8004548 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	2200      	movs	r2, #0
 80044ee:	2180      	movs	r1, #128	; 0x80
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 fb49 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e04d      	b.n	800459c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004504:	b29b      	uxth	r3, r3
 8004506:	2bff      	cmp	r3, #255	; 0xff
 8004508:	d90e      	bls.n	8004528 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	22ff      	movs	r2, #255	; 0xff
 800450e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004514:	b2da      	uxtb	r2, r3
 8004516:	8979      	ldrh	r1, [r7, #10]
 8004518:	2300      	movs	r3, #0
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 fceb 	bl	8004efc <I2C_TransferConfig>
 8004526:	e00f      	b.n	8004548 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004536:	b2da      	uxtb	r2, r3
 8004538:	8979      	ldrh	r1, [r7, #10]
 800453a:	2300      	movs	r3, #0
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 fcda 	bl	8004efc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d19e      	bne.n	8004490 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 fbac 	bl	8004cb4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e01a      	b.n	800459c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2220      	movs	r2, #32
 800456c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6859      	ldr	r1, [r3, #4]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <HAL_I2C_Mem_Write+0x224>)
 800457a:	400b      	ands	r3, r1
 800457c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2220      	movs	r2, #32
 8004582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	e000      	b.n	800459c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800459a:	2302      	movs	r3, #2
  }
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	fe00e800 	.word	0xfe00e800

080045a8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af02      	add	r7, sp, #8
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	4608      	mov	r0, r1
 80045b2:	4611      	mov	r1, r2
 80045b4:	461a      	mov	r2, r3
 80045b6:	4603      	mov	r3, r0
 80045b8:	817b      	strh	r3, [r7, #10]
 80045ba:	460b      	mov	r3, r1
 80045bc:	813b      	strh	r3, [r7, #8]
 80045be:	4613      	mov	r3, r2
 80045c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	f040 80fd 	bne.w	80047ca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <HAL_I2C_Mem_Read+0x34>
 80045d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d105      	bne.n	80045e8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e0f1      	b.n	80047cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d101      	bne.n	80045f6 <HAL_I2C_Mem_Read+0x4e>
 80045f2:	2302      	movs	r3, #2
 80045f4:	e0ea      	b.n	80047cc <HAL_I2C_Mem_Read+0x224>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045fe:	f7ff fb8b 	bl	8003d18 <HAL_GetTick>
 8004602:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	2319      	movs	r3, #25
 800460a:	2201      	movs	r2, #1
 800460c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 fab9 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e0d5      	b.n	80047cc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2222      	movs	r2, #34	; 0x22
 8004624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2240      	movs	r2, #64	; 0x40
 800462c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a3a      	ldr	r2, [r7, #32]
 800463a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004640:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004648:	88f8      	ldrh	r0, [r7, #6]
 800464a:	893a      	ldrh	r2, [r7, #8]
 800464c:	8979      	ldrh	r1, [r7, #10]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	9301      	str	r3, [sp, #4]
 8004652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	4603      	mov	r3, r0
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 fa1d 	bl	8004a98 <I2C_RequestMemoryRead>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e0ad      	b.n	80047cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004674:	b29b      	uxth	r3, r3
 8004676:	2bff      	cmp	r3, #255	; 0xff
 8004678:	d90e      	bls.n	8004698 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	22ff      	movs	r2, #255	; 0xff
 800467e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004684:	b2da      	uxtb	r2, r3
 8004686:	8979      	ldrh	r1, [r7, #10]
 8004688:	4b52      	ldr	r3, [pc, #328]	; (80047d4 <HAL_I2C_Mem_Read+0x22c>)
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 fc33 	bl	8004efc <I2C_TransferConfig>
 8004696:	e00f      	b.n	80046b8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	8979      	ldrh	r1, [r7, #10]
 80046aa:	4b4a      	ldr	r3, [pc, #296]	; (80047d4 <HAL_I2C_Mem_Read+0x22c>)
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 fc22 	bl	8004efc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046be:	2200      	movs	r2, #0
 80046c0:	2104      	movs	r1, #4
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 fa60 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e07c      	b.n	80047cc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d034      	beq.n	8004778 <HAL_I2C_Mem_Read+0x1d0>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004712:	2b00      	cmp	r3, #0
 8004714:	d130      	bne.n	8004778 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471c:	2200      	movs	r2, #0
 800471e:	2180      	movs	r1, #128	; 0x80
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 fa31 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e04d      	b.n	80047cc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004734:	b29b      	uxth	r3, r3
 8004736:	2bff      	cmp	r3, #255	; 0xff
 8004738:	d90e      	bls.n	8004758 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	22ff      	movs	r2, #255	; 0xff
 800473e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004744:	b2da      	uxtb	r2, r3
 8004746:	8979      	ldrh	r1, [r7, #10]
 8004748:	2300      	movs	r3, #0
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 fbd3 	bl	8004efc <I2C_TransferConfig>
 8004756:	e00f      	b.n	8004778 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004766:	b2da      	uxtb	r2, r3
 8004768:	8979      	ldrh	r1, [r7, #10]
 800476a:	2300      	movs	r3, #0
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 fbc2 	bl	8004efc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d19a      	bne.n	80046b8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 fa94 	bl	8004cb4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e01a      	b.n	80047cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2220      	movs	r2, #32
 800479c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6859      	ldr	r1, [r3, #4]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <HAL_I2C_Mem_Read+0x230>)
 80047aa:	400b      	ands	r3, r1
 80047ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	e000      	b.n	80047cc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80047ca:	2302      	movs	r3, #2
  }
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	80002400 	.word	0x80002400
 80047d8:	fe00e800 	.word	0xfe00e800

080047dc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08a      	sub	sp, #40	; 0x28
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	607a      	str	r2, [r7, #4]
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	460b      	mov	r3, r1
 80047ea:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b20      	cmp	r3, #32
 80047fa:	f040 80f3 	bne.w	80049e4 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800480c:	d101      	bne.n	8004812 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800480e:	2302      	movs	r3, #2
 8004810:	e0e9      	b.n	80049e6 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <HAL_I2C_IsDeviceReady+0x44>
 800481c:	2302      	movs	r3, #2
 800481e:	e0e2      	b.n	80049e6 <HAL_I2C_IsDeviceReady+0x20a>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2224      	movs	r2, #36	; 0x24
 800482c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d107      	bne.n	800484e <HAL_I2C_IsDeviceReady+0x72>
 800483e:	897b      	ldrh	r3, [r7, #10]
 8004840:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004844:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004848:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800484c:	e006      	b.n	800485c <HAL_I2C_IsDeviceReady+0x80>
 800484e:	897b      	ldrh	r3, [r7, #10]
 8004850:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004854:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004858:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	6812      	ldr	r2, [r2, #0]
 8004860:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004862:	f7ff fa59 	bl	8003d18 <HAL_GetTick>
 8004866:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b20      	cmp	r3, #32
 8004874:	bf0c      	ite	eq
 8004876:	2301      	moveq	r3, #1
 8004878:	2300      	movne	r3, #0
 800487a:	b2db      	uxtb	r3, r3
 800487c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	f003 0310 	and.w	r3, r3, #16
 8004888:	2b10      	cmp	r3, #16
 800488a:	bf0c      	ite	eq
 800488c:	2301      	moveq	r3, #1
 800488e:	2300      	movne	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004894:	e034      	b.n	8004900 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489c:	d01a      	beq.n	80048d4 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800489e:	f7ff fa3b 	bl	8003d18 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d302      	bcc.n	80048b4 <HAL_I2C_IsDeviceReady+0xd8>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10f      	bne.n	80048d4 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c0:	f043 0220 	orr.w	r2, r3, #32
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e088      	b.n	80049e6 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	f003 0320 	and.w	r3, r3, #32
 80048de:	2b20      	cmp	r3, #32
 80048e0:	bf0c      	ite	eq
 80048e2:	2301      	moveq	r3, #1
 80048e4:	2300      	movne	r3, #0
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	2b10      	cmp	r3, #16
 80048f6:	bf0c      	ite	eq
 80048f8:	2301      	moveq	r3, #1
 80048fa:	2300      	movne	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004900:	7ffb      	ldrb	r3, [r7, #31]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d102      	bne.n	800490c <HAL_I2C_IsDeviceReady+0x130>
 8004906:	7fbb      	ldrb	r3, [r7, #30]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0c4      	beq.n	8004896 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	2b10      	cmp	r3, #16
 8004918:	d01a      	beq.n	8004950 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2200      	movs	r2, #0
 8004922:	2120      	movs	r1, #32
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 f92f 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e058      	b.n	80049e6 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2220      	movs	r2, #32
 800493a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	e04a      	b.n	80049e6 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2200      	movs	r2, #0
 8004958:	2120      	movs	r1, #32
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 f914 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e03d      	b.n	80049e6 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2210      	movs	r2, #16
 8004970:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2220      	movs	r2, #32
 8004978:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	429a      	cmp	r2, r3
 8004980:	d118      	bne.n	80049b4 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004990:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2200      	movs	r2, #0
 800499a:	2120      	movs	r1, #32
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 f8f3 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e01c      	b.n	80049e6 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2220      	movs	r2, #32
 80049b2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	3301      	adds	r3, #1
 80049b8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	429a      	cmp	r2, r3
 80049c0:	f63f af39 	bhi.w	8004836 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d0:	f043 0220 	orr.w	r2, r3, #32
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e000      	b.n	80049e6 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80049e4:	2302      	movs	r3, #2
  }
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3720      	adds	r7, #32
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	4608      	mov	r0, r1
 80049fa:	4611      	mov	r1, r2
 80049fc:	461a      	mov	r2, r3
 80049fe:	4603      	mov	r3, r0
 8004a00:	817b      	strh	r3, [r7, #10]
 8004a02:	460b      	mov	r3, r1
 8004a04:	813b      	strh	r3, [r7, #8]
 8004a06:	4613      	mov	r3, r2
 8004a08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	8979      	ldrh	r1, [r7, #10]
 8004a10:	4b20      	ldr	r3, [pc, #128]	; (8004a94 <I2C_RequestMemoryWrite+0xa4>)
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 fa6f 	bl	8004efc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a1e:	69fa      	ldr	r2, [r7, #28]
 8004a20:	69b9      	ldr	r1, [r7, #24]
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 f8ff 	bl	8004c26 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e02c      	b.n	8004a8c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a32:	88fb      	ldrh	r3, [r7, #6]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d105      	bne.n	8004a44 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a38:	893b      	ldrh	r3, [r7, #8]
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	629a      	str	r2, [r3, #40]	; 0x28
 8004a42:	e015      	b.n	8004a70 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a44:	893b      	ldrh	r3, [r7, #8]
 8004a46:	0a1b      	lsrs	r3, r3, #8
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	69b9      	ldr	r1, [r7, #24]
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 f8e5 	bl	8004c26 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e012      	b.n	8004a8c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a66:	893b      	ldrh	r3, [r7, #8]
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	2200      	movs	r2, #0
 8004a78:	2180      	movs	r1, #128	; 0x80
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f884 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	80002000 	.word	0x80002000

08004a98 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	4608      	mov	r0, r1
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	817b      	strh	r3, [r7, #10]
 8004aaa:	460b      	mov	r3, r1
 8004aac:	813b      	strh	r3, [r7, #8]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004ab2:	88fb      	ldrh	r3, [r7, #6]
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	8979      	ldrh	r1, [r7, #10]
 8004ab8:	4b20      	ldr	r3, [pc, #128]	; (8004b3c <I2C_RequestMemoryRead+0xa4>)
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	2300      	movs	r3, #0
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 fa1c 	bl	8004efc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ac4:	69fa      	ldr	r2, [r7, #28]
 8004ac6:	69b9      	ldr	r1, [r7, #24]
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 f8ac 	bl	8004c26 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e02c      	b.n	8004b32 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ad8:	88fb      	ldrh	r3, [r7, #6]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d105      	bne.n	8004aea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ade:	893b      	ldrh	r3, [r7, #8]
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ae8:	e015      	b.n	8004b16 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004aea:	893b      	ldrh	r3, [r7, #8]
 8004aec:	0a1b      	lsrs	r3, r3, #8
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004af8:	69fa      	ldr	r2, [r7, #28]
 8004afa:	69b9      	ldr	r1, [r7, #24]
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 f892 	bl	8004c26 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e012      	b.n	8004b32 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b0c:	893b      	ldrh	r3, [r7, #8]
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2140      	movs	r1, #64	; 0x40
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 f831 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e000      	b.n	8004b32 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	80002000 	.word	0x80002000

08004b40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d103      	bne.n	8004b5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d007      	beq.n	8004b7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699a      	ldr	r2, [r3, #24]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0201 	orr.w	r2, r2, #1
 8004b7a:	619a      	str	r2, [r3, #24]
  }
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	4613      	mov	r3, r2
 8004b96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b98:	e031      	b.n	8004bfe <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba0:	d02d      	beq.n	8004bfe <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba2:	f7ff f8b9 	bl	8003d18 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d302      	bcc.n	8004bb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d122      	bne.n	8004bfe <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699a      	ldr	r2, [r3, #24]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	bf0c      	ite	eq
 8004bc8:	2301      	moveq	r3, #1
 8004bca:	2300      	movne	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	461a      	mov	r2, r3
 8004bd0:	79fb      	ldrb	r3, [r7, #7]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d113      	bne.n	8004bfe <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bda:	f043 0220 	orr.w	r2, r3, #32
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e00f      	b.n	8004c1e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	699a      	ldr	r2, [r3, #24]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	4013      	ands	r3, r2
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	bf0c      	ite	eq
 8004c0e:	2301      	moveq	r3, #1
 8004c10:	2300      	movne	r3, #0
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d0be      	beq.n	8004b9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b084      	sub	sp, #16
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	60f8      	str	r0, [r7, #12]
 8004c2e:	60b9      	str	r1, [r7, #8]
 8004c30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c32:	e033      	b.n	8004c9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f87f 	bl	8004d3c <I2C_IsErrorOccurred>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e031      	b.n	8004cac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4e:	d025      	beq.n	8004c9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c50:	f7ff f862 	bl	8003d18 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d302      	bcc.n	8004c66 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d11a      	bne.n	8004c9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d013      	beq.n	8004c9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c78:	f043 0220 	orr.w	r2, r3, #32
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e007      	b.n	8004cac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d1c4      	bne.n	8004c34 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cc0:	e02f      	b.n	8004d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	68b9      	ldr	r1, [r7, #8]
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 f838 	bl	8004d3c <I2C_IsErrorOccurred>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e02d      	b.n	8004d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd6:	f7ff f81f 	bl	8003d18 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d302      	bcc.n	8004cec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d11a      	bne.n	8004d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	f003 0320 	and.w	r3, r3, #32
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	d013      	beq.n	8004d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfe:	f043 0220 	orr.w	r2, r3, #32
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e007      	b.n	8004d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	f003 0320 	and.w	r3, r3, #32
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d1c8      	bne.n	8004cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08a      	sub	sp, #40	; 0x28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004d56:	2300      	movs	r3, #0
 8004d58:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	f003 0310 	and.w	r3, r3, #16
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d068      	beq.n	8004e3a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2210      	movs	r2, #16
 8004d6e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d70:	e049      	b.n	8004e06 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d78:	d045      	beq.n	8004e06 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d7a:	f7fe ffcd 	bl	8003d18 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d302      	bcc.n	8004d90 <I2C_IsErrorOccurred+0x54>
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d13a      	bne.n	8004e06 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004da2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004db2:	d121      	bne.n	8004df8 <I2C_IsErrorOccurred+0xbc>
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dba:	d01d      	beq.n	8004df8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004dbc:	7cfb      	ldrb	r3, [r7, #19]
 8004dbe:	2b20      	cmp	r3, #32
 8004dc0:	d01a      	beq.n	8004df8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dd0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004dd2:	f7fe ffa1 	bl	8003d18 <HAL_GetTick>
 8004dd6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dd8:	e00e      	b.n	8004df8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004dda:	f7fe ff9d 	bl	8003d18 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b19      	cmp	r3, #25
 8004de6:	d907      	bls.n	8004df8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	f043 0320 	orr.w	r3, r3, #32
 8004dee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004df6:	e006      	b.n	8004e06 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	d1e9      	bne.n	8004dda <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	f003 0320 	and.w	r3, r3, #32
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d003      	beq.n	8004e1c <I2C_IsErrorOccurred+0xe0>
 8004e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0aa      	beq.n	8004d72 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d103      	bne.n	8004e2c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	f043 0304 	orr.w	r3, r3, #4
 8004e32:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00b      	beq.n	8004e64 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00b      	beq.n	8004e86 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	f043 0308 	orr.w	r3, r3, #8
 8004e74:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00b      	beq.n	8004ea8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	f043 0302 	orr.w	r3, r3, #2
 8004e96:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ea0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d01c      	beq.n	8004eea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f7ff fe45 	bl	8004b40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6859      	ldr	r1, [r3, #4]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	4b0d      	ldr	r3, [pc, #52]	; (8004ef8 <I2C_IsErrorOccurred+0x1bc>)
 8004ec2:	400b      	ands	r3, r1
 8004ec4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3728      	adds	r7, #40	; 0x28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	fe00e800 	.word	0xfe00e800

08004efc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	607b      	str	r3, [r7, #4]
 8004f06:	460b      	mov	r3, r1
 8004f08:	817b      	strh	r3, [r7, #10]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f0e:	897b      	ldrh	r3, [r7, #10]
 8004f10:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f14:	7a7b      	ldrb	r3, [r7, #9]
 8004f16:	041b      	lsls	r3, r3, #16
 8004f18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f1c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f2a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	0d5b      	lsrs	r3, r3, #21
 8004f36:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004f3a:	4b08      	ldr	r3, [pc, #32]	; (8004f5c <I2C_TransferConfig+0x60>)
 8004f3c:	430b      	orrs	r3, r1
 8004f3e:	43db      	mvns	r3, r3
 8004f40:	ea02 0103 	and.w	r1, r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f4e:	bf00      	nop
 8004f50:	371c      	adds	r7, #28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	03ff63ff 	.word	0x03ff63ff

08004f60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b20      	cmp	r3, #32
 8004f74:	d138      	bne.n	8004fe8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d101      	bne.n	8004f84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f80:	2302      	movs	r3, #2
 8004f82:	e032      	b.n	8004fea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2224      	movs	r2, #36	; 0x24
 8004f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0201 	bic.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6819      	ldr	r1, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	e000      	b.n	8004fea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004fe8:	2302      	movs	r3, #2
  }
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b085      	sub	sp, #20
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b20      	cmp	r3, #32
 800500a:	d139      	bne.n	8005080 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005012:	2b01      	cmp	r3, #1
 8005014:	d101      	bne.n	800501a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005016:	2302      	movs	r3, #2
 8005018:	e033      	b.n	8005082 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2224      	movs	r2, #36	; 0x24
 8005026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0201 	bic.w	r2, r2, #1
 8005038:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005048:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	021b      	lsls	r3, r3, #8
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	4313      	orrs	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800507c:	2300      	movs	r3, #0
 800507e:	e000      	b.n	8005082 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005080:	2302      	movs	r3, #2
  }
}
 8005082:	4618      	mov	r0, r3
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
	...

08005090 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005094:	4b05      	ldr	r3, [pc, #20]	; (80050ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a04      	ldr	r2, [pc, #16]	; (80050ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800509a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800509e:	6013      	str	r3, [r2, #0]
}
 80050a0:	bf00      	nop
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40007000 	.word	0x40007000

080050b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80050b4:	4b04      	ldr	r3, [pc, #16]	; (80050c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80050bc:	4618      	mov	r0, r3
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40007000 	.word	0x40007000

080050cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050da:	d130      	bne.n	800513e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80050dc:	4b23      	ldr	r3, [pc, #140]	; (800516c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e8:	d038      	beq.n	800515c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050ea:	4b20      	ldr	r3, [pc, #128]	; (800516c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050f2:	4a1e      	ldr	r2, [pc, #120]	; (800516c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050fa:	4b1d      	ldr	r3, [pc, #116]	; (8005170 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2232      	movs	r2, #50	; 0x32
 8005100:	fb02 f303 	mul.w	r3, r2, r3
 8005104:	4a1b      	ldr	r2, [pc, #108]	; (8005174 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005106:	fba2 2303 	umull	r2, r3, r2, r3
 800510a:	0c9b      	lsrs	r3, r3, #18
 800510c:	3301      	adds	r3, #1
 800510e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005110:	e002      	b.n	8005118 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	3b01      	subs	r3, #1
 8005116:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005118:	4b14      	ldr	r3, [pc, #80]	; (800516c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005124:	d102      	bne.n	800512c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1f2      	bne.n	8005112 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800512c:	4b0f      	ldr	r3, [pc, #60]	; (800516c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005138:	d110      	bne.n	800515c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e00f      	b.n	800515e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800513e:	4b0b      	ldr	r3, [pc, #44]	; (800516c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800514a:	d007      	beq.n	800515c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800514c:	4b07      	ldr	r3, [pc, #28]	; (800516c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005154:	4a05      	ldr	r2, [pc, #20]	; (800516c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005156:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800515a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40007000 	.word	0x40007000
 8005170:	20000028 	.word	0x20000028
 8005174:	431bde83 	.word	0x431bde83

08005178 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b088      	sub	sp, #32
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d102      	bne.n	800518c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	f000 bc02 	b.w	8005990 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800518c:	4b96      	ldr	r3, [pc, #600]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f003 030c 	and.w	r3, r3, #12
 8005194:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005196:	4b94      	ldr	r3, [pc, #592]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0310 	and.w	r3, r3, #16
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 80e4 	beq.w	8005376 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d007      	beq.n	80051c4 <HAL_RCC_OscConfig+0x4c>
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	2b0c      	cmp	r3, #12
 80051b8:	f040 808b 	bne.w	80052d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	f040 8087 	bne.w	80052d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051c4:	4b88      	ldr	r3, [pc, #544]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_RCC_OscConfig+0x64>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e3d9      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a1a      	ldr	r2, [r3, #32]
 80051e0:	4b81      	ldr	r3, [pc, #516]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d004      	beq.n	80051f6 <HAL_RCC_OscConfig+0x7e>
 80051ec:	4b7e      	ldr	r3, [pc, #504]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051f4:	e005      	b.n	8005202 <HAL_RCC_OscConfig+0x8a>
 80051f6:	4b7c      	ldr	r3, [pc, #496]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 80051f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051fc:	091b      	lsrs	r3, r3, #4
 80051fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005202:	4293      	cmp	r3, r2
 8005204:	d223      	bcs.n	800524e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fd8c 	bl	8005d28 <RCC_SetFlashLatencyFromMSIRange>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e3ba      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800521a:	4b73      	ldr	r3, [pc, #460]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a72      	ldr	r2, [pc, #456]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 8005220:	f043 0308 	orr.w	r3, r3, #8
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	4b70      	ldr	r3, [pc, #448]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	496d      	ldr	r1, [pc, #436]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 8005234:	4313      	orrs	r3, r2
 8005236:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005238:	4b6b      	ldr	r3, [pc, #428]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	021b      	lsls	r3, r3, #8
 8005246:	4968      	ldr	r1, [pc, #416]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 8005248:	4313      	orrs	r3, r2
 800524a:	604b      	str	r3, [r1, #4]
 800524c:	e025      	b.n	800529a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800524e:	4b66      	ldr	r3, [pc, #408]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a65      	ldr	r2, [pc, #404]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 8005254:	f043 0308 	orr.w	r3, r3, #8
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	4b63      	ldr	r3, [pc, #396]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	4960      	ldr	r1, [pc, #384]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 8005268:	4313      	orrs	r3, r2
 800526a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800526c:	4b5e      	ldr	r3, [pc, #376]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	021b      	lsls	r3, r3, #8
 800527a:	495b      	ldr	r1, [pc, #364]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 800527c:	4313      	orrs	r3, r2
 800527e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d109      	bne.n	800529a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fd4c 	bl	8005d28 <RCC_SetFlashLatencyFromMSIRange>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e37a      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800529a:	f000 fc81 	bl	8005ba0 <HAL_RCC_GetSysClockFreq>
 800529e:	4602      	mov	r2, r0
 80052a0:	4b51      	ldr	r3, [pc, #324]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	091b      	lsrs	r3, r3, #4
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	4950      	ldr	r1, [pc, #320]	; (80053ec <HAL_RCC_OscConfig+0x274>)
 80052ac:	5ccb      	ldrb	r3, [r1, r3]
 80052ae:	f003 031f 	and.w	r3, r3, #31
 80052b2:	fa22 f303 	lsr.w	r3, r2, r3
 80052b6:	4a4e      	ldr	r2, [pc, #312]	; (80053f0 <HAL_RCC_OscConfig+0x278>)
 80052b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80052ba:	4b4e      	ldr	r3, [pc, #312]	; (80053f4 <HAL_RCC_OscConfig+0x27c>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fe fcda 	bl	8003c78 <HAL_InitTick>
 80052c4:	4603      	mov	r3, r0
 80052c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80052c8:	7bfb      	ldrb	r3, [r7, #15]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d052      	beq.n	8005374 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
 80052d0:	e35e      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d032      	beq.n	8005340 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80052da:	4b43      	ldr	r3, [pc, #268]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a42      	ldr	r2, [pc, #264]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 80052e0:	f043 0301 	orr.w	r3, r3, #1
 80052e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052e6:	f7fe fd17 	bl	8003d18 <HAL_GetTick>
 80052ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052ec:	e008      	b.n	8005300 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052ee:	f7fe fd13 	bl	8003d18 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d901      	bls.n	8005300 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e347      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005300:	4b39      	ldr	r3, [pc, #228]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d0f0      	beq.n	80052ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800530c:	4b36      	ldr	r3, [pc, #216]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a35      	ldr	r2, [pc, #212]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 8005312:	f043 0308 	orr.w	r3, r3, #8
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	4b33      	ldr	r3, [pc, #204]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	4930      	ldr	r1, [pc, #192]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 8005326:	4313      	orrs	r3, r2
 8005328:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800532a:	4b2f      	ldr	r3, [pc, #188]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	021b      	lsls	r3, r3, #8
 8005338:	492b      	ldr	r1, [pc, #172]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 800533a:	4313      	orrs	r3, r2
 800533c:	604b      	str	r3, [r1, #4]
 800533e:	e01a      	b.n	8005376 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005340:	4b29      	ldr	r3, [pc, #164]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a28      	ldr	r2, [pc, #160]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 8005346:	f023 0301 	bic.w	r3, r3, #1
 800534a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800534c:	f7fe fce4 	bl	8003d18 <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005354:	f7fe fce0 	bl	8003d18 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e314      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005366:	4b20      	ldr	r3, [pc, #128]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f0      	bne.n	8005354 <HAL_RCC_OscConfig+0x1dc>
 8005372:	e000      	b.n	8005376 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005374:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d073      	beq.n	800546a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	2b08      	cmp	r3, #8
 8005386:	d005      	beq.n	8005394 <HAL_RCC_OscConfig+0x21c>
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	2b0c      	cmp	r3, #12
 800538c:	d10e      	bne.n	80053ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b03      	cmp	r3, #3
 8005392:	d10b      	bne.n	80053ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005394:	4b14      	ldr	r3, [pc, #80]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d063      	beq.n	8005468 <HAL_RCC_OscConfig+0x2f0>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d15f      	bne.n	8005468 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e2f1      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b4:	d106      	bne.n	80053c4 <HAL_RCC_OscConfig+0x24c>
 80053b6:	4b0c      	ldr	r3, [pc, #48]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a0b      	ldr	r2, [pc, #44]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 80053bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	e025      	b.n	8005410 <HAL_RCC_OscConfig+0x298>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053cc:	d114      	bne.n	80053f8 <HAL_RCC_OscConfig+0x280>
 80053ce:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a05      	ldr	r2, [pc, #20]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 80053d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	4b03      	ldr	r3, [pc, #12]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a02      	ldr	r2, [pc, #8]	; (80053e8 <HAL_RCC_OscConfig+0x270>)
 80053e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	e013      	b.n	8005410 <HAL_RCC_OscConfig+0x298>
 80053e8:	40021000 	.word	0x40021000
 80053ec:	0800d248 	.word	0x0800d248
 80053f0:	20000028 	.word	0x20000028
 80053f4:	2000002c 	.word	0x2000002c
 80053f8:	4ba0      	ldr	r3, [pc, #640]	; (800567c <HAL_RCC_OscConfig+0x504>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a9f      	ldr	r2, [pc, #636]	; (800567c <HAL_RCC_OscConfig+0x504>)
 80053fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	4b9d      	ldr	r3, [pc, #628]	; (800567c <HAL_RCC_OscConfig+0x504>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a9c      	ldr	r2, [pc, #624]	; (800567c <HAL_RCC_OscConfig+0x504>)
 800540a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800540e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d013      	beq.n	8005440 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005418:	f7fe fc7e 	bl	8003d18 <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005420:	f7fe fc7a 	bl	8003d18 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b64      	cmp	r3, #100	; 0x64
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e2ae      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005432:	4b92      	ldr	r3, [pc, #584]	; (800567c <HAL_RCC_OscConfig+0x504>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d0f0      	beq.n	8005420 <HAL_RCC_OscConfig+0x2a8>
 800543e:	e014      	b.n	800546a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005440:	f7fe fc6a 	bl	8003d18 <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005448:	f7fe fc66 	bl	8003d18 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b64      	cmp	r3, #100	; 0x64
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e29a      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800545a:	4b88      	ldr	r3, [pc, #544]	; (800567c <HAL_RCC_OscConfig+0x504>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0x2d0>
 8005466:	e000      	b.n	800546a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d060      	beq.n	8005538 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	2b04      	cmp	r3, #4
 800547a:	d005      	beq.n	8005488 <HAL_RCC_OscConfig+0x310>
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	2b0c      	cmp	r3, #12
 8005480:	d119      	bne.n	80054b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2b02      	cmp	r3, #2
 8005486:	d116      	bne.n	80054b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005488:	4b7c      	ldr	r3, [pc, #496]	; (800567c <HAL_RCC_OscConfig+0x504>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005490:	2b00      	cmp	r3, #0
 8005492:	d005      	beq.n	80054a0 <HAL_RCC_OscConfig+0x328>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e277      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054a0:	4b76      	ldr	r3, [pc, #472]	; (800567c <HAL_RCC_OscConfig+0x504>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	061b      	lsls	r3, r3, #24
 80054ae:	4973      	ldr	r1, [pc, #460]	; (800567c <HAL_RCC_OscConfig+0x504>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054b4:	e040      	b.n	8005538 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d023      	beq.n	8005506 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054be:	4b6f      	ldr	r3, [pc, #444]	; (800567c <HAL_RCC_OscConfig+0x504>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a6e      	ldr	r2, [pc, #440]	; (800567c <HAL_RCC_OscConfig+0x504>)
 80054c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ca:	f7fe fc25 	bl	8003d18 <HAL_GetTick>
 80054ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054d0:	e008      	b.n	80054e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054d2:	f7fe fc21 	bl	8003d18 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d901      	bls.n	80054e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e255      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054e4:	4b65      	ldr	r3, [pc, #404]	; (800567c <HAL_RCC_OscConfig+0x504>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0f0      	beq.n	80054d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f0:	4b62      	ldr	r3, [pc, #392]	; (800567c <HAL_RCC_OscConfig+0x504>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	061b      	lsls	r3, r3, #24
 80054fe:	495f      	ldr	r1, [pc, #380]	; (800567c <HAL_RCC_OscConfig+0x504>)
 8005500:	4313      	orrs	r3, r2
 8005502:	604b      	str	r3, [r1, #4]
 8005504:	e018      	b.n	8005538 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005506:	4b5d      	ldr	r3, [pc, #372]	; (800567c <HAL_RCC_OscConfig+0x504>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a5c      	ldr	r2, [pc, #368]	; (800567c <HAL_RCC_OscConfig+0x504>)
 800550c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005512:	f7fe fc01 	bl	8003d18 <HAL_GetTick>
 8005516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005518:	e008      	b.n	800552c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800551a:	f7fe fbfd 	bl	8003d18 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b02      	cmp	r3, #2
 8005526:	d901      	bls.n	800552c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e231      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800552c:	4b53      	ldr	r3, [pc, #332]	; (800567c <HAL_RCC_OscConfig+0x504>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1f0      	bne.n	800551a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b00      	cmp	r3, #0
 8005542:	d03c      	beq.n	80055be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d01c      	beq.n	8005586 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800554c:	4b4b      	ldr	r3, [pc, #300]	; (800567c <HAL_RCC_OscConfig+0x504>)
 800554e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005552:	4a4a      	ldr	r2, [pc, #296]	; (800567c <HAL_RCC_OscConfig+0x504>)
 8005554:	f043 0301 	orr.w	r3, r3, #1
 8005558:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800555c:	f7fe fbdc 	bl	8003d18 <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005564:	f7fe fbd8 	bl	8003d18 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e20c      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005576:	4b41      	ldr	r3, [pc, #260]	; (800567c <HAL_RCC_OscConfig+0x504>)
 8005578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0ef      	beq.n	8005564 <HAL_RCC_OscConfig+0x3ec>
 8005584:	e01b      	b.n	80055be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005586:	4b3d      	ldr	r3, [pc, #244]	; (800567c <HAL_RCC_OscConfig+0x504>)
 8005588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800558c:	4a3b      	ldr	r2, [pc, #236]	; (800567c <HAL_RCC_OscConfig+0x504>)
 800558e:	f023 0301 	bic.w	r3, r3, #1
 8005592:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005596:	f7fe fbbf 	bl	8003d18 <HAL_GetTick>
 800559a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800559c:	e008      	b.n	80055b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800559e:	f7fe fbbb 	bl	8003d18 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d901      	bls.n	80055b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e1ef      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055b0:	4b32      	ldr	r3, [pc, #200]	; (800567c <HAL_RCC_OscConfig+0x504>)
 80055b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1ef      	bne.n	800559e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 80a6 	beq.w	8005718 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055cc:	2300      	movs	r3, #0
 80055ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80055d0:	4b2a      	ldr	r3, [pc, #168]	; (800567c <HAL_RCC_OscConfig+0x504>)
 80055d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10d      	bne.n	80055f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055dc:	4b27      	ldr	r3, [pc, #156]	; (800567c <HAL_RCC_OscConfig+0x504>)
 80055de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e0:	4a26      	ldr	r2, [pc, #152]	; (800567c <HAL_RCC_OscConfig+0x504>)
 80055e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e6:	6593      	str	r3, [r2, #88]	; 0x58
 80055e8:	4b24      	ldr	r3, [pc, #144]	; (800567c <HAL_RCC_OscConfig+0x504>)
 80055ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f0:	60bb      	str	r3, [r7, #8]
 80055f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055f4:	2301      	movs	r3, #1
 80055f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055f8:	4b21      	ldr	r3, [pc, #132]	; (8005680 <HAL_RCC_OscConfig+0x508>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005600:	2b00      	cmp	r3, #0
 8005602:	d118      	bne.n	8005636 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005604:	4b1e      	ldr	r3, [pc, #120]	; (8005680 <HAL_RCC_OscConfig+0x508>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a1d      	ldr	r2, [pc, #116]	; (8005680 <HAL_RCC_OscConfig+0x508>)
 800560a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800560e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005610:	f7fe fb82 	bl	8003d18 <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005618:	f7fe fb7e 	bl	8003d18 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b02      	cmp	r3, #2
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e1b2      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800562a:	4b15      	ldr	r3, [pc, #84]	; (8005680 <HAL_RCC_OscConfig+0x508>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005632:	2b00      	cmp	r3, #0
 8005634:	d0f0      	beq.n	8005618 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d108      	bne.n	8005650 <HAL_RCC_OscConfig+0x4d8>
 800563e:	4b0f      	ldr	r3, [pc, #60]	; (800567c <HAL_RCC_OscConfig+0x504>)
 8005640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005644:	4a0d      	ldr	r2, [pc, #52]	; (800567c <HAL_RCC_OscConfig+0x504>)
 8005646:	f043 0301 	orr.w	r3, r3, #1
 800564a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800564e:	e029      	b.n	80056a4 <HAL_RCC_OscConfig+0x52c>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	2b05      	cmp	r3, #5
 8005656:	d115      	bne.n	8005684 <HAL_RCC_OscConfig+0x50c>
 8005658:	4b08      	ldr	r3, [pc, #32]	; (800567c <HAL_RCC_OscConfig+0x504>)
 800565a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565e:	4a07      	ldr	r2, [pc, #28]	; (800567c <HAL_RCC_OscConfig+0x504>)
 8005660:	f043 0304 	orr.w	r3, r3, #4
 8005664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005668:	4b04      	ldr	r3, [pc, #16]	; (800567c <HAL_RCC_OscConfig+0x504>)
 800566a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566e:	4a03      	ldr	r2, [pc, #12]	; (800567c <HAL_RCC_OscConfig+0x504>)
 8005670:	f043 0301 	orr.w	r3, r3, #1
 8005674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005678:	e014      	b.n	80056a4 <HAL_RCC_OscConfig+0x52c>
 800567a:	bf00      	nop
 800567c:	40021000 	.word	0x40021000
 8005680:	40007000 	.word	0x40007000
 8005684:	4b9a      	ldr	r3, [pc, #616]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 8005686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568a:	4a99      	ldr	r2, [pc, #612]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 800568c:	f023 0301 	bic.w	r3, r3, #1
 8005690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005694:	4b96      	ldr	r3, [pc, #600]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 8005696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569a:	4a95      	ldr	r2, [pc, #596]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 800569c:	f023 0304 	bic.w	r3, r3, #4
 80056a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d016      	beq.n	80056da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ac:	f7fe fb34 	bl	8003d18 <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056b2:	e00a      	b.n	80056ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056b4:	f7fe fb30 	bl	8003d18 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e162      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056ca:	4b89      	ldr	r3, [pc, #548]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 80056cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0ed      	beq.n	80056b4 <HAL_RCC_OscConfig+0x53c>
 80056d8:	e015      	b.n	8005706 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056da:	f7fe fb1d 	bl	8003d18 <HAL_GetTick>
 80056de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056e0:	e00a      	b.n	80056f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e2:	f7fe fb19 	bl	8003d18 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d901      	bls.n	80056f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e14b      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056f8:	4b7d      	ldr	r3, [pc, #500]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 80056fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1ed      	bne.n	80056e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005706:	7ffb      	ldrb	r3, [r7, #31]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d105      	bne.n	8005718 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800570c:	4b78      	ldr	r3, [pc, #480]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 800570e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005710:	4a77      	ldr	r2, [pc, #476]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 8005712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005716:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0320 	and.w	r3, r3, #32
 8005720:	2b00      	cmp	r3, #0
 8005722:	d03c      	beq.n	800579e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	2b00      	cmp	r3, #0
 800572a:	d01c      	beq.n	8005766 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800572c:	4b70      	ldr	r3, [pc, #448]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 800572e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005732:	4a6f      	ldr	r2, [pc, #444]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 8005734:	f043 0301 	orr.w	r3, r3, #1
 8005738:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800573c:	f7fe faec 	bl	8003d18 <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005742:	e008      	b.n	8005756 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005744:	f7fe fae8 	bl	8003d18 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e11c      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005756:	4b66      	ldr	r3, [pc, #408]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 8005758:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0ef      	beq.n	8005744 <HAL_RCC_OscConfig+0x5cc>
 8005764:	e01b      	b.n	800579e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005766:	4b62      	ldr	r3, [pc, #392]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 8005768:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800576c:	4a60      	ldr	r2, [pc, #384]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 800576e:	f023 0301 	bic.w	r3, r3, #1
 8005772:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005776:	f7fe facf 	bl	8003d18 <HAL_GetTick>
 800577a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800577c:	e008      	b.n	8005790 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800577e:	f7fe facb 	bl	8003d18 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d901      	bls.n	8005790 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e0ff      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005790:	4b57      	ldr	r3, [pc, #348]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 8005792:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1ef      	bne.n	800577e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 80f3 	beq.w	800598e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	f040 80c9 	bne.w	8005944 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80057b2:	4b4f      	ldr	r3, [pc, #316]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f003 0203 	and.w	r2, r3, #3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d12c      	bne.n	8005820 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d0:	3b01      	subs	r3, #1
 80057d2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d123      	bne.n	8005820 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d11b      	bne.n	8005820 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d113      	bne.n	8005820 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005802:	085b      	lsrs	r3, r3, #1
 8005804:	3b01      	subs	r3, #1
 8005806:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005808:	429a      	cmp	r2, r3
 800580a:	d109      	bne.n	8005820 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005816:	085b      	lsrs	r3, r3, #1
 8005818:	3b01      	subs	r3, #1
 800581a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800581c:	429a      	cmp	r2, r3
 800581e:	d06b      	beq.n	80058f8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	2b0c      	cmp	r3, #12
 8005824:	d062      	beq.n	80058ec <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005826:	4b32      	ldr	r3, [pc, #200]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e0ac      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005836:	4b2e      	ldr	r3, [pc, #184]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a2d      	ldr	r2, [pc, #180]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 800583c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005840:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005842:	f7fe fa69 	bl	8003d18 <HAL_GetTick>
 8005846:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005848:	e008      	b.n	800585c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800584a:	f7fe fa65 	bl	8003d18 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d901      	bls.n	800585c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e099      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800585c:	4b24      	ldr	r3, [pc, #144]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1f0      	bne.n	800584a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005868:	4b21      	ldr	r3, [pc, #132]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 800586a:	68da      	ldr	r2, [r3, #12]
 800586c:	4b21      	ldr	r3, [pc, #132]	; (80058f4 <HAL_RCC_OscConfig+0x77c>)
 800586e:	4013      	ands	r3, r2
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005878:	3a01      	subs	r2, #1
 800587a:	0112      	lsls	r2, r2, #4
 800587c:	4311      	orrs	r1, r2
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005882:	0212      	lsls	r2, r2, #8
 8005884:	4311      	orrs	r1, r2
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800588a:	0852      	lsrs	r2, r2, #1
 800588c:	3a01      	subs	r2, #1
 800588e:	0552      	lsls	r2, r2, #21
 8005890:	4311      	orrs	r1, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005896:	0852      	lsrs	r2, r2, #1
 8005898:	3a01      	subs	r2, #1
 800589a:	0652      	lsls	r2, r2, #25
 800589c:	4311      	orrs	r1, r2
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058a2:	06d2      	lsls	r2, r2, #27
 80058a4:	430a      	orrs	r2, r1
 80058a6:	4912      	ldr	r1, [pc, #72]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80058ac:	4b10      	ldr	r3, [pc, #64]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a0f      	ldr	r2, [pc, #60]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 80058b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058b8:	4b0d      	ldr	r3, [pc, #52]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	4a0c      	ldr	r2, [pc, #48]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 80058be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058c4:	f7fe fa28 	bl	8003d18 <HAL_GetTick>
 80058c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058cc:	f7fe fa24 	bl	8003d18 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e058      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058de:	4b04      	ldr	r3, [pc, #16]	; (80058f0 <HAL_RCC_OscConfig+0x778>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0f0      	beq.n	80058cc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058ea:	e050      	b.n	800598e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e04f      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
 80058f0:	40021000 	.word	0x40021000
 80058f4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058f8:	4b27      	ldr	r3, [pc, #156]	; (8005998 <HAL_RCC_OscConfig+0x820>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d144      	bne.n	800598e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005904:	4b24      	ldr	r3, [pc, #144]	; (8005998 <HAL_RCC_OscConfig+0x820>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a23      	ldr	r2, [pc, #140]	; (8005998 <HAL_RCC_OscConfig+0x820>)
 800590a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800590e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005910:	4b21      	ldr	r3, [pc, #132]	; (8005998 <HAL_RCC_OscConfig+0x820>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	4a20      	ldr	r2, [pc, #128]	; (8005998 <HAL_RCC_OscConfig+0x820>)
 8005916:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800591a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800591c:	f7fe f9fc 	bl	8003d18 <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005924:	f7fe f9f8 	bl	8003d18 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e02c      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005936:	4b18      	ldr	r3, [pc, #96]	; (8005998 <HAL_RCC_OscConfig+0x820>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d0f0      	beq.n	8005924 <HAL_RCC_OscConfig+0x7ac>
 8005942:	e024      	b.n	800598e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	2b0c      	cmp	r3, #12
 8005948:	d01f      	beq.n	800598a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800594a:	4b13      	ldr	r3, [pc, #76]	; (8005998 <HAL_RCC_OscConfig+0x820>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a12      	ldr	r2, [pc, #72]	; (8005998 <HAL_RCC_OscConfig+0x820>)
 8005950:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005956:	f7fe f9df 	bl	8003d18 <HAL_GetTick>
 800595a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800595c:	e008      	b.n	8005970 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800595e:	f7fe f9db 	bl	8003d18 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d901      	bls.n	8005970 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e00f      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005970:	4b09      	ldr	r3, [pc, #36]	; (8005998 <HAL_RCC_OscConfig+0x820>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1f0      	bne.n	800595e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800597c:	4b06      	ldr	r3, [pc, #24]	; (8005998 <HAL_RCC_OscConfig+0x820>)
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	4905      	ldr	r1, [pc, #20]	; (8005998 <HAL_RCC_OscConfig+0x820>)
 8005982:	4b06      	ldr	r3, [pc, #24]	; (800599c <HAL_RCC_OscConfig+0x824>)
 8005984:	4013      	ands	r3, r2
 8005986:	60cb      	str	r3, [r1, #12]
 8005988:	e001      	b.n	800598e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e000      	b.n	8005990 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3720      	adds	r7, #32
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40021000 	.word	0x40021000
 800599c:	feeefffc 	.word	0xfeeefffc

080059a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e0e7      	b.n	8005b84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059b4:	4b75      	ldr	r3, [pc, #468]	; (8005b8c <HAL_RCC_ClockConfig+0x1ec>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d910      	bls.n	80059e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059c2:	4b72      	ldr	r3, [pc, #456]	; (8005b8c <HAL_RCC_ClockConfig+0x1ec>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f023 0207 	bic.w	r2, r3, #7
 80059ca:	4970      	ldr	r1, [pc, #448]	; (8005b8c <HAL_RCC_ClockConfig+0x1ec>)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059d2:	4b6e      	ldr	r3, [pc, #440]	; (8005b8c <HAL_RCC_ClockConfig+0x1ec>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0307 	and.w	r3, r3, #7
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d001      	beq.n	80059e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e0cf      	b.n	8005b84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0302 	and.w	r3, r3, #2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d010      	beq.n	8005a12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	4b66      	ldr	r3, [pc, #408]	; (8005b90 <HAL_RCC_ClockConfig+0x1f0>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d908      	bls.n	8005a12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a00:	4b63      	ldr	r3, [pc, #396]	; (8005b90 <HAL_RCC_ClockConfig+0x1f0>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	4960      	ldr	r1, [pc, #384]	; (8005b90 <HAL_RCC_ClockConfig+0x1f0>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d04c      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	d107      	bne.n	8005a36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a26:	4b5a      	ldr	r3, [pc, #360]	; (8005b90 <HAL_RCC_ClockConfig+0x1f0>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d121      	bne.n	8005a76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e0a6      	b.n	8005b84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d107      	bne.n	8005a4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a3e:	4b54      	ldr	r3, [pc, #336]	; (8005b90 <HAL_RCC_ClockConfig+0x1f0>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d115      	bne.n	8005a76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e09a      	b.n	8005b84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d107      	bne.n	8005a66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a56:	4b4e      	ldr	r3, [pc, #312]	; (8005b90 <HAL_RCC_ClockConfig+0x1f0>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d109      	bne.n	8005a76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e08e      	b.n	8005b84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a66:	4b4a      	ldr	r3, [pc, #296]	; (8005b90 <HAL_RCC_ClockConfig+0x1f0>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e086      	b.n	8005b84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a76:	4b46      	ldr	r3, [pc, #280]	; (8005b90 <HAL_RCC_ClockConfig+0x1f0>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f023 0203 	bic.w	r2, r3, #3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	4943      	ldr	r1, [pc, #268]	; (8005b90 <HAL_RCC_ClockConfig+0x1f0>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a88:	f7fe f946 	bl	8003d18 <HAL_GetTick>
 8005a8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a8e:	e00a      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a90:	f7fe f942 	bl	8003d18 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e06e      	b.n	8005b84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aa6:	4b3a      	ldr	r3, [pc, #232]	; (8005b90 <HAL_RCC_ClockConfig+0x1f0>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f003 020c 	and.w	r2, r3, #12
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d1eb      	bne.n	8005a90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d010      	beq.n	8005ae6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	4b31      	ldr	r3, [pc, #196]	; (8005b90 <HAL_RCC_ClockConfig+0x1f0>)
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d208      	bcs.n	8005ae6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ad4:	4b2e      	ldr	r3, [pc, #184]	; (8005b90 <HAL_RCC_ClockConfig+0x1f0>)
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	492b      	ldr	r1, [pc, #172]	; (8005b90 <HAL_RCC_ClockConfig+0x1f0>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ae6:	4b29      	ldr	r3, [pc, #164]	; (8005b8c <HAL_RCC_ClockConfig+0x1ec>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0307 	and.w	r3, r3, #7
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d210      	bcs.n	8005b16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005af4:	4b25      	ldr	r3, [pc, #148]	; (8005b8c <HAL_RCC_ClockConfig+0x1ec>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f023 0207 	bic.w	r2, r3, #7
 8005afc:	4923      	ldr	r1, [pc, #140]	; (8005b8c <HAL_RCC_ClockConfig+0x1ec>)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b04:	4b21      	ldr	r3, [pc, #132]	; (8005b8c <HAL_RCC_ClockConfig+0x1ec>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d001      	beq.n	8005b16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e036      	b.n	8005b84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0304 	and.w	r3, r3, #4
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d008      	beq.n	8005b34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b22:	4b1b      	ldr	r3, [pc, #108]	; (8005b90 <HAL_RCC_ClockConfig+0x1f0>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	4918      	ldr	r1, [pc, #96]	; (8005b90 <HAL_RCC_ClockConfig+0x1f0>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0308 	and.w	r3, r3, #8
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d009      	beq.n	8005b54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b40:	4b13      	ldr	r3, [pc, #76]	; (8005b90 <HAL_RCC_ClockConfig+0x1f0>)
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	00db      	lsls	r3, r3, #3
 8005b4e:	4910      	ldr	r1, [pc, #64]	; (8005b90 <HAL_RCC_ClockConfig+0x1f0>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b54:	f000 f824 	bl	8005ba0 <HAL_RCC_GetSysClockFreq>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	4b0d      	ldr	r3, [pc, #52]	; (8005b90 <HAL_RCC_ClockConfig+0x1f0>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	091b      	lsrs	r3, r3, #4
 8005b60:	f003 030f 	and.w	r3, r3, #15
 8005b64:	490b      	ldr	r1, [pc, #44]	; (8005b94 <HAL_RCC_ClockConfig+0x1f4>)
 8005b66:	5ccb      	ldrb	r3, [r1, r3]
 8005b68:	f003 031f 	and.w	r3, r3, #31
 8005b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b70:	4a09      	ldr	r2, [pc, #36]	; (8005b98 <HAL_RCC_ClockConfig+0x1f8>)
 8005b72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005b74:	4b09      	ldr	r3, [pc, #36]	; (8005b9c <HAL_RCC_ClockConfig+0x1fc>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fe f87d 	bl	8003c78 <HAL_InitTick>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	72fb      	strb	r3, [r7, #11]

  return status;
 8005b82:	7afb      	ldrb	r3, [r7, #11]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	40022000 	.word	0x40022000
 8005b90:	40021000 	.word	0x40021000
 8005b94:	0800d248 	.word	0x0800d248
 8005b98:	20000028 	.word	0x20000028
 8005b9c:	2000002c 	.word	0x2000002c

08005ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b089      	sub	sp, #36	; 0x24
 8005ba4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61fb      	str	r3, [r7, #28]
 8005baa:	2300      	movs	r3, #0
 8005bac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bae:	4b3e      	ldr	r3, [pc, #248]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f003 030c 	and.w	r3, r3, #12
 8005bb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bb8:	4b3b      	ldr	r3, [pc, #236]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f003 0303 	and.w	r3, r3, #3
 8005bc0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d005      	beq.n	8005bd4 <HAL_RCC_GetSysClockFreq+0x34>
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	2b0c      	cmp	r3, #12
 8005bcc:	d121      	bne.n	8005c12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d11e      	bne.n	8005c12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005bd4:	4b34      	ldr	r3, [pc, #208]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0308 	and.w	r3, r3, #8
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d107      	bne.n	8005bf0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005be0:	4b31      	ldr	r3, [pc, #196]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005be6:	0a1b      	lsrs	r3, r3, #8
 8005be8:	f003 030f 	and.w	r3, r3, #15
 8005bec:	61fb      	str	r3, [r7, #28]
 8005bee:	e005      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005bf0:	4b2d      	ldr	r3, [pc, #180]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	091b      	lsrs	r3, r3, #4
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005bfc:	4a2b      	ldr	r2, [pc, #172]	; (8005cac <HAL_RCC_GetSysClockFreq+0x10c>)
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10d      	bne.n	8005c28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c10:	e00a      	b.n	8005c28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	2b04      	cmp	r3, #4
 8005c16:	d102      	bne.n	8005c1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c18:	4b25      	ldr	r3, [pc, #148]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c1a:	61bb      	str	r3, [r7, #24]
 8005c1c:	e004      	b.n	8005c28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d101      	bne.n	8005c28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c24:	4b23      	ldr	r3, [pc, #140]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	2b0c      	cmp	r3, #12
 8005c2c:	d134      	bne.n	8005c98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c2e:	4b1e      	ldr	r3, [pc, #120]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f003 0303 	and.w	r3, r3, #3
 8005c36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d003      	beq.n	8005c46 <HAL_RCC_GetSysClockFreq+0xa6>
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d003      	beq.n	8005c4c <HAL_RCC_GetSysClockFreq+0xac>
 8005c44:	e005      	b.n	8005c52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005c46:	4b1a      	ldr	r3, [pc, #104]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c48:	617b      	str	r3, [r7, #20]
      break;
 8005c4a:	e005      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005c4c:	4b19      	ldr	r3, [pc, #100]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c4e:	617b      	str	r3, [r7, #20]
      break;
 8005c50:	e002      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	617b      	str	r3, [r7, #20]
      break;
 8005c56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c58:	4b13      	ldr	r3, [pc, #76]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	091b      	lsrs	r3, r3, #4
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	3301      	adds	r3, #1
 8005c64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005c66:	4b10      	ldr	r3, [pc, #64]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	0a1b      	lsrs	r3, r3, #8
 8005c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	fb03 f202 	mul.w	r2, r3, r2
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	0e5b      	lsrs	r3, r3, #25
 8005c84:	f003 0303 	and.w	r3, r3, #3
 8005c88:	3301      	adds	r3, #1
 8005c8a:	005b      	lsls	r3, r3, #1
 8005c8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005c98:	69bb      	ldr	r3, [r7, #24]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3724      	adds	r7, #36	; 0x24
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	0800d260 	.word	0x0800d260
 8005cb0:	00f42400 	.word	0x00f42400
 8005cb4:	007a1200 	.word	0x007a1200

08005cb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cbc:	4b03      	ldr	r3, [pc, #12]	; (8005ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	20000028 	.word	0x20000028

08005cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005cd4:	f7ff fff0 	bl	8005cb8 <HAL_RCC_GetHCLKFreq>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	4b06      	ldr	r3, [pc, #24]	; (8005cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	0a1b      	lsrs	r3, r3, #8
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	4904      	ldr	r1, [pc, #16]	; (8005cf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ce6:	5ccb      	ldrb	r3, [r1, r3]
 8005ce8:	f003 031f 	and.w	r3, r3, #31
 8005cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	0800d258 	.word	0x0800d258

08005cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d00:	f7ff ffda 	bl	8005cb8 <HAL_RCC_GetHCLKFreq>
 8005d04:	4602      	mov	r2, r0
 8005d06:	4b06      	ldr	r3, [pc, #24]	; (8005d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	0adb      	lsrs	r3, r3, #11
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	4904      	ldr	r1, [pc, #16]	; (8005d24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d12:	5ccb      	ldrb	r3, [r1, r3]
 8005d14:	f003 031f 	and.w	r3, r3, #31
 8005d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	40021000 	.word	0x40021000
 8005d24:	0800d258 	.word	0x0800d258

08005d28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005d30:	2300      	movs	r3, #0
 8005d32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d34:	4b2a      	ldr	r3, [pc, #168]	; (8005de0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d40:	f7ff f9b6 	bl	80050b0 <HAL_PWREx_GetVoltageRange>
 8005d44:	6178      	str	r0, [r7, #20]
 8005d46:	e014      	b.n	8005d72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d48:	4b25      	ldr	r3, [pc, #148]	; (8005de0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4c:	4a24      	ldr	r2, [pc, #144]	; (8005de0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d52:	6593      	str	r3, [r2, #88]	; 0x58
 8005d54:	4b22      	ldr	r3, [pc, #136]	; (8005de0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d60:	f7ff f9a6 	bl	80050b0 <HAL_PWREx_GetVoltageRange>
 8005d64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d66:	4b1e      	ldr	r3, [pc, #120]	; (8005de0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d6a:	4a1d      	ldr	r2, [pc, #116]	; (8005de0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d78:	d10b      	bne.n	8005d92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b80      	cmp	r3, #128	; 0x80
 8005d7e:	d919      	bls.n	8005db4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2ba0      	cmp	r3, #160	; 0xa0
 8005d84:	d902      	bls.n	8005d8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d86:	2302      	movs	r3, #2
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	e013      	b.n	8005db4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	613b      	str	r3, [r7, #16]
 8005d90:	e010      	b.n	8005db4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b80      	cmp	r3, #128	; 0x80
 8005d96:	d902      	bls.n	8005d9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005d98:	2303      	movs	r3, #3
 8005d9a:	613b      	str	r3, [r7, #16]
 8005d9c:	e00a      	b.n	8005db4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b80      	cmp	r3, #128	; 0x80
 8005da2:	d102      	bne.n	8005daa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005da4:	2302      	movs	r3, #2
 8005da6:	613b      	str	r3, [r7, #16]
 8005da8:	e004      	b.n	8005db4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b70      	cmp	r3, #112	; 0x70
 8005dae:	d101      	bne.n	8005db4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005db0:	2301      	movs	r3, #1
 8005db2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005db4:	4b0b      	ldr	r3, [pc, #44]	; (8005de4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f023 0207 	bic.w	r2, r3, #7
 8005dbc:	4909      	ldr	r1, [pc, #36]	; (8005de4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005dc4:	4b07      	ldr	r3, [pc, #28]	; (8005de4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0307 	and.w	r3, r3, #7
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d001      	beq.n	8005dd6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e000      	b.n	8005dd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	40021000 	.word	0x40021000
 8005de4:	40022000 	.word	0x40022000

08005de8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005df0:	2300      	movs	r3, #0
 8005df2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005df4:	2300      	movs	r3, #0
 8005df6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d031      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e0c:	d01a      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005e0e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e12:	d814      	bhi.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d009      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005e18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e1c:	d10f      	bne.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005e1e:	4b5d      	ldr	r3, [pc, #372]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	4a5c      	ldr	r2, [pc, #368]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e28:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e2a:	e00c      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3304      	adds	r3, #4
 8005e30:	2100      	movs	r1, #0
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 f9de 	bl	80061f4 <RCCEx_PLLSAI1_Config>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e3c:	e003      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	74fb      	strb	r3, [r7, #19]
      break;
 8005e42:	e000      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005e44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e46:	7cfb      	ldrb	r3, [r7, #19]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10b      	bne.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e4c:	4b51      	ldr	r3, [pc, #324]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5a:	494e      	ldr	r1, [pc, #312]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005e62:	e001      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e64:	7cfb      	ldrb	r3, [r7, #19]
 8005e66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 809e 	beq.w	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e76:	2300      	movs	r3, #0
 8005e78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e7a:	4b46      	ldr	r3, [pc, #280]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005e86:	2301      	movs	r3, #1
 8005e88:	e000      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00d      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e90:	4b40      	ldr	r3, [pc, #256]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e94:	4a3f      	ldr	r2, [pc, #252]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e9a:	6593      	str	r3, [r2, #88]	; 0x58
 8005e9c:	4b3d      	ldr	r3, [pc, #244]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea4:	60bb      	str	r3, [r7, #8]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005eac:	4b3a      	ldr	r3, [pc, #232]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a39      	ldr	r2, [pc, #228]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005eb8:	f7fd ff2e 	bl	8003d18 <HAL_GetTick>
 8005ebc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ebe:	e009      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ec0:	f7fd ff2a 	bl	8003d18 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d902      	bls.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	74fb      	strb	r3, [r7, #19]
        break;
 8005ed2:	e005      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ed4:	4b30      	ldr	r3, [pc, #192]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0ef      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005ee0:	7cfb      	ldrb	r3, [r7, #19]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d15a      	bne.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ee6:	4b2b      	ldr	r3, [pc, #172]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ef0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d01e      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d019      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f02:	4b24      	ldr	r3, [pc, #144]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f0c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f0e:	4b21      	ldr	r3, [pc, #132]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f14:	4a1f      	ldr	r2, [pc, #124]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f1e:	4b1d      	ldr	r3, [pc, #116]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f24:	4a1b      	ldr	r2, [pc, #108]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f2e:	4a19      	ldr	r2, [pc, #100]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d016      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f40:	f7fd feea 	bl	8003d18 <HAL_GetTick>
 8005f44:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f46:	e00b      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f48:	f7fd fee6 	bl	8003d18 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d902      	bls.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	74fb      	strb	r3, [r7, #19]
            break;
 8005f5e:	e006      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f60:	4b0c      	ldr	r3, [pc, #48]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d0ec      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005f6e:	7cfb      	ldrb	r3, [r7, #19]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10b      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f74:	4b07      	ldr	r3, [pc, #28]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f82:	4904      	ldr	r1, [pc, #16]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005f8a:	e009      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f8c:	7cfb      	ldrb	r3, [r7, #19]
 8005f8e:	74bb      	strb	r3, [r7, #18]
 8005f90:	e006      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005f92:	bf00      	nop
 8005f94:	40021000 	.word	0x40021000
 8005f98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f9c:	7cfb      	ldrb	r3, [r7, #19]
 8005f9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fa0:	7c7b      	ldrb	r3, [r7, #17]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d105      	bne.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fa6:	4b8a      	ldr	r3, [pc, #552]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005faa:	4a89      	ldr	r2, [pc, #548]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fb0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00a      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fbe:	4b84      	ldr	r3, [pc, #528]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc4:	f023 0203 	bic.w	r2, r3, #3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	4980      	ldr	r1, [pc, #512]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00a      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fe0:	4b7b      	ldr	r3, [pc, #492]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe6:	f023 020c 	bic.w	r2, r3, #12
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	4978      	ldr	r1, [pc, #480]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00a      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006002:	4b73      	ldr	r3, [pc, #460]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006008:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006010:	496f      	ldr	r1, [pc, #444]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006012:	4313      	orrs	r3, r2
 8006014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00a      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006024:	4b6a      	ldr	r3, [pc, #424]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800602a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006032:	4967      	ldr	r1, [pc, #412]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006034:	4313      	orrs	r3, r2
 8006036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00a      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006046:	4b62      	ldr	r3, [pc, #392]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800604c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006054:	495e      	ldr	r1, [pc, #376]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006056:	4313      	orrs	r3, r2
 8006058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00a      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006068:	4b59      	ldr	r3, [pc, #356]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800606a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800606e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006076:	4956      	ldr	r1, [pc, #344]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006078:	4313      	orrs	r3, r2
 800607a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00a      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800608a:	4b51      	ldr	r3, [pc, #324]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800608c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006090:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006098:	494d      	ldr	r1, [pc, #308]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800609a:	4313      	orrs	r3, r2
 800609c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d028      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060ac:	4b48      	ldr	r3, [pc, #288]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	4945      	ldr	r1, [pc, #276]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060ca:	d106      	bne.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060cc:	4b40      	ldr	r3, [pc, #256]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	4a3f      	ldr	r2, [pc, #252]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060d6:	60d3      	str	r3, [r2, #12]
 80060d8:	e011      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060e2:	d10c      	bne.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	3304      	adds	r3, #4
 80060e8:	2101      	movs	r1, #1
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 f882 	bl	80061f4 <RCCEx_PLLSAI1_Config>
 80060f0:	4603      	mov	r3, r0
 80060f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80060f4:	7cfb      	ldrb	r3, [r7, #19]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80060fa:	7cfb      	ldrb	r3, [r7, #19]
 80060fc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d028      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800610a:	4b31      	ldr	r3, [pc, #196]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800610c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006110:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006118:	492d      	ldr	r1, [pc, #180]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800611a:	4313      	orrs	r3, r2
 800611c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006124:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006128:	d106      	bne.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800612a:	4b29      	ldr	r3, [pc, #164]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	4a28      	ldr	r2, [pc, #160]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006130:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006134:	60d3      	str	r3, [r2, #12]
 8006136:	e011      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006140:	d10c      	bne.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	3304      	adds	r3, #4
 8006146:	2101      	movs	r1, #1
 8006148:	4618      	mov	r0, r3
 800614a:	f000 f853 	bl	80061f4 <RCCEx_PLLSAI1_Config>
 800614e:	4603      	mov	r3, r0
 8006150:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006152:	7cfb      	ldrb	r3, [r7, #19]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006158:	7cfb      	ldrb	r3, [r7, #19]
 800615a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d01c      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006168:	4b19      	ldr	r3, [pc, #100]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800616a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006176:	4916      	ldr	r1, [pc, #88]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006178:	4313      	orrs	r3, r2
 800617a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006182:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006186:	d10c      	bne.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3304      	adds	r3, #4
 800618c:	2102      	movs	r1, #2
 800618e:	4618      	mov	r0, r3
 8006190:	f000 f830 	bl	80061f4 <RCCEx_PLLSAI1_Config>
 8006194:	4603      	mov	r3, r0
 8006196:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006198:	7cfb      	ldrb	r3, [r7, #19]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800619e:	7cfb      	ldrb	r3, [r7, #19]
 80061a0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80061ae:	4b08      	ldr	r3, [pc, #32]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061bc:	4904      	ldr	r1, [pc, #16]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80061c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	40021000 	.word	0x40021000

080061d4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80061d4:	b480      	push	{r7}
 80061d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80061d8:	4b05      	ldr	r3, [pc, #20]	; (80061f0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a04      	ldr	r2, [pc, #16]	; (80061f0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80061de:	f043 0304 	orr.w	r3, r3, #4
 80061e2:	6013      	str	r3, [r2, #0]
}
 80061e4:	bf00      	nop
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	40021000 	.word	0x40021000

080061f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006202:	4b74      	ldr	r3, [pc, #464]	; (80063d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f003 0303 	and.w	r3, r3, #3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d018      	beq.n	8006240 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800620e:	4b71      	ldr	r3, [pc, #452]	; (80063d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f003 0203 	and.w	r2, r3, #3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	429a      	cmp	r2, r3
 800621c:	d10d      	bne.n	800623a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
       ||
 8006222:	2b00      	cmp	r3, #0
 8006224:	d009      	beq.n	800623a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006226:	4b6b      	ldr	r3, [pc, #428]	; (80063d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	091b      	lsrs	r3, r3, #4
 800622c:	f003 0307 	and.w	r3, r3, #7
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
       ||
 8006236:	429a      	cmp	r2, r3
 8006238:	d047      	beq.n	80062ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	73fb      	strb	r3, [r7, #15]
 800623e:	e044      	b.n	80062ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b03      	cmp	r3, #3
 8006246:	d018      	beq.n	800627a <RCCEx_PLLSAI1_Config+0x86>
 8006248:	2b03      	cmp	r3, #3
 800624a:	d825      	bhi.n	8006298 <RCCEx_PLLSAI1_Config+0xa4>
 800624c:	2b01      	cmp	r3, #1
 800624e:	d002      	beq.n	8006256 <RCCEx_PLLSAI1_Config+0x62>
 8006250:	2b02      	cmp	r3, #2
 8006252:	d009      	beq.n	8006268 <RCCEx_PLLSAI1_Config+0x74>
 8006254:	e020      	b.n	8006298 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006256:	4b5f      	ldr	r3, [pc, #380]	; (80063d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d11d      	bne.n	800629e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006266:	e01a      	b.n	800629e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006268:	4b5a      	ldr	r3, [pc, #360]	; (80063d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006270:	2b00      	cmp	r3, #0
 8006272:	d116      	bne.n	80062a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006278:	e013      	b.n	80062a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800627a:	4b56      	ldr	r3, [pc, #344]	; (80063d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10f      	bne.n	80062a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006286:	4b53      	ldr	r3, [pc, #332]	; (80063d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d109      	bne.n	80062a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006296:	e006      	b.n	80062a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	73fb      	strb	r3, [r7, #15]
      break;
 800629c:	e004      	b.n	80062a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800629e:	bf00      	nop
 80062a0:	e002      	b.n	80062a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062a2:	bf00      	nop
 80062a4:	e000      	b.n	80062a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10d      	bne.n	80062ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80062ae:	4b49      	ldr	r3, [pc, #292]	; (80063d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6819      	ldr	r1, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	3b01      	subs	r3, #1
 80062c0:	011b      	lsls	r3, r3, #4
 80062c2:	430b      	orrs	r3, r1
 80062c4:	4943      	ldr	r1, [pc, #268]	; (80063d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d17c      	bne.n	80063ca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80062d0:	4b40      	ldr	r3, [pc, #256]	; (80063d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a3f      	ldr	r2, [pc, #252]	; (80063d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062dc:	f7fd fd1c 	bl	8003d18 <HAL_GetTick>
 80062e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80062e2:	e009      	b.n	80062f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062e4:	f7fd fd18 	bl	8003d18 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d902      	bls.n	80062f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	73fb      	strb	r3, [r7, #15]
        break;
 80062f6:	e005      	b.n	8006304 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80062f8:	4b36      	ldr	r3, [pc, #216]	; (80063d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1ef      	bne.n	80062e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006304:	7bfb      	ldrb	r3, [r7, #15]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d15f      	bne.n	80063ca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d110      	bne.n	8006332 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006310:	4b30      	ldr	r3, [pc, #192]	; (80063d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006318:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	6892      	ldr	r2, [r2, #8]
 8006320:	0211      	lsls	r1, r2, #8
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	68d2      	ldr	r2, [r2, #12]
 8006326:	06d2      	lsls	r2, r2, #27
 8006328:	430a      	orrs	r2, r1
 800632a:	492a      	ldr	r1, [pc, #168]	; (80063d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800632c:	4313      	orrs	r3, r2
 800632e:	610b      	str	r3, [r1, #16]
 8006330:	e027      	b.n	8006382 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d112      	bne.n	800635e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006338:	4b26      	ldr	r3, [pc, #152]	; (80063d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006340:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	6892      	ldr	r2, [r2, #8]
 8006348:	0211      	lsls	r1, r2, #8
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6912      	ldr	r2, [r2, #16]
 800634e:	0852      	lsrs	r2, r2, #1
 8006350:	3a01      	subs	r2, #1
 8006352:	0552      	lsls	r2, r2, #21
 8006354:	430a      	orrs	r2, r1
 8006356:	491f      	ldr	r1, [pc, #124]	; (80063d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006358:	4313      	orrs	r3, r2
 800635a:	610b      	str	r3, [r1, #16]
 800635c:	e011      	b.n	8006382 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800635e:	4b1d      	ldr	r3, [pc, #116]	; (80063d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006366:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	6892      	ldr	r2, [r2, #8]
 800636e:	0211      	lsls	r1, r2, #8
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6952      	ldr	r2, [r2, #20]
 8006374:	0852      	lsrs	r2, r2, #1
 8006376:	3a01      	subs	r2, #1
 8006378:	0652      	lsls	r2, r2, #25
 800637a:	430a      	orrs	r2, r1
 800637c:	4915      	ldr	r1, [pc, #84]	; (80063d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800637e:	4313      	orrs	r3, r2
 8006380:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006382:	4b14      	ldr	r3, [pc, #80]	; (80063d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a13      	ldr	r2, [pc, #76]	; (80063d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006388:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800638c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800638e:	f7fd fcc3 	bl	8003d18 <HAL_GetTick>
 8006392:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006394:	e009      	b.n	80063aa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006396:	f7fd fcbf 	bl	8003d18 <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d902      	bls.n	80063aa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	73fb      	strb	r3, [r7, #15]
          break;
 80063a8:	e005      	b.n	80063b6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063aa:	4b0a      	ldr	r3, [pc, #40]	; (80063d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d0ef      	beq.n	8006396 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d106      	bne.n	80063ca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80063bc:	4b05      	ldr	r3, [pc, #20]	; (80063d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063be:	691a      	ldr	r2, [r3, #16]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	4903      	ldr	r1, [pc, #12]	; (80063d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80063ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	40021000 	.word	0x40021000

080063d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e040      	b.n	800646c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d106      	bne.n	8006400 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7fd fa6a 	bl	80038d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2224      	movs	r2, #36	; 0x24
 8006404:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 0201 	bic.w	r2, r2, #1
 8006414:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fba8 	bl	8006b74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f979 	bl	800671c <UART_SetConfig>
 800642a:	4603      	mov	r3, r0
 800642c:	2b01      	cmp	r3, #1
 800642e:	d101      	bne.n	8006434 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e01b      	b.n	800646c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006442:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689a      	ldr	r2, [r3, #8]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006452:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f042 0201 	orr.w	r2, r2, #1
 8006462:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fc27 	bl	8006cb8 <UART_CheckIdleState>
 800646a:	4603      	mov	r3, r0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b08a      	sub	sp, #40	; 0x28
 8006478:	af02      	add	r7, sp, #8
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	603b      	str	r3, [r7, #0]
 8006480:	4613      	mov	r3, r2
 8006482:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006488:	2b20      	cmp	r3, #32
 800648a:	d178      	bne.n	800657e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <HAL_UART_Transmit+0x24>
 8006492:	88fb      	ldrh	r3, [r7, #6]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e071      	b.n	8006580 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2221      	movs	r2, #33	; 0x21
 80064a8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064aa:	f7fd fc35 	bl	8003d18 <HAL_GetTick>
 80064ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	88fa      	ldrh	r2, [r7, #6]
 80064b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	88fa      	ldrh	r2, [r7, #6]
 80064bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064c8:	d108      	bne.n	80064dc <HAL_UART_Transmit+0x68>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d104      	bne.n	80064dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80064d2:	2300      	movs	r3, #0
 80064d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	61bb      	str	r3, [r7, #24]
 80064da:	e003      	b.n	80064e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064e0:	2300      	movs	r3, #0
 80064e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064e4:	e030      	b.n	8006548 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	2200      	movs	r2, #0
 80064ee:	2180      	movs	r1, #128	; 0x80
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f000 fc89 	bl	8006e08 <UART_WaitOnFlagUntilTimeout>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d004      	beq.n	8006506 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2220      	movs	r2, #32
 8006500:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e03c      	b.n	8006580 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10b      	bne.n	8006524 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	881a      	ldrh	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006518:	b292      	uxth	r2, r2
 800651a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	3302      	adds	r3, #2
 8006520:	61bb      	str	r3, [r7, #24]
 8006522:	e008      	b.n	8006536 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	781a      	ldrb	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	b292      	uxth	r2, r2
 800652e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	3301      	adds	r3, #1
 8006534:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800653c:	b29b      	uxth	r3, r3
 800653e:	3b01      	subs	r3, #1
 8006540:	b29a      	uxth	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800654e:	b29b      	uxth	r3, r3
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1c8      	bne.n	80064e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2200      	movs	r2, #0
 800655c:	2140      	movs	r1, #64	; 0x40
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 fc52 	bl	8006e08 <UART_WaitOnFlagUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d004      	beq.n	8006574 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2220      	movs	r2, #32
 800656e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e005      	b.n	8006580 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2220      	movs	r2, #32
 8006578:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800657a:	2300      	movs	r3, #0
 800657c:	e000      	b.n	8006580 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800657e:	2302      	movs	r3, #2
  }
}
 8006580:	4618      	mov	r0, r3
 8006582:	3720      	adds	r7, #32
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08a      	sub	sp, #40	; 0x28
 800658c:	af02      	add	r7, sp, #8
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	603b      	str	r3, [r7, #0]
 8006594:	4613      	mov	r3, r2
 8006596:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800659e:	2b20      	cmp	r3, #32
 80065a0:	f040 80b6 	bne.w	8006710 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d002      	beq.n	80065b0 <HAL_UART_Receive+0x28>
 80065aa:	88fb      	ldrh	r3, [r7, #6]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e0ae      	b.n	8006712 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2222      	movs	r2, #34	; 0x22
 80065c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065ca:	f7fd fba5 	bl	8003d18 <HAL_GetTick>
 80065ce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	88fa      	ldrh	r2, [r7, #6]
 80065d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	88fa      	ldrh	r2, [r7, #6]
 80065dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e8:	d10e      	bne.n	8006608 <HAL_UART_Receive+0x80>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d105      	bne.n	80065fe <HAL_UART_Receive+0x76>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80065f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065fc:	e02d      	b.n	800665a <HAL_UART_Receive+0xd2>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	22ff      	movs	r2, #255	; 0xff
 8006602:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006606:	e028      	b.n	800665a <HAL_UART_Receive+0xd2>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10d      	bne.n	800662c <HAL_UART_Receive+0xa4>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d104      	bne.n	8006622 <HAL_UART_Receive+0x9a>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	22ff      	movs	r2, #255	; 0xff
 800661c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006620:	e01b      	b.n	800665a <HAL_UART_Receive+0xd2>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	227f      	movs	r2, #127	; 0x7f
 8006626:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800662a:	e016      	b.n	800665a <HAL_UART_Receive+0xd2>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006634:	d10d      	bne.n	8006652 <HAL_UART_Receive+0xca>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d104      	bne.n	8006648 <HAL_UART_Receive+0xc0>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	227f      	movs	r2, #127	; 0x7f
 8006642:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006646:	e008      	b.n	800665a <HAL_UART_Receive+0xd2>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	223f      	movs	r2, #63	; 0x3f
 800664c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006650:	e003      	b.n	800665a <HAL_UART_Receive+0xd2>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006660:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800666a:	d108      	bne.n	800667e <HAL_UART_Receive+0xf6>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d104      	bne.n	800667e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006674:	2300      	movs	r3, #0
 8006676:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	61bb      	str	r3, [r7, #24]
 800667c:	e003      	b.n	8006686 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006682:	2300      	movs	r3, #0
 8006684:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006686:	e037      	b.n	80066f8 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	2200      	movs	r2, #0
 8006690:	2120      	movs	r1, #32
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 fbb8 	bl	8006e08 <UART_WaitOnFlagUntilTimeout>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d005      	beq.n	80066aa <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2220      	movs	r2, #32
 80066a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e033      	b.n	8006712 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10c      	bne.n	80066ca <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	8a7b      	ldrh	r3, [r7, #18]
 80066ba:	4013      	ands	r3, r2
 80066bc:	b29a      	uxth	r2, r3
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	3302      	adds	r3, #2
 80066c6:	61bb      	str	r3, [r7, #24]
 80066c8:	e00d      	b.n	80066e6 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	8a7b      	ldrh	r3, [r7, #18]
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	4013      	ands	r3, r2
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	3301      	adds	r3, #1
 80066e4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	3b01      	subs	r3, #1
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066fe:	b29b      	uxth	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1c1      	bne.n	8006688 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2220      	movs	r2, #32
 8006708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	e000      	b.n	8006712 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006710:	2302      	movs	r3, #2
  }
}
 8006712:	4618      	mov	r0, r3
 8006714:	3720      	adds	r7, #32
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
	...

0800671c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800671c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006720:	b08a      	sub	sp, #40	; 0x28
 8006722:	af00      	add	r7, sp, #0
 8006724:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006726:	2300      	movs	r3, #0
 8006728:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	431a      	orrs	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	431a      	orrs	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	4313      	orrs	r3, r2
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	4bb4      	ldr	r3, [pc, #720]	; (8006a1c <UART_SetConfig+0x300>)
 800674c:	4013      	ands	r3, r2
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	6812      	ldr	r2, [r2, #0]
 8006752:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006754:	430b      	orrs	r3, r1
 8006756:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4aa9      	ldr	r2, [pc, #676]	; (8006a20 <UART_SetConfig+0x304>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d004      	beq.n	8006788 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006784:	4313      	orrs	r3, r2
 8006786:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006798:	430a      	orrs	r2, r1
 800679a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4aa0      	ldr	r2, [pc, #640]	; (8006a24 <UART_SetConfig+0x308>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d126      	bne.n	80067f4 <UART_SetConfig+0xd8>
 80067a6:	4ba0      	ldr	r3, [pc, #640]	; (8006a28 <UART_SetConfig+0x30c>)
 80067a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ac:	f003 0303 	and.w	r3, r3, #3
 80067b0:	2b03      	cmp	r3, #3
 80067b2:	d81b      	bhi.n	80067ec <UART_SetConfig+0xd0>
 80067b4:	a201      	add	r2, pc, #4	; (adr r2, 80067bc <UART_SetConfig+0xa0>)
 80067b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ba:	bf00      	nop
 80067bc:	080067cd 	.word	0x080067cd
 80067c0:	080067dd 	.word	0x080067dd
 80067c4:	080067d5 	.word	0x080067d5
 80067c8:	080067e5 	.word	0x080067e5
 80067cc:	2301      	movs	r3, #1
 80067ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067d2:	e080      	b.n	80068d6 <UART_SetConfig+0x1ba>
 80067d4:	2302      	movs	r3, #2
 80067d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067da:	e07c      	b.n	80068d6 <UART_SetConfig+0x1ba>
 80067dc:	2304      	movs	r3, #4
 80067de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067e2:	e078      	b.n	80068d6 <UART_SetConfig+0x1ba>
 80067e4:	2308      	movs	r3, #8
 80067e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ea:	e074      	b.n	80068d6 <UART_SetConfig+0x1ba>
 80067ec:	2310      	movs	r3, #16
 80067ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067f2:	e070      	b.n	80068d6 <UART_SetConfig+0x1ba>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a8c      	ldr	r2, [pc, #560]	; (8006a2c <UART_SetConfig+0x310>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d138      	bne.n	8006870 <UART_SetConfig+0x154>
 80067fe:	4b8a      	ldr	r3, [pc, #552]	; (8006a28 <UART_SetConfig+0x30c>)
 8006800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006804:	f003 030c 	and.w	r3, r3, #12
 8006808:	2b0c      	cmp	r3, #12
 800680a:	d82d      	bhi.n	8006868 <UART_SetConfig+0x14c>
 800680c:	a201      	add	r2, pc, #4	; (adr r2, 8006814 <UART_SetConfig+0xf8>)
 800680e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006812:	bf00      	nop
 8006814:	08006849 	.word	0x08006849
 8006818:	08006869 	.word	0x08006869
 800681c:	08006869 	.word	0x08006869
 8006820:	08006869 	.word	0x08006869
 8006824:	08006859 	.word	0x08006859
 8006828:	08006869 	.word	0x08006869
 800682c:	08006869 	.word	0x08006869
 8006830:	08006869 	.word	0x08006869
 8006834:	08006851 	.word	0x08006851
 8006838:	08006869 	.word	0x08006869
 800683c:	08006869 	.word	0x08006869
 8006840:	08006869 	.word	0x08006869
 8006844:	08006861 	.word	0x08006861
 8006848:	2300      	movs	r3, #0
 800684a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800684e:	e042      	b.n	80068d6 <UART_SetConfig+0x1ba>
 8006850:	2302      	movs	r3, #2
 8006852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006856:	e03e      	b.n	80068d6 <UART_SetConfig+0x1ba>
 8006858:	2304      	movs	r3, #4
 800685a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800685e:	e03a      	b.n	80068d6 <UART_SetConfig+0x1ba>
 8006860:	2308      	movs	r3, #8
 8006862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006866:	e036      	b.n	80068d6 <UART_SetConfig+0x1ba>
 8006868:	2310      	movs	r3, #16
 800686a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800686e:	e032      	b.n	80068d6 <UART_SetConfig+0x1ba>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a6a      	ldr	r2, [pc, #424]	; (8006a20 <UART_SetConfig+0x304>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d12a      	bne.n	80068d0 <UART_SetConfig+0x1b4>
 800687a:	4b6b      	ldr	r3, [pc, #428]	; (8006a28 <UART_SetConfig+0x30c>)
 800687c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006880:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006884:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006888:	d01a      	beq.n	80068c0 <UART_SetConfig+0x1a4>
 800688a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800688e:	d81b      	bhi.n	80068c8 <UART_SetConfig+0x1ac>
 8006890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006894:	d00c      	beq.n	80068b0 <UART_SetConfig+0x194>
 8006896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800689a:	d815      	bhi.n	80068c8 <UART_SetConfig+0x1ac>
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <UART_SetConfig+0x18c>
 80068a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068a4:	d008      	beq.n	80068b8 <UART_SetConfig+0x19c>
 80068a6:	e00f      	b.n	80068c8 <UART_SetConfig+0x1ac>
 80068a8:	2300      	movs	r3, #0
 80068aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ae:	e012      	b.n	80068d6 <UART_SetConfig+0x1ba>
 80068b0:	2302      	movs	r3, #2
 80068b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068b6:	e00e      	b.n	80068d6 <UART_SetConfig+0x1ba>
 80068b8:	2304      	movs	r3, #4
 80068ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068be:	e00a      	b.n	80068d6 <UART_SetConfig+0x1ba>
 80068c0:	2308      	movs	r3, #8
 80068c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068c6:	e006      	b.n	80068d6 <UART_SetConfig+0x1ba>
 80068c8:	2310      	movs	r3, #16
 80068ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ce:	e002      	b.n	80068d6 <UART_SetConfig+0x1ba>
 80068d0:	2310      	movs	r3, #16
 80068d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a51      	ldr	r2, [pc, #324]	; (8006a20 <UART_SetConfig+0x304>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d17a      	bne.n	80069d6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d824      	bhi.n	8006932 <UART_SetConfig+0x216>
 80068e8:	a201      	add	r2, pc, #4	; (adr r2, 80068f0 <UART_SetConfig+0x1d4>)
 80068ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ee:	bf00      	nop
 80068f0:	08006915 	.word	0x08006915
 80068f4:	08006933 	.word	0x08006933
 80068f8:	0800691d 	.word	0x0800691d
 80068fc:	08006933 	.word	0x08006933
 8006900:	08006923 	.word	0x08006923
 8006904:	08006933 	.word	0x08006933
 8006908:	08006933 	.word	0x08006933
 800690c:	08006933 	.word	0x08006933
 8006910:	0800692b 	.word	0x0800692b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006914:	f7ff f9dc 	bl	8005cd0 <HAL_RCC_GetPCLK1Freq>
 8006918:	61f8      	str	r0, [r7, #28]
        break;
 800691a:	e010      	b.n	800693e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800691c:	4b44      	ldr	r3, [pc, #272]	; (8006a30 <UART_SetConfig+0x314>)
 800691e:	61fb      	str	r3, [r7, #28]
        break;
 8006920:	e00d      	b.n	800693e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006922:	f7ff f93d 	bl	8005ba0 <HAL_RCC_GetSysClockFreq>
 8006926:	61f8      	str	r0, [r7, #28]
        break;
 8006928:	e009      	b.n	800693e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800692a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800692e:	61fb      	str	r3, [r7, #28]
        break;
 8006930:	e005      	b.n	800693e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006932:	2300      	movs	r3, #0
 8006934:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800693c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	2b00      	cmp	r3, #0
 8006942:	f000 8107 	beq.w	8006b54 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	4613      	mov	r3, r2
 800694c:	005b      	lsls	r3, r3, #1
 800694e:	4413      	add	r3, r2
 8006950:	69fa      	ldr	r2, [r7, #28]
 8006952:	429a      	cmp	r2, r3
 8006954:	d305      	bcc.n	8006962 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800695c:	69fa      	ldr	r2, [r7, #28]
 800695e:	429a      	cmp	r2, r3
 8006960:	d903      	bls.n	800696a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006968:	e0f4      	b.n	8006b54 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	2200      	movs	r2, #0
 800696e:	461c      	mov	r4, r3
 8006970:	4615      	mov	r5, r2
 8006972:	f04f 0200 	mov.w	r2, #0
 8006976:	f04f 0300 	mov.w	r3, #0
 800697a:	022b      	lsls	r3, r5, #8
 800697c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006980:	0222      	lsls	r2, r4, #8
 8006982:	68f9      	ldr	r1, [r7, #12]
 8006984:	6849      	ldr	r1, [r1, #4]
 8006986:	0849      	lsrs	r1, r1, #1
 8006988:	2000      	movs	r0, #0
 800698a:	4688      	mov	r8, r1
 800698c:	4681      	mov	r9, r0
 800698e:	eb12 0a08 	adds.w	sl, r2, r8
 8006992:	eb43 0b09 	adc.w	fp, r3, r9
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	603b      	str	r3, [r7, #0]
 800699e:	607a      	str	r2, [r7, #4]
 80069a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069a4:	4650      	mov	r0, sl
 80069a6:	4659      	mov	r1, fp
 80069a8:	f7fa f92e 	bl	8000c08 <__aeabi_uldivmod>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	4613      	mov	r3, r2
 80069b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069ba:	d308      	bcc.n	80069ce <UART_SetConfig+0x2b2>
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069c2:	d204      	bcs.n	80069ce <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	60da      	str	r2, [r3, #12]
 80069cc:	e0c2      	b.n	8006b54 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80069d4:	e0be      	b.n	8006b54 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069de:	d16a      	bne.n	8006ab6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80069e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069e4:	2b08      	cmp	r3, #8
 80069e6:	d834      	bhi.n	8006a52 <UART_SetConfig+0x336>
 80069e8:	a201      	add	r2, pc, #4	; (adr r2, 80069f0 <UART_SetConfig+0x2d4>)
 80069ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ee:	bf00      	nop
 80069f0:	08006a15 	.word	0x08006a15
 80069f4:	08006a35 	.word	0x08006a35
 80069f8:	08006a3d 	.word	0x08006a3d
 80069fc:	08006a53 	.word	0x08006a53
 8006a00:	08006a43 	.word	0x08006a43
 8006a04:	08006a53 	.word	0x08006a53
 8006a08:	08006a53 	.word	0x08006a53
 8006a0c:	08006a53 	.word	0x08006a53
 8006a10:	08006a4b 	.word	0x08006a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a14:	f7ff f95c 	bl	8005cd0 <HAL_RCC_GetPCLK1Freq>
 8006a18:	61f8      	str	r0, [r7, #28]
        break;
 8006a1a:	e020      	b.n	8006a5e <UART_SetConfig+0x342>
 8006a1c:	efff69f3 	.word	0xefff69f3
 8006a20:	40008000 	.word	0x40008000
 8006a24:	40013800 	.word	0x40013800
 8006a28:	40021000 	.word	0x40021000
 8006a2c:	40004400 	.word	0x40004400
 8006a30:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a34:	f7ff f962 	bl	8005cfc <HAL_RCC_GetPCLK2Freq>
 8006a38:	61f8      	str	r0, [r7, #28]
        break;
 8006a3a:	e010      	b.n	8006a5e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a3c:	4b4c      	ldr	r3, [pc, #304]	; (8006b70 <UART_SetConfig+0x454>)
 8006a3e:	61fb      	str	r3, [r7, #28]
        break;
 8006a40:	e00d      	b.n	8006a5e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a42:	f7ff f8ad 	bl	8005ba0 <HAL_RCC_GetSysClockFreq>
 8006a46:	61f8      	str	r0, [r7, #28]
        break;
 8006a48:	e009      	b.n	8006a5e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a4e:	61fb      	str	r3, [r7, #28]
        break;
 8006a50:	e005      	b.n	8006a5e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006a52:	2300      	movs	r3, #0
 8006a54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d077      	beq.n	8006b54 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	005a      	lsls	r2, r3, #1
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	085b      	lsrs	r3, r3, #1
 8006a6e:	441a      	add	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a78:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	2b0f      	cmp	r3, #15
 8006a7e:	d916      	bls.n	8006aae <UART_SetConfig+0x392>
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a86:	d212      	bcs.n	8006aae <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	f023 030f 	bic.w	r3, r3, #15
 8006a90:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	085b      	lsrs	r3, r3, #1
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	8afb      	ldrh	r3, [r7, #22]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	8afa      	ldrh	r2, [r7, #22]
 8006aaa:	60da      	str	r2, [r3, #12]
 8006aac:	e052      	b.n	8006b54 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ab4:	e04e      	b.n	8006b54 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ab6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006aba:	2b08      	cmp	r3, #8
 8006abc:	d827      	bhi.n	8006b0e <UART_SetConfig+0x3f2>
 8006abe:	a201      	add	r2, pc, #4	; (adr r2, 8006ac4 <UART_SetConfig+0x3a8>)
 8006ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac4:	08006ae9 	.word	0x08006ae9
 8006ac8:	08006af1 	.word	0x08006af1
 8006acc:	08006af9 	.word	0x08006af9
 8006ad0:	08006b0f 	.word	0x08006b0f
 8006ad4:	08006aff 	.word	0x08006aff
 8006ad8:	08006b0f 	.word	0x08006b0f
 8006adc:	08006b0f 	.word	0x08006b0f
 8006ae0:	08006b0f 	.word	0x08006b0f
 8006ae4:	08006b07 	.word	0x08006b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ae8:	f7ff f8f2 	bl	8005cd0 <HAL_RCC_GetPCLK1Freq>
 8006aec:	61f8      	str	r0, [r7, #28]
        break;
 8006aee:	e014      	b.n	8006b1a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006af0:	f7ff f904 	bl	8005cfc <HAL_RCC_GetPCLK2Freq>
 8006af4:	61f8      	str	r0, [r7, #28]
        break;
 8006af6:	e010      	b.n	8006b1a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006af8:	4b1d      	ldr	r3, [pc, #116]	; (8006b70 <UART_SetConfig+0x454>)
 8006afa:	61fb      	str	r3, [r7, #28]
        break;
 8006afc:	e00d      	b.n	8006b1a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006afe:	f7ff f84f 	bl	8005ba0 <HAL_RCC_GetSysClockFreq>
 8006b02:	61f8      	str	r0, [r7, #28]
        break;
 8006b04:	e009      	b.n	8006b1a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b0a:	61fb      	str	r3, [r7, #28]
        break;
 8006b0c:	e005      	b.n	8006b1a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b18:	bf00      	nop
    }

    if (pclk != 0U)
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d019      	beq.n	8006b54 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	085a      	lsrs	r2, r3, #1
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	441a      	add	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b32:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	2b0f      	cmp	r3, #15
 8006b38:	d909      	bls.n	8006b4e <UART_SetConfig+0x432>
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b40:	d205      	bcs.n	8006b4e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	60da      	str	r2, [r3, #12]
 8006b4c:	e002      	b.n	8006b54 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006b60:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3728      	adds	r7, #40	; 0x28
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b6e:	bf00      	nop
 8006b70:	00f42400 	.word	0x00f42400

08006b74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b80:	f003 0308 	and.w	r3, r3, #8
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00a      	beq.n	8006b9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00a      	beq.n	8006bc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00a      	beq.n	8006be2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be6:	f003 0304 	and.w	r3, r3, #4
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00a      	beq.n	8006c04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	430a      	orrs	r2, r1
 8006c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	f003 0310 	and.w	r3, r3, #16
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00a      	beq.n	8006c26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2a:	f003 0320 	and.w	r3, r3, #32
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00a      	beq.n	8006c48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d01a      	beq.n	8006c8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c72:	d10a      	bne.n	8006c8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	605a      	str	r2, [r3, #4]
  }
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b098      	sub	sp, #96	; 0x60
 8006cbc:	af02      	add	r7, sp, #8
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cc8:	f7fd f826 	bl	8003d18 <HAL_GetTick>
 8006ccc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0308 	and.w	r3, r3, #8
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d12e      	bne.n	8006d3a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f88c 	bl	8006e08 <UART_WaitOnFlagUntilTimeout>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d021      	beq.n	8006d3a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfe:	e853 3f00 	ldrex	r3, [r3]
 8006d02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d0a:	653b      	str	r3, [r7, #80]	; 0x50
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	461a      	mov	r2, r3
 8006d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d14:	647b      	str	r3, [r7, #68]	; 0x44
 8006d16:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d1c:	e841 2300 	strex	r3, r2, [r1]
 8006d20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1e6      	bne.n	8006cf6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e062      	b.n	8006e00 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0304 	and.w	r3, r3, #4
 8006d44:	2b04      	cmp	r3, #4
 8006d46:	d149      	bne.n	8006ddc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d50:	2200      	movs	r2, #0
 8006d52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f856 	bl	8006e08 <UART_WaitOnFlagUntilTimeout>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d03c      	beq.n	8006ddc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6a:	e853 3f00 	ldrex	r3, [r3]
 8006d6e:	623b      	str	r3, [r7, #32]
   return(result);
 8006d70:	6a3b      	ldr	r3, [r7, #32]
 8006d72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d80:	633b      	str	r3, [r7, #48]	; 0x30
 8006d82:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d88:	e841 2300 	strex	r3, r2, [r1]
 8006d8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1e6      	bne.n	8006d62 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	3308      	adds	r3, #8
 8006d9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	e853 3f00 	ldrex	r3, [r3]
 8006da2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f023 0301 	bic.w	r3, r3, #1
 8006daa:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3308      	adds	r3, #8
 8006db2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006db4:	61fa      	str	r2, [r7, #28]
 8006db6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db8:	69b9      	ldr	r1, [r7, #24]
 8006dba:	69fa      	ldr	r2, [r7, #28]
 8006dbc:	e841 2300 	strex	r3, r2, [r1]
 8006dc0:	617b      	str	r3, [r7, #20]
   return(result);
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1e5      	bne.n	8006d94 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2220      	movs	r2, #32
 8006dcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e011      	b.n	8006e00 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2220      	movs	r2, #32
 8006de0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2220      	movs	r2, #32
 8006de6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3758      	adds	r7, #88	; 0x58
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	603b      	str	r3, [r7, #0]
 8006e14:	4613      	mov	r3, r2
 8006e16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e18:	e049      	b.n	8006eae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e20:	d045      	beq.n	8006eae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e22:	f7fc ff79 	bl	8003d18 <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	69ba      	ldr	r2, [r7, #24]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d302      	bcc.n	8006e38 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e048      	b.n	8006ece <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0304 	and.w	r3, r3, #4
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d031      	beq.n	8006eae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69db      	ldr	r3, [r3, #28]
 8006e50:	f003 0308 	and.w	r3, r3, #8
 8006e54:	2b08      	cmp	r3, #8
 8006e56:	d110      	bne.n	8006e7a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2208      	movs	r2, #8
 8006e5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 f838 	bl	8006ed6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2208      	movs	r2, #8
 8006e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e029      	b.n	8006ece <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e88:	d111      	bne.n	8006eae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 f81e 	bl	8006ed6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e00f      	b.n	8006ece <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	69da      	ldr	r2, [r3, #28]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	bf0c      	ite	eq
 8006ebe:	2301      	moveq	r3, #1
 8006ec0:	2300      	movne	r3, #0
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	79fb      	ldrb	r3, [r7, #7]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d0a6      	beq.n	8006e1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b095      	sub	sp, #84	; 0x54
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee6:	e853 3f00 	ldrex	r3, [r3]
 8006eea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006efc:	643b      	str	r3, [r7, #64]	; 0x40
 8006efe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f04:	e841 2300 	strex	r3, r2, [r1]
 8006f08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e6      	bne.n	8006ede <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3308      	adds	r3, #8
 8006f16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	f023 0301 	bic.w	r3, r3, #1
 8006f26:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3308      	adds	r3, #8
 8006f2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f38:	e841 2300 	strex	r3, r2, [r1]
 8006f3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1e5      	bne.n	8006f10 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d118      	bne.n	8006f7e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	e853 3f00 	ldrex	r3, [r3]
 8006f58:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f023 0310 	bic.w	r3, r3, #16
 8006f60:	647b      	str	r3, [r7, #68]	; 0x44
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	461a      	mov	r2, r3
 8006f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f6a:	61bb      	str	r3, [r7, #24]
 8006f6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6e:	6979      	ldr	r1, [r7, #20]
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	e841 2300 	strex	r3, r2, [r1]
 8006f76:	613b      	str	r3, [r7, #16]
   return(result);
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1e6      	bne.n	8006f4c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2220      	movs	r2, #32
 8006f82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006f92:	bf00      	nop
 8006f94:	3754      	adds	r7, #84	; 0x54
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <atof>:
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	f000 be0e 	b.w	8007bc0 <strtod>

08006fa4 <sulp>:
 8006fa4:	b570      	push	{r4, r5, r6, lr}
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	460d      	mov	r5, r1
 8006faa:	ec45 4b10 	vmov	d0, r4, r5
 8006fae:	4616      	mov	r6, r2
 8006fb0:	f003 fd02 	bl	800a9b8 <__ulp>
 8006fb4:	ec51 0b10 	vmov	r0, r1, d0
 8006fb8:	b17e      	cbz	r6, 8006fda <sulp+0x36>
 8006fba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006fbe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	dd09      	ble.n	8006fda <sulp+0x36>
 8006fc6:	051b      	lsls	r3, r3, #20
 8006fc8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006fcc:	2400      	movs	r4, #0
 8006fce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006fd2:	4622      	mov	r2, r4
 8006fd4:	462b      	mov	r3, r5
 8006fd6:	f7f9 fb1f 	bl	8000618 <__aeabi_dmul>
 8006fda:	bd70      	pop	{r4, r5, r6, pc}
 8006fdc:	0000      	movs	r0, r0
	...

08006fe0 <_strtod_l>:
 8006fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe4:	ed2d 8b02 	vpush	{d8}
 8006fe8:	b09b      	sub	sp, #108	; 0x6c
 8006fea:	4604      	mov	r4, r0
 8006fec:	9213      	str	r2, [sp, #76]	; 0x4c
 8006fee:	2200      	movs	r2, #0
 8006ff0:	9216      	str	r2, [sp, #88]	; 0x58
 8006ff2:	460d      	mov	r5, r1
 8006ff4:	f04f 0800 	mov.w	r8, #0
 8006ff8:	f04f 0900 	mov.w	r9, #0
 8006ffc:	460a      	mov	r2, r1
 8006ffe:	9215      	str	r2, [sp, #84]	; 0x54
 8007000:	7811      	ldrb	r1, [r2, #0]
 8007002:	292b      	cmp	r1, #43	; 0x2b
 8007004:	d04c      	beq.n	80070a0 <_strtod_l+0xc0>
 8007006:	d83a      	bhi.n	800707e <_strtod_l+0x9e>
 8007008:	290d      	cmp	r1, #13
 800700a:	d834      	bhi.n	8007076 <_strtod_l+0x96>
 800700c:	2908      	cmp	r1, #8
 800700e:	d834      	bhi.n	800707a <_strtod_l+0x9a>
 8007010:	2900      	cmp	r1, #0
 8007012:	d03d      	beq.n	8007090 <_strtod_l+0xb0>
 8007014:	2200      	movs	r2, #0
 8007016:	920a      	str	r2, [sp, #40]	; 0x28
 8007018:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800701a:	7832      	ldrb	r2, [r6, #0]
 800701c:	2a30      	cmp	r2, #48	; 0x30
 800701e:	f040 80b4 	bne.w	800718a <_strtod_l+0x1aa>
 8007022:	7872      	ldrb	r2, [r6, #1]
 8007024:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007028:	2a58      	cmp	r2, #88	; 0x58
 800702a:	d170      	bne.n	800710e <_strtod_l+0x12e>
 800702c:	9302      	str	r3, [sp, #8]
 800702e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007030:	9301      	str	r3, [sp, #4]
 8007032:	ab16      	add	r3, sp, #88	; 0x58
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	4a8e      	ldr	r2, [pc, #568]	; (8007270 <_strtod_l+0x290>)
 8007038:	ab17      	add	r3, sp, #92	; 0x5c
 800703a:	a915      	add	r1, sp, #84	; 0x54
 800703c:	4620      	mov	r0, r4
 800703e:	f002 fd99 	bl	8009b74 <__gethex>
 8007042:	f010 070f 	ands.w	r7, r0, #15
 8007046:	4605      	mov	r5, r0
 8007048:	d005      	beq.n	8007056 <_strtod_l+0x76>
 800704a:	2f06      	cmp	r7, #6
 800704c:	d12a      	bne.n	80070a4 <_strtod_l+0xc4>
 800704e:	3601      	adds	r6, #1
 8007050:	2300      	movs	r3, #0
 8007052:	9615      	str	r6, [sp, #84]	; 0x54
 8007054:	930a      	str	r3, [sp, #40]	; 0x28
 8007056:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007058:	2b00      	cmp	r3, #0
 800705a:	f040 857f 	bne.w	8007b5c <_strtod_l+0xb7c>
 800705e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007060:	b1db      	cbz	r3, 800709a <_strtod_l+0xba>
 8007062:	4642      	mov	r2, r8
 8007064:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007068:	ec43 2b10 	vmov	d0, r2, r3
 800706c:	b01b      	add	sp, #108	; 0x6c
 800706e:	ecbd 8b02 	vpop	{d8}
 8007072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007076:	2920      	cmp	r1, #32
 8007078:	d1cc      	bne.n	8007014 <_strtod_l+0x34>
 800707a:	3201      	adds	r2, #1
 800707c:	e7bf      	b.n	8006ffe <_strtod_l+0x1e>
 800707e:	292d      	cmp	r1, #45	; 0x2d
 8007080:	d1c8      	bne.n	8007014 <_strtod_l+0x34>
 8007082:	2101      	movs	r1, #1
 8007084:	910a      	str	r1, [sp, #40]	; 0x28
 8007086:	1c51      	adds	r1, r2, #1
 8007088:	9115      	str	r1, [sp, #84]	; 0x54
 800708a:	7852      	ldrb	r2, [r2, #1]
 800708c:	2a00      	cmp	r2, #0
 800708e:	d1c3      	bne.n	8007018 <_strtod_l+0x38>
 8007090:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007092:	9515      	str	r5, [sp, #84]	; 0x54
 8007094:	2b00      	cmp	r3, #0
 8007096:	f040 855f 	bne.w	8007b58 <_strtod_l+0xb78>
 800709a:	4642      	mov	r2, r8
 800709c:	464b      	mov	r3, r9
 800709e:	e7e3      	b.n	8007068 <_strtod_l+0x88>
 80070a0:	2100      	movs	r1, #0
 80070a2:	e7ef      	b.n	8007084 <_strtod_l+0xa4>
 80070a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80070a6:	b13a      	cbz	r2, 80070b8 <_strtod_l+0xd8>
 80070a8:	2135      	movs	r1, #53	; 0x35
 80070aa:	a818      	add	r0, sp, #96	; 0x60
 80070ac:	f003 fd81 	bl	800abb2 <__copybits>
 80070b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80070b2:	4620      	mov	r0, r4
 80070b4:	f003 f954 	bl	800a360 <_Bfree>
 80070b8:	3f01      	subs	r7, #1
 80070ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80070bc:	2f04      	cmp	r7, #4
 80070be:	d806      	bhi.n	80070ce <_strtod_l+0xee>
 80070c0:	e8df f007 	tbb	[pc, r7]
 80070c4:	201d0314 	.word	0x201d0314
 80070c8:	14          	.byte	0x14
 80070c9:	00          	.byte	0x00
 80070ca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80070ce:	05e9      	lsls	r1, r5, #23
 80070d0:	bf48      	it	mi
 80070d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80070d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070da:	0d1b      	lsrs	r3, r3, #20
 80070dc:	051b      	lsls	r3, r3, #20
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1b9      	bne.n	8007056 <_strtod_l+0x76>
 80070e2:	f001 fdd5 	bl	8008c90 <__errno>
 80070e6:	2322      	movs	r3, #34	; 0x22
 80070e8:	6003      	str	r3, [r0, #0]
 80070ea:	e7b4      	b.n	8007056 <_strtod_l+0x76>
 80070ec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80070f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80070f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80070f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80070fc:	e7e7      	b.n	80070ce <_strtod_l+0xee>
 80070fe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007278 <_strtod_l+0x298>
 8007102:	e7e4      	b.n	80070ce <_strtod_l+0xee>
 8007104:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007108:	f04f 38ff 	mov.w	r8, #4294967295
 800710c:	e7df      	b.n	80070ce <_strtod_l+0xee>
 800710e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007110:	1c5a      	adds	r2, r3, #1
 8007112:	9215      	str	r2, [sp, #84]	; 0x54
 8007114:	785b      	ldrb	r3, [r3, #1]
 8007116:	2b30      	cmp	r3, #48	; 0x30
 8007118:	d0f9      	beq.n	800710e <_strtod_l+0x12e>
 800711a:	2b00      	cmp	r3, #0
 800711c:	d09b      	beq.n	8007056 <_strtod_l+0x76>
 800711e:	2301      	movs	r3, #1
 8007120:	f04f 0a00 	mov.w	sl, #0
 8007124:	9304      	str	r3, [sp, #16]
 8007126:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007128:	930b      	str	r3, [sp, #44]	; 0x2c
 800712a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800712e:	46d3      	mov	fp, sl
 8007130:	220a      	movs	r2, #10
 8007132:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007134:	7806      	ldrb	r6, [r0, #0]
 8007136:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800713a:	b2d9      	uxtb	r1, r3
 800713c:	2909      	cmp	r1, #9
 800713e:	d926      	bls.n	800718e <_strtod_l+0x1ae>
 8007140:	494c      	ldr	r1, [pc, #304]	; (8007274 <_strtod_l+0x294>)
 8007142:	2201      	movs	r2, #1
 8007144:	f001 fd48 	bl	8008bd8 <strncmp>
 8007148:	2800      	cmp	r0, #0
 800714a:	d030      	beq.n	80071ae <_strtod_l+0x1ce>
 800714c:	2000      	movs	r0, #0
 800714e:	4632      	mov	r2, r6
 8007150:	9005      	str	r0, [sp, #20]
 8007152:	465e      	mov	r6, fp
 8007154:	4603      	mov	r3, r0
 8007156:	2a65      	cmp	r2, #101	; 0x65
 8007158:	d001      	beq.n	800715e <_strtod_l+0x17e>
 800715a:	2a45      	cmp	r2, #69	; 0x45
 800715c:	d113      	bne.n	8007186 <_strtod_l+0x1a6>
 800715e:	b91e      	cbnz	r6, 8007168 <_strtod_l+0x188>
 8007160:	9a04      	ldr	r2, [sp, #16]
 8007162:	4302      	orrs	r2, r0
 8007164:	d094      	beq.n	8007090 <_strtod_l+0xb0>
 8007166:	2600      	movs	r6, #0
 8007168:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800716a:	1c6a      	adds	r2, r5, #1
 800716c:	9215      	str	r2, [sp, #84]	; 0x54
 800716e:	786a      	ldrb	r2, [r5, #1]
 8007170:	2a2b      	cmp	r2, #43	; 0x2b
 8007172:	d074      	beq.n	800725e <_strtod_l+0x27e>
 8007174:	2a2d      	cmp	r2, #45	; 0x2d
 8007176:	d078      	beq.n	800726a <_strtod_l+0x28a>
 8007178:	f04f 0c00 	mov.w	ip, #0
 800717c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007180:	2909      	cmp	r1, #9
 8007182:	d97f      	bls.n	8007284 <_strtod_l+0x2a4>
 8007184:	9515      	str	r5, [sp, #84]	; 0x54
 8007186:	2700      	movs	r7, #0
 8007188:	e09e      	b.n	80072c8 <_strtod_l+0x2e8>
 800718a:	2300      	movs	r3, #0
 800718c:	e7c8      	b.n	8007120 <_strtod_l+0x140>
 800718e:	f1bb 0f08 	cmp.w	fp, #8
 8007192:	bfd8      	it	le
 8007194:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007196:	f100 0001 	add.w	r0, r0, #1
 800719a:	bfda      	itte	le
 800719c:	fb02 3301 	mlale	r3, r2, r1, r3
 80071a0:	9309      	strle	r3, [sp, #36]	; 0x24
 80071a2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80071a6:	f10b 0b01 	add.w	fp, fp, #1
 80071aa:	9015      	str	r0, [sp, #84]	; 0x54
 80071ac:	e7c1      	b.n	8007132 <_strtod_l+0x152>
 80071ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071b0:	1c5a      	adds	r2, r3, #1
 80071b2:	9215      	str	r2, [sp, #84]	; 0x54
 80071b4:	785a      	ldrb	r2, [r3, #1]
 80071b6:	f1bb 0f00 	cmp.w	fp, #0
 80071ba:	d037      	beq.n	800722c <_strtod_l+0x24c>
 80071bc:	9005      	str	r0, [sp, #20]
 80071be:	465e      	mov	r6, fp
 80071c0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80071c4:	2b09      	cmp	r3, #9
 80071c6:	d912      	bls.n	80071ee <_strtod_l+0x20e>
 80071c8:	2301      	movs	r3, #1
 80071ca:	e7c4      	b.n	8007156 <_strtod_l+0x176>
 80071cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	9215      	str	r2, [sp, #84]	; 0x54
 80071d2:	785a      	ldrb	r2, [r3, #1]
 80071d4:	3001      	adds	r0, #1
 80071d6:	2a30      	cmp	r2, #48	; 0x30
 80071d8:	d0f8      	beq.n	80071cc <_strtod_l+0x1ec>
 80071da:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80071de:	2b08      	cmp	r3, #8
 80071e0:	f200 84c1 	bhi.w	8007b66 <_strtod_l+0xb86>
 80071e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071e6:	9005      	str	r0, [sp, #20]
 80071e8:	2000      	movs	r0, #0
 80071ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80071ec:	4606      	mov	r6, r0
 80071ee:	3a30      	subs	r2, #48	; 0x30
 80071f0:	f100 0301 	add.w	r3, r0, #1
 80071f4:	d014      	beq.n	8007220 <_strtod_l+0x240>
 80071f6:	9905      	ldr	r1, [sp, #20]
 80071f8:	4419      	add	r1, r3
 80071fa:	9105      	str	r1, [sp, #20]
 80071fc:	4633      	mov	r3, r6
 80071fe:	eb00 0c06 	add.w	ip, r0, r6
 8007202:	210a      	movs	r1, #10
 8007204:	4563      	cmp	r3, ip
 8007206:	d113      	bne.n	8007230 <_strtod_l+0x250>
 8007208:	1833      	adds	r3, r6, r0
 800720a:	2b08      	cmp	r3, #8
 800720c:	f106 0601 	add.w	r6, r6, #1
 8007210:	4406      	add	r6, r0
 8007212:	dc1a      	bgt.n	800724a <_strtod_l+0x26a>
 8007214:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007216:	230a      	movs	r3, #10
 8007218:	fb03 2301 	mla	r3, r3, r1, r2
 800721c:	9309      	str	r3, [sp, #36]	; 0x24
 800721e:	2300      	movs	r3, #0
 8007220:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007222:	1c51      	adds	r1, r2, #1
 8007224:	9115      	str	r1, [sp, #84]	; 0x54
 8007226:	7852      	ldrb	r2, [r2, #1]
 8007228:	4618      	mov	r0, r3
 800722a:	e7c9      	b.n	80071c0 <_strtod_l+0x1e0>
 800722c:	4658      	mov	r0, fp
 800722e:	e7d2      	b.n	80071d6 <_strtod_l+0x1f6>
 8007230:	2b08      	cmp	r3, #8
 8007232:	f103 0301 	add.w	r3, r3, #1
 8007236:	dc03      	bgt.n	8007240 <_strtod_l+0x260>
 8007238:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800723a:	434f      	muls	r7, r1
 800723c:	9709      	str	r7, [sp, #36]	; 0x24
 800723e:	e7e1      	b.n	8007204 <_strtod_l+0x224>
 8007240:	2b10      	cmp	r3, #16
 8007242:	bfd8      	it	le
 8007244:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007248:	e7dc      	b.n	8007204 <_strtod_l+0x224>
 800724a:	2e10      	cmp	r6, #16
 800724c:	bfdc      	itt	le
 800724e:	230a      	movle	r3, #10
 8007250:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007254:	e7e3      	b.n	800721e <_strtod_l+0x23e>
 8007256:	2300      	movs	r3, #0
 8007258:	9305      	str	r3, [sp, #20]
 800725a:	2301      	movs	r3, #1
 800725c:	e780      	b.n	8007160 <_strtod_l+0x180>
 800725e:	f04f 0c00 	mov.w	ip, #0
 8007262:	1caa      	adds	r2, r5, #2
 8007264:	9215      	str	r2, [sp, #84]	; 0x54
 8007266:	78aa      	ldrb	r2, [r5, #2]
 8007268:	e788      	b.n	800717c <_strtod_l+0x19c>
 800726a:	f04f 0c01 	mov.w	ip, #1
 800726e:	e7f8      	b.n	8007262 <_strtod_l+0x282>
 8007270:	0800d294 	.word	0x0800d294
 8007274:	0800d290 	.word	0x0800d290
 8007278:	7ff00000 	.word	0x7ff00000
 800727c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800727e:	1c51      	adds	r1, r2, #1
 8007280:	9115      	str	r1, [sp, #84]	; 0x54
 8007282:	7852      	ldrb	r2, [r2, #1]
 8007284:	2a30      	cmp	r2, #48	; 0x30
 8007286:	d0f9      	beq.n	800727c <_strtod_l+0x29c>
 8007288:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800728c:	2908      	cmp	r1, #8
 800728e:	f63f af7a 	bhi.w	8007186 <_strtod_l+0x1a6>
 8007292:	3a30      	subs	r2, #48	; 0x30
 8007294:	9208      	str	r2, [sp, #32]
 8007296:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007298:	920c      	str	r2, [sp, #48]	; 0x30
 800729a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800729c:	1c57      	adds	r7, r2, #1
 800729e:	9715      	str	r7, [sp, #84]	; 0x54
 80072a0:	7852      	ldrb	r2, [r2, #1]
 80072a2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80072a6:	f1be 0f09 	cmp.w	lr, #9
 80072aa:	d938      	bls.n	800731e <_strtod_l+0x33e>
 80072ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80072ae:	1a7f      	subs	r7, r7, r1
 80072b0:	2f08      	cmp	r7, #8
 80072b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80072b6:	dc03      	bgt.n	80072c0 <_strtod_l+0x2e0>
 80072b8:	9908      	ldr	r1, [sp, #32]
 80072ba:	428f      	cmp	r7, r1
 80072bc:	bfa8      	it	ge
 80072be:	460f      	movge	r7, r1
 80072c0:	f1bc 0f00 	cmp.w	ip, #0
 80072c4:	d000      	beq.n	80072c8 <_strtod_l+0x2e8>
 80072c6:	427f      	negs	r7, r7
 80072c8:	2e00      	cmp	r6, #0
 80072ca:	d14f      	bne.n	800736c <_strtod_l+0x38c>
 80072cc:	9904      	ldr	r1, [sp, #16]
 80072ce:	4301      	orrs	r1, r0
 80072d0:	f47f aec1 	bne.w	8007056 <_strtod_l+0x76>
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f47f aedb 	bne.w	8007090 <_strtod_l+0xb0>
 80072da:	2a69      	cmp	r2, #105	; 0x69
 80072dc:	d029      	beq.n	8007332 <_strtod_l+0x352>
 80072de:	dc26      	bgt.n	800732e <_strtod_l+0x34e>
 80072e0:	2a49      	cmp	r2, #73	; 0x49
 80072e2:	d026      	beq.n	8007332 <_strtod_l+0x352>
 80072e4:	2a4e      	cmp	r2, #78	; 0x4e
 80072e6:	f47f aed3 	bne.w	8007090 <_strtod_l+0xb0>
 80072ea:	499b      	ldr	r1, [pc, #620]	; (8007558 <_strtod_l+0x578>)
 80072ec:	a815      	add	r0, sp, #84	; 0x54
 80072ee:	f002 fe81 	bl	8009ff4 <__match>
 80072f2:	2800      	cmp	r0, #0
 80072f4:	f43f aecc 	beq.w	8007090 <_strtod_l+0xb0>
 80072f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	2b28      	cmp	r3, #40	; 0x28
 80072fe:	d12f      	bne.n	8007360 <_strtod_l+0x380>
 8007300:	4996      	ldr	r1, [pc, #600]	; (800755c <_strtod_l+0x57c>)
 8007302:	aa18      	add	r2, sp, #96	; 0x60
 8007304:	a815      	add	r0, sp, #84	; 0x54
 8007306:	f002 fe89 	bl	800a01c <__hexnan>
 800730a:	2805      	cmp	r0, #5
 800730c:	d128      	bne.n	8007360 <_strtod_l+0x380>
 800730e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007310:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007314:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007318:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800731c:	e69b      	b.n	8007056 <_strtod_l+0x76>
 800731e:	9f08      	ldr	r7, [sp, #32]
 8007320:	210a      	movs	r1, #10
 8007322:	fb01 2107 	mla	r1, r1, r7, r2
 8007326:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800732a:	9208      	str	r2, [sp, #32]
 800732c:	e7b5      	b.n	800729a <_strtod_l+0x2ba>
 800732e:	2a6e      	cmp	r2, #110	; 0x6e
 8007330:	e7d9      	b.n	80072e6 <_strtod_l+0x306>
 8007332:	498b      	ldr	r1, [pc, #556]	; (8007560 <_strtod_l+0x580>)
 8007334:	a815      	add	r0, sp, #84	; 0x54
 8007336:	f002 fe5d 	bl	8009ff4 <__match>
 800733a:	2800      	cmp	r0, #0
 800733c:	f43f aea8 	beq.w	8007090 <_strtod_l+0xb0>
 8007340:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007342:	4988      	ldr	r1, [pc, #544]	; (8007564 <_strtod_l+0x584>)
 8007344:	3b01      	subs	r3, #1
 8007346:	a815      	add	r0, sp, #84	; 0x54
 8007348:	9315      	str	r3, [sp, #84]	; 0x54
 800734a:	f002 fe53 	bl	8009ff4 <__match>
 800734e:	b910      	cbnz	r0, 8007356 <_strtod_l+0x376>
 8007350:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007352:	3301      	adds	r3, #1
 8007354:	9315      	str	r3, [sp, #84]	; 0x54
 8007356:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007574 <_strtod_l+0x594>
 800735a:	f04f 0800 	mov.w	r8, #0
 800735e:	e67a      	b.n	8007056 <_strtod_l+0x76>
 8007360:	4881      	ldr	r0, [pc, #516]	; (8007568 <_strtod_l+0x588>)
 8007362:	f001 fcd1 	bl	8008d08 <nan>
 8007366:	ec59 8b10 	vmov	r8, r9, d0
 800736a:	e674      	b.n	8007056 <_strtod_l+0x76>
 800736c:	9b05      	ldr	r3, [sp, #20]
 800736e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007370:	1afb      	subs	r3, r7, r3
 8007372:	f1bb 0f00 	cmp.w	fp, #0
 8007376:	bf08      	it	eq
 8007378:	46b3      	moveq	fp, r6
 800737a:	2e10      	cmp	r6, #16
 800737c:	9308      	str	r3, [sp, #32]
 800737e:	4635      	mov	r5, r6
 8007380:	bfa8      	it	ge
 8007382:	2510      	movge	r5, #16
 8007384:	f7f9 f8ce 	bl	8000524 <__aeabi_ui2d>
 8007388:	2e09      	cmp	r6, #9
 800738a:	4680      	mov	r8, r0
 800738c:	4689      	mov	r9, r1
 800738e:	dd13      	ble.n	80073b8 <_strtod_l+0x3d8>
 8007390:	4b76      	ldr	r3, [pc, #472]	; (800756c <_strtod_l+0x58c>)
 8007392:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007396:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800739a:	f7f9 f93d 	bl	8000618 <__aeabi_dmul>
 800739e:	4680      	mov	r8, r0
 80073a0:	4650      	mov	r0, sl
 80073a2:	4689      	mov	r9, r1
 80073a4:	f7f9 f8be 	bl	8000524 <__aeabi_ui2d>
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	4640      	mov	r0, r8
 80073ae:	4649      	mov	r1, r9
 80073b0:	f7f8 ff7c 	bl	80002ac <__adddf3>
 80073b4:	4680      	mov	r8, r0
 80073b6:	4689      	mov	r9, r1
 80073b8:	2e0f      	cmp	r6, #15
 80073ba:	dc38      	bgt.n	800742e <_strtod_l+0x44e>
 80073bc:	9b08      	ldr	r3, [sp, #32]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f43f ae49 	beq.w	8007056 <_strtod_l+0x76>
 80073c4:	dd24      	ble.n	8007410 <_strtod_l+0x430>
 80073c6:	2b16      	cmp	r3, #22
 80073c8:	dc0b      	bgt.n	80073e2 <_strtod_l+0x402>
 80073ca:	4968      	ldr	r1, [pc, #416]	; (800756c <_strtod_l+0x58c>)
 80073cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80073d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073d4:	4642      	mov	r2, r8
 80073d6:	464b      	mov	r3, r9
 80073d8:	f7f9 f91e 	bl	8000618 <__aeabi_dmul>
 80073dc:	4680      	mov	r8, r0
 80073de:	4689      	mov	r9, r1
 80073e0:	e639      	b.n	8007056 <_strtod_l+0x76>
 80073e2:	9a08      	ldr	r2, [sp, #32]
 80073e4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80073e8:	4293      	cmp	r3, r2
 80073ea:	db20      	blt.n	800742e <_strtod_l+0x44e>
 80073ec:	4c5f      	ldr	r4, [pc, #380]	; (800756c <_strtod_l+0x58c>)
 80073ee:	f1c6 060f 	rsb	r6, r6, #15
 80073f2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80073f6:	4642      	mov	r2, r8
 80073f8:	464b      	mov	r3, r9
 80073fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073fe:	f7f9 f90b 	bl	8000618 <__aeabi_dmul>
 8007402:	9b08      	ldr	r3, [sp, #32]
 8007404:	1b9e      	subs	r6, r3, r6
 8007406:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800740a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800740e:	e7e3      	b.n	80073d8 <_strtod_l+0x3f8>
 8007410:	9b08      	ldr	r3, [sp, #32]
 8007412:	3316      	adds	r3, #22
 8007414:	db0b      	blt.n	800742e <_strtod_l+0x44e>
 8007416:	9b05      	ldr	r3, [sp, #20]
 8007418:	1bdf      	subs	r7, r3, r7
 800741a:	4b54      	ldr	r3, [pc, #336]	; (800756c <_strtod_l+0x58c>)
 800741c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007424:	4640      	mov	r0, r8
 8007426:	4649      	mov	r1, r9
 8007428:	f7f9 fa20 	bl	800086c <__aeabi_ddiv>
 800742c:	e7d6      	b.n	80073dc <_strtod_l+0x3fc>
 800742e:	9b08      	ldr	r3, [sp, #32]
 8007430:	1b75      	subs	r5, r6, r5
 8007432:	441d      	add	r5, r3
 8007434:	2d00      	cmp	r5, #0
 8007436:	dd70      	ble.n	800751a <_strtod_l+0x53a>
 8007438:	f015 030f 	ands.w	r3, r5, #15
 800743c:	d00a      	beq.n	8007454 <_strtod_l+0x474>
 800743e:	494b      	ldr	r1, [pc, #300]	; (800756c <_strtod_l+0x58c>)
 8007440:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007444:	4642      	mov	r2, r8
 8007446:	464b      	mov	r3, r9
 8007448:	e9d1 0100 	ldrd	r0, r1, [r1]
 800744c:	f7f9 f8e4 	bl	8000618 <__aeabi_dmul>
 8007450:	4680      	mov	r8, r0
 8007452:	4689      	mov	r9, r1
 8007454:	f035 050f 	bics.w	r5, r5, #15
 8007458:	d04d      	beq.n	80074f6 <_strtod_l+0x516>
 800745a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800745e:	dd22      	ble.n	80074a6 <_strtod_l+0x4c6>
 8007460:	2500      	movs	r5, #0
 8007462:	46ab      	mov	fp, r5
 8007464:	9509      	str	r5, [sp, #36]	; 0x24
 8007466:	9505      	str	r5, [sp, #20]
 8007468:	2322      	movs	r3, #34	; 0x22
 800746a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007574 <_strtod_l+0x594>
 800746e:	6023      	str	r3, [r4, #0]
 8007470:	f04f 0800 	mov.w	r8, #0
 8007474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007476:	2b00      	cmp	r3, #0
 8007478:	f43f aded 	beq.w	8007056 <_strtod_l+0x76>
 800747c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800747e:	4620      	mov	r0, r4
 8007480:	f002 ff6e 	bl	800a360 <_Bfree>
 8007484:	9905      	ldr	r1, [sp, #20]
 8007486:	4620      	mov	r0, r4
 8007488:	f002 ff6a 	bl	800a360 <_Bfree>
 800748c:	4659      	mov	r1, fp
 800748e:	4620      	mov	r0, r4
 8007490:	f002 ff66 	bl	800a360 <_Bfree>
 8007494:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007496:	4620      	mov	r0, r4
 8007498:	f002 ff62 	bl	800a360 <_Bfree>
 800749c:	4629      	mov	r1, r5
 800749e:	4620      	mov	r0, r4
 80074a0:	f002 ff5e 	bl	800a360 <_Bfree>
 80074a4:	e5d7      	b.n	8007056 <_strtod_l+0x76>
 80074a6:	4b32      	ldr	r3, [pc, #200]	; (8007570 <_strtod_l+0x590>)
 80074a8:	9304      	str	r3, [sp, #16]
 80074aa:	2300      	movs	r3, #0
 80074ac:	112d      	asrs	r5, r5, #4
 80074ae:	4640      	mov	r0, r8
 80074b0:	4649      	mov	r1, r9
 80074b2:	469a      	mov	sl, r3
 80074b4:	2d01      	cmp	r5, #1
 80074b6:	dc21      	bgt.n	80074fc <_strtod_l+0x51c>
 80074b8:	b10b      	cbz	r3, 80074be <_strtod_l+0x4de>
 80074ba:	4680      	mov	r8, r0
 80074bc:	4689      	mov	r9, r1
 80074be:	492c      	ldr	r1, [pc, #176]	; (8007570 <_strtod_l+0x590>)
 80074c0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80074c4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80074c8:	4642      	mov	r2, r8
 80074ca:	464b      	mov	r3, r9
 80074cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074d0:	f7f9 f8a2 	bl	8000618 <__aeabi_dmul>
 80074d4:	4b27      	ldr	r3, [pc, #156]	; (8007574 <_strtod_l+0x594>)
 80074d6:	460a      	mov	r2, r1
 80074d8:	400b      	ands	r3, r1
 80074da:	4927      	ldr	r1, [pc, #156]	; (8007578 <_strtod_l+0x598>)
 80074dc:	428b      	cmp	r3, r1
 80074de:	4680      	mov	r8, r0
 80074e0:	d8be      	bhi.n	8007460 <_strtod_l+0x480>
 80074e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80074e6:	428b      	cmp	r3, r1
 80074e8:	bf86      	itte	hi
 80074ea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800757c <_strtod_l+0x59c>
 80074ee:	f04f 38ff 	movhi.w	r8, #4294967295
 80074f2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80074f6:	2300      	movs	r3, #0
 80074f8:	9304      	str	r3, [sp, #16]
 80074fa:	e07b      	b.n	80075f4 <_strtod_l+0x614>
 80074fc:	07ea      	lsls	r2, r5, #31
 80074fe:	d505      	bpl.n	800750c <_strtod_l+0x52c>
 8007500:	9b04      	ldr	r3, [sp, #16]
 8007502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007506:	f7f9 f887 	bl	8000618 <__aeabi_dmul>
 800750a:	2301      	movs	r3, #1
 800750c:	9a04      	ldr	r2, [sp, #16]
 800750e:	3208      	adds	r2, #8
 8007510:	f10a 0a01 	add.w	sl, sl, #1
 8007514:	106d      	asrs	r5, r5, #1
 8007516:	9204      	str	r2, [sp, #16]
 8007518:	e7cc      	b.n	80074b4 <_strtod_l+0x4d4>
 800751a:	d0ec      	beq.n	80074f6 <_strtod_l+0x516>
 800751c:	426d      	negs	r5, r5
 800751e:	f015 020f 	ands.w	r2, r5, #15
 8007522:	d00a      	beq.n	800753a <_strtod_l+0x55a>
 8007524:	4b11      	ldr	r3, [pc, #68]	; (800756c <_strtod_l+0x58c>)
 8007526:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800752a:	4640      	mov	r0, r8
 800752c:	4649      	mov	r1, r9
 800752e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007532:	f7f9 f99b 	bl	800086c <__aeabi_ddiv>
 8007536:	4680      	mov	r8, r0
 8007538:	4689      	mov	r9, r1
 800753a:	112d      	asrs	r5, r5, #4
 800753c:	d0db      	beq.n	80074f6 <_strtod_l+0x516>
 800753e:	2d1f      	cmp	r5, #31
 8007540:	dd1e      	ble.n	8007580 <_strtod_l+0x5a0>
 8007542:	2500      	movs	r5, #0
 8007544:	46ab      	mov	fp, r5
 8007546:	9509      	str	r5, [sp, #36]	; 0x24
 8007548:	9505      	str	r5, [sp, #20]
 800754a:	2322      	movs	r3, #34	; 0x22
 800754c:	f04f 0800 	mov.w	r8, #0
 8007550:	f04f 0900 	mov.w	r9, #0
 8007554:	6023      	str	r3, [r4, #0]
 8007556:	e78d      	b.n	8007474 <_strtod_l+0x494>
 8007558:	0800d2f5 	.word	0x0800d2f5
 800755c:	0800d2a8 	.word	0x0800d2a8
 8007560:	0800d2ed 	.word	0x0800d2ed
 8007564:	0800d325 	.word	0x0800d325
 8007568:	0800d6cc 	.word	0x0800d6cc
 800756c:	0800d490 	.word	0x0800d490
 8007570:	0800d468 	.word	0x0800d468
 8007574:	7ff00000 	.word	0x7ff00000
 8007578:	7ca00000 	.word	0x7ca00000
 800757c:	7fefffff 	.word	0x7fefffff
 8007580:	f015 0310 	ands.w	r3, r5, #16
 8007584:	bf18      	it	ne
 8007586:	236a      	movne	r3, #106	; 0x6a
 8007588:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800792c <_strtod_l+0x94c>
 800758c:	9304      	str	r3, [sp, #16]
 800758e:	4640      	mov	r0, r8
 8007590:	4649      	mov	r1, r9
 8007592:	2300      	movs	r3, #0
 8007594:	07ea      	lsls	r2, r5, #31
 8007596:	d504      	bpl.n	80075a2 <_strtod_l+0x5c2>
 8007598:	e9da 2300 	ldrd	r2, r3, [sl]
 800759c:	f7f9 f83c 	bl	8000618 <__aeabi_dmul>
 80075a0:	2301      	movs	r3, #1
 80075a2:	106d      	asrs	r5, r5, #1
 80075a4:	f10a 0a08 	add.w	sl, sl, #8
 80075a8:	d1f4      	bne.n	8007594 <_strtod_l+0x5b4>
 80075aa:	b10b      	cbz	r3, 80075b0 <_strtod_l+0x5d0>
 80075ac:	4680      	mov	r8, r0
 80075ae:	4689      	mov	r9, r1
 80075b0:	9b04      	ldr	r3, [sp, #16]
 80075b2:	b1bb      	cbz	r3, 80075e4 <_strtod_l+0x604>
 80075b4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80075b8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80075bc:	2b00      	cmp	r3, #0
 80075be:	4649      	mov	r1, r9
 80075c0:	dd10      	ble.n	80075e4 <_strtod_l+0x604>
 80075c2:	2b1f      	cmp	r3, #31
 80075c4:	f340 811e 	ble.w	8007804 <_strtod_l+0x824>
 80075c8:	2b34      	cmp	r3, #52	; 0x34
 80075ca:	bfde      	ittt	le
 80075cc:	f04f 33ff 	movle.w	r3, #4294967295
 80075d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80075d4:	4093      	lslle	r3, r2
 80075d6:	f04f 0800 	mov.w	r8, #0
 80075da:	bfcc      	ite	gt
 80075dc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80075e0:	ea03 0901 	andle.w	r9, r3, r1
 80075e4:	2200      	movs	r2, #0
 80075e6:	2300      	movs	r3, #0
 80075e8:	4640      	mov	r0, r8
 80075ea:	4649      	mov	r1, r9
 80075ec:	f7f9 fa7c 	bl	8000ae8 <__aeabi_dcmpeq>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	d1a6      	bne.n	8007542 <_strtod_l+0x562>
 80075f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075fa:	4633      	mov	r3, r6
 80075fc:	465a      	mov	r2, fp
 80075fe:	4620      	mov	r0, r4
 8007600:	f002 ff16 	bl	800a430 <__s2b>
 8007604:	9009      	str	r0, [sp, #36]	; 0x24
 8007606:	2800      	cmp	r0, #0
 8007608:	f43f af2a 	beq.w	8007460 <_strtod_l+0x480>
 800760c:	9a08      	ldr	r2, [sp, #32]
 800760e:	9b05      	ldr	r3, [sp, #20]
 8007610:	2a00      	cmp	r2, #0
 8007612:	eba3 0307 	sub.w	r3, r3, r7
 8007616:	bfa8      	it	ge
 8007618:	2300      	movge	r3, #0
 800761a:	930c      	str	r3, [sp, #48]	; 0x30
 800761c:	2500      	movs	r5, #0
 800761e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007622:	9312      	str	r3, [sp, #72]	; 0x48
 8007624:	46ab      	mov	fp, r5
 8007626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007628:	4620      	mov	r0, r4
 800762a:	6859      	ldr	r1, [r3, #4]
 800762c:	f002 fe58 	bl	800a2e0 <_Balloc>
 8007630:	9005      	str	r0, [sp, #20]
 8007632:	2800      	cmp	r0, #0
 8007634:	f43f af18 	beq.w	8007468 <_strtod_l+0x488>
 8007638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800763a:	691a      	ldr	r2, [r3, #16]
 800763c:	3202      	adds	r2, #2
 800763e:	f103 010c 	add.w	r1, r3, #12
 8007642:	0092      	lsls	r2, r2, #2
 8007644:	300c      	adds	r0, #12
 8007646:	f001 fb50 	bl	8008cea <memcpy>
 800764a:	ec49 8b10 	vmov	d0, r8, r9
 800764e:	aa18      	add	r2, sp, #96	; 0x60
 8007650:	a917      	add	r1, sp, #92	; 0x5c
 8007652:	4620      	mov	r0, r4
 8007654:	f003 fa20 	bl	800aa98 <__d2b>
 8007658:	ec49 8b18 	vmov	d8, r8, r9
 800765c:	9016      	str	r0, [sp, #88]	; 0x58
 800765e:	2800      	cmp	r0, #0
 8007660:	f43f af02 	beq.w	8007468 <_strtod_l+0x488>
 8007664:	2101      	movs	r1, #1
 8007666:	4620      	mov	r0, r4
 8007668:	f002 ff7a 	bl	800a560 <__i2b>
 800766c:	4683      	mov	fp, r0
 800766e:	2800      	cmp	r0, #0
 8007670:	f43f aefa 	beq.w	8007468 <_strtod_l+0x488>
 8007674:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007676:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007678:	2e00      	cmp	r6, #0
 800767a:	bfab      	itete	ge
 800767c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800767e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007680:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007682:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007686:	bfac      	ite	ge
 8007688:	eb06 0a03 	addge.w	sl, r6, r3
 800768c:	1b9f      	sublt	r7, r3, r6
 800768e:	9b04      	ldr	r3, [sp, #16]
 8007690:	1af6      	subs	r6, r6, r3
 8007692:	4416      	add	r6, r2
 8007694:	4ba0      	ldr	r3, [pc, #640]	; (8007918 <_strtod_l+0x938>)
 8007696:	3e01      	subs	r6, #1
 8007698:	429e      	cmp	r6, r3
 800769a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800769e:	f280 80c4 	bge.w	800782a <_strtod_l+0x84a>
 80076a2:	1b9b      	subs	r3, r3, r6
 80076a4:	2b1f      	cmp	r3, #31
 80076a6:	eba2 0203 	sub.w	r2, r2, r3
 80076aa:	f04f 0101 	mov.w	r1, #1
 80076ae:	f300 80b0 	bgt.w	8007812 <_strtod_l+0x832>
 80076b2:	fa01 f303 	lsl.w	r3, r1, r3
 80076b6:	930e      	str	r3, [sp, #56]	; 0x38
 80076b8:	2300      	movs	r3, #0
 80076ba:	930d      	str	r3, [sp, #52]	; 0x34
 80076bc:	eb0a 0602 	add.w	r6, sl, r2
 80076c0:	9b04      	ldr	r3, [sp, #16]
 80076c2:	45b2      	cmp	sl, r6
 80076c4:	4417      	add	r7, r2
 80076c6:	441f      	add	r7, r3
 80076c8:	4653      	mov	r3, sl
 80076ca:	bfa8      	it	ge
 80076cc:	4633      	movge	r3, r6
 80076ce:	42bb      	cmp	r3, r7
 80076d0:	bfa8      	it	ge
 80076d2:	463b      	movge	r3, r7
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	bfc2      	ittt	gt
 80076d8:	1af6      	subgt	r6, r6, r3
 80076da:	1aff      	subgt	r7, r7, r3
 80076dc:	ebaa 0a03 	subgt.w	sl, sl, r3
 80076e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	dd17      	ble.n	8007716 <_strtod_l+0x736>
 80076e6:	4659      	mov	r1, fp
 80076e8:	461a      	mov	r2, r3
 80076ea:	4620      	mov	r0, r4
 80076ec:	f002 fff8 	bl	800a6e0 <__pow5mult>
 80076f0:	4683      	mov	fp, r0
 80076f2:	2800      	cmp	r0, #0
 80076f4:	f43f aeb8 	beq.w	8007468 <_strtod_l+0x488>
 80076f8:	4601      	mov	r1, r0
 80076fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80076fc:	4620      	mov	r0, r4
 80076fe:	f002 ff45 	bl	800a58c <__multiply>
 8007702:	900b      	str	r0, [sp, #44]	; 0x2c
 8007704:	2800      	cmp	r0, #0
 8007706:	f43f aeaf 	beq.w	8007468 <_strtod_l+0x488>
 800770a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800770c:	4620      	mov	r0, r4
 800770e:	f002 fe27 	bl	800a360 <_Bfree>
 8007712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007714:	9316      	str	r3, [sp, #88]	; 0x58
 8007716:	2e00      	cmp	r6, #0
 8007718:	f300 808c 	bgt.w	8007834 <_strtod_l+0x854>
 800771c:	9b08      	ldr	r3, [sp, #32]
 800771e:	2b00      	cmp	r3, #0
 8007720:	dd08      	ble.n	8007734 <_strtod_l+0x754>
 8007722:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007724:	9905      	ldr	r1, [sp, #20]
 8007726:	4620      	mov	r0, r4
 8007728:	f002 ffda 	bl	800a6e0 <__pow5mult>
 800772c:	9005      	str	r0, [sp, #20]
 800772e:	2800      	cmp	r0, #0
 8007730:	f43f ae9a 	beq.w	8007468 <_strtod_l+0x488>
 8007734:	2f00      	cmp	r7, #0
 8007736:	dd08      	ble.n	800774a <_strtod_l+0x76a>
 8007738:	9905      	ldr	r1, [sp, #20]
 800773a:	463a      	mov	r2, r7
 800773c:	4620      	mov	r0, r4
 800773e:	f003 f829 	bl	800a794 <__lshift>
 8007742:	9005      	str	r0, [sp, #20]
 8007744:	2800      	cmp	r0, #0
 8007746:	f43f ae8f 	beq.w	8007468 <_strtod_l+0x488>
 800774a:	f1ba 0f00 	cmp.w	sl, #0
 800774e:	dd08      	ble.n	8007762 <_strtod_l+0x782>
 8007750:	4659      	mov	r1, fp
 8007752:	4652      	mov	r2, sl
 8007754:	4620      	mov	r0, r4
 8007756:	f003 f81d 	bl	800a794 <__lshift>
 800775a:	4683      	mov	fp, r0
 800775c:	2800      	cmp	r0, #0
 800775e:	f43f ae83 	beq.w	8007468 <_strtod_l+0x488>
 8007762:	9a05      	ldr	r2, [sp, #20]
 8007764:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007766:	4620      	mov	r0, r4
 8007768:	f003 f89c 	bl	800a8a4 <__mdiff>
 800776c:	4605      	mov	r5, r0
 800776e:	2800      	cmp	r0, #0
 8007770:	f43f ae7a 	beq.w	8007468 <_strtod_l+0x488>
 8007774:	68c3      	ldr	r3, [r0, #12]
 8007776:	930b      	str	r3, [sp, #44]	; 0x2c
 8007778:	2300      	movs	r3, #0
 800777a:	60c3      	str	r3, [r0, #12]
 800777c:	4659      	mov	r1, fp
 800777e:	f003 f875 	bl	800a86c <__mcmp>
 8007782:	2800      	cmp	r0, #0
 8007784:	da60      	bge.n	8007848 <_strtod_l+0x868>
 8007786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007788:	ea53 0308 	orrs.w	r3, r3, r8
 800778c:	f040 8084 	bne.w	8007898 <_strtod_l+0x8b8>
 8007790:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007794:	2b00      	cmp	r3, #0
 8007796:	d17f      	bne.n	8007898 <_strtod_l+0x8b8>
 8007798:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800779c:	0d1b      	lsrs	r3, r3, #20
 800779e:	051b      	lsls	r3, r3, #20
 80077a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80077a4:	d978      	bls.n	8007898 <_strtod_l+0x8b8>
 80077a6:	696b      	ldr	r3, [r5, #20]
 80077a8:	b913      	cbnz	r3, 80077b0 <_strtod_l+0x7d0>
 80077aa:	692b      	ldr	r3, [r5, #16]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	dd73      	ble.n	8007898 <_strtod_l+0x8b8>
 80077b0:	4629      	mov	r1, r5
 80077b2:	2201      	movs	r2, #1
 80077b4:	4620      	mov	r0, r4
 80077b6:	f002 ffed 	bl	800a794 <__lshift>
 80077ba:	4659      	mov	r1, fp
 80077bc:	4605      	mov	r5, r0
 80077be:	f003 f855 	bl	800a86c <__mcmp>
 80077c2:	2800      	cmp	r0, #0
 80077c4:	dd68      	ble.n	8007898 <_strtod_l+0x8b8>
 80077c6:	9904      	ldr	r1, [sp, #16]
 80077c8:	4a54      	ldr	r2, [pc, #336]	; (800791c <_strtod_l+0x93c>)
 80077ca:	464b      	mov	r3, r9
 80077cc:	2900      	cmp	r1, #0
 80077ce:	f000 8084 	beq.w	80078da <_strtod_l+0x8fa>
 80077d2:	ea02 0109 	and.w	r1, r2, r9
 80077d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80077da:	dc7e      	bgt.n	80078da <_strtod_l+0x8fa>
 80077dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80077e0:	f77f aeb3 	ble.w	800754a <_strtod_l+0x56a>
 80077e4:	4b4e      	ldr	r3, [pc, #312]	; (8007920 <_strtod_l+0x940>)
 80077e6:	4640      	mov	r0, r8
 80077e8:	4649      	mov	r1, r9
 80077ea:	2200      	movs	r2, #0
 80077ec:	f7f8 ff14 	bl	8000618 <__aeabi_dmul>
 80077f0:	4b4a      	ldr	r3, [pc, #296]	; (800791c <_strtod_l+0x93c>)
 80077f2:	400b      	ands	r3, r1
 80077f4:	4680      	mov	r8, r0
 80077f6:	4689      	mov	r9, r1
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f47f ae3f 	bne.w	800747c <_strtod_l+0x49c>
 80077fe:	2322      	movs	r3, #34	; 0x22
 8007800:	6023      	str	r3, [r4, #0]
 8007802:	e63b      	b.n	800747c <_strtod_l+0x49c>
 8007804:	f04f 32ff 	mov.w	r2, #4294967295
 8007808:	fa02 f303 	lsl.w	r3, r2, r3
 800780c:	ea03 0808 	and.w	r8, r3, r8
 8007810:	e6e8      	b.n	80075e4 <_strtod_l+0x604>
 8007812:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007816:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800781a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800781e:	36e2      	adds	r6, #226	; 0xe2
 8007820:	fa01 f306 	lsl.w	r3, r1, r6
 8007824:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007828:	e748      	b.n	80076bc <_strtod_l+0x6dc>
 800782a:	2100      	movs	r1, #0
 800782c:	2301      	movs	r3, #1
 800782e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8007832:	e743      	b.n	80076bc <_strtod_l+0x6dc>
 8007834:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007836:	4632      	mov	r2, r6
 8007838:	4620      	mov	r0, r4
 800783a:	f002 ffab 	bl	800a794 <__lshift>
 800783e:	9016      	str	r0, [sp, #88]	; 0x58
 8007840:	2800      	cmp	r0, #0
 8007842:	f47f af6b 	bne.w	800771c <_strtod_l+0x73c>
 8007846:	e60f      	b.n	8007468 <_strtod_l+0x488>
 8007848:	46ca      	mov	sl, r9
 800784a:	d171      	bne.n	8007930 <_strtod_l+0x950>
 800784c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800784e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007852:	b352      	cbz	r2, 80078aa <_strtod_l+0x8ca>
 8007854:	4a33      	ldr	r2, [pc, #204]	; (8007924 <_strtod_l+0x944>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d12a      	bne.n	80078b0 <_strtod_l+0x8d0>
 800785a:	9b04      	ldr	r3, [sp, #16]
 800785c:	4641      	mov	r1, r8
 800785e:	b1fb      	cbz	r3, 80078a0 <_strtod_l+0x8c0>
 8007860:	4b2e      	ldr	r3, [pc, #184]	; (800791c <_strtod_l+0x93c>)
 8007862:	ea09 0303 	and.w	r3, r9, r3
 8007866:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800786a:	f04f 32ff 	mov.w	r2, #4294967295
 800786e:	d81a      	bhi.n	80078a6 <_strtod_l+0x8c6>
 8007870:	0d1b      	lsrs	r3, r3, #20
 8007872:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007876:	fa02 f303 	lsl.w	r3, r2, r3
 800787a:	4299      	cmp	r1, r3
 800787c:	d118      	bne.n	80078b0 <_strtod_l+0x8d0>
 800787e:	4b2a      	ldr	r3, [pc, #168]	; (8007928 <_strtod_l+0x948>)
 8007880:	459a      	cmp	sl, r3
 8007882:	d102      	bne.n	800788a <_strtod_l+0x8aa>
 8007884:	3101      	adds	r1, #1
 8007886:	f43f adef 	beq.w	8007468 <_strtod_l+0x488>
 800788a:	4b24      	ldr	r3, [pc, #144]	; (800791c <_strtod_l+0x93c>)
 800788c:	ea0a 0303 	and.w	r3, sl, r3
 8007890:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007894:	f04f 0800 	mov.w	r8, #0
 8007898:	9b04      	ldr	r3, [sp, #16]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1a2      	bne.n	80077e4 <_strtod_l+0x804>
 800789e:	e5ed      	b.n	800747c <_strtod_l+0x49c>
 80078a0:	f04f 33ff 	mov.w	r3, #4294967295
 80078a4:	e7e9      	b.n	800787a <_strtod_l+0x89a>
 80078a6:	4613      	mov	r3, r2
 80078a8:	e7e7      	b.n	800787a <_strtod_l+0x89a>
 80078aa:	ea53 0308 	orrs.w	r3, r3, r8
 80078ae:	d08a      	beq.n	80077c6 <_strtod_l+0x7e6>
 80078b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078b2:	b1e3      	cbz	r3, 80078ee <_strtod_l+0x90e>
 80078b4:	ea13 0f0a 	tst.w	r3, sl
 80078b8:	d0ee      	beq.n	8007898 <_strtod_l+0x8b8>
 80078ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078bc:	9a04      	ldr	r2, [sp, #16]
 80078be:	4640      	mov	r0, r8
 80078c0:	4649      	mov	r1, r9
 80078c2:	b1c3      	cbz	r3, 80078f6 <_strtod_l+0x916>
 80078c4:	f7ff fb6e 	bl	8006fa4 <sulp>
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	ec51 0b18 	vmov	r0, r1, d8
 80078d0:	f7f8 fcec 	bl	80002ac <__adddf3>
 80078d4:	4680      	mov	r8, r0
 80078d6:	4689      	mov	r9, r1
 80078d8:	e7de      	b.n	8007898 <_strtod_l+0x8b8>
 80078da:	4013      	ands	r3, r2
 80078dc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80078e0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80078e4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80078e8:	f04f 38ff 	mov.w	r8, #4294967295
 80078ec:	e7d4      	b.n	8007898 <_strtod_l+0x8b8>
 80078ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078f0:	ea13 0f08 	tst.w	r3, r8
 80078f4:	e7e0      	b.n	80078b8 <_strtod_l+0x8d8>
 80078f6:	f7ff fb55 	bl	8006fa4 <sulp>
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	ec51 0b18 	vmov	r0, r1, d8
 8007902:	f7f8 fcd1 	bl	80002a8 <__aeabi_dsub>
 8007906:	2200      	movs	r2, #0
 8007908:	2300      	movs	r3, #0
 800790a:	4680      	mov	r8, r0
 800790c:	4689      	mov	r9, r1
 800790e:	f7f9 f8eb 	bl	8000ae8 <__aeabi_dcmpeq>
 8007912:	2800      	cmp	r0, #0
 8007914:	d0c0      	beq.n	8007898 <_strtod_l+0x8b8>
 8007916:	e618      	b.n	800754a <_strtod_l+0x56a>
 8007918:	fffffc02 	.word	0xfffffc02
 800791c:	7ff00000 	.word	0x7ff00000
 8007920:	39500000 	.word	0x39500000
 8007924:	000fffff 	.word	0x000fffff
 8007928:	7fefffff 	.word	0x7fefffff
 800792c:	0800d2c0 	.word	0x0800d2c0
 8007930:	4659      	mov	r1, fp
 8007932:	4628      	mov	r0, r5
 8007934:	f003 f90a 	bl	800ab4c <__ratio>
 8007938:	ec57 6b10 	vmov	r6, r7, d0
 800793c:	ee10 0a10 	vmov	r0, s0
 8007940:	2200      	movs	r2, #0
 8007942:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007946:	4639      	mov	r1, r7
 8007948:	f7f9 f8e2 	bl	8000b10 <__aeabi_dcmple>
 800794c:	2800      	cmp	r0, #0
 800794e:	d071      	beq.n	8007a34 <_strtod_l+0xa54>
 8007950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007952:	2b00      	cmp	r3, #0
 8007954:	d17c      	bne.n	8007a50 <_strtod_l+0xa70>
 8007956:	f1b8 0f00 	cmp.w	r8, #0
 800795a:	d15a      	bne.n	8007a12 <_strtod_l+0xa32>
 800795c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007960:	2b00      	cmp	r3, #0
 8007962:	d15d      	bne.n	8007a20 <_strtod_l+0xa40>
 8007964:	4b90      	ldr	r3, [pc, #576]	; (8007ba8 <_strtod_l+0xbc8>)
 8007966:	2200      	movs	r2, #0
 8007968:	4630      	mov	r0, r6
 800796a:	4639      	mov	r1, r7
 800796c:	f7f9 f8c6 	bl	8000afc <__aeabi_dcmplt>
 8007970:	2800      	cmp	r0, #0
 8007972:	d15c      	bne.n	8007a2e <_strtod_l+0xa4e>
 8007974:	4630      	mov	r0, r6
 8007976:	4639      	mov	r1, r7
 8007978:	4b8c      	ldr	r3, [pc, #560]	; (8007bac <_strtod_l+0xbcc>)
 800797a:	2200      	movs	r2, #0
 800797c:	f7f8 fe4c 	bl	8000618 <__aeabi_dmul>
 8007980:	4606      	mov	r6, r0
 8007982:	460f      	mov	r7, r1
 8007984:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007988:	9606      	str	r6, [sp, #24]
 800798a:	9307      	str	r3, [sp, #28]
 800798c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007990:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007994:	4b86      	ldr	r3, [pc, #536]	; (8007bb0 <_strtod_l+0xbd0>)
 8007996:	ea0a 0303 	and.w	r3, sl, r3
 800799a:	930d      	str	r3, [sp, #52]	; 0x34
 800799c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800799e:	4b85      	ldr	r3, [pc, #532]	; (8007bb4 <_strtod_l+0xbd4>)
 80079a0:	429a      	cmp	r2, r3
 80079a2:	f040 8090 	bne.w	8007ac6 <_strtod_l+0xae6>
 80079a6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80079aa:	ec49 8b10 	vmov	d0, r8, r9
 80079ae:	f003 f803 	bl	800a9b8 <__ulp>
 80079b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079b6:	ec51 0b10 	vmov	r0, r1, d0
 80079ba:	f7f8 fe2d 	bl	8000618 <__aeabi_dmul>
 80079be:	4642      	mov	r2, r8
 80079c0:	464b      	mov	r3, r9
 80079c2:	f7f8 fc73 	bl	80002ac <__adddf3>
 80079c6:	460b      	mov	r3, r1
 80079c8:	4979      	ldr	r1, [pc, #484]	; (8007bb0 <_strtod_l+0xbd0>)
 80079ca:	4a7b      	ldr	r2, [pc, #492]	; (8007bb8 <_strtod_l+0xbd8>)
 80079cc:	4019      	ands	r1, r3
 80079ce:	4291      	cmp	r1, r2
 80079d0:	4680      	mov	r8, r0
 80079d2:	d944      	bls.n	8007a5e <_strtod_l+0xa7e>
 80079d4:	ee18 2a90 	vmov	r2, s17
 80079d8:	4b78      	ldr	r3, [pc, #480]	; (8007bbc <_strtod_l+0xbdc>)
 80079da:	429a      	cmp	r2, r3
 80079dc:	d104      	bne.n	80079e8 <_strtod_l+0xa08>
 80079de:	ee18 3a10 	vmov	r3, s16
 80079e2:	3301      	adds	r3, #1
 80079e4:	f43f ad40 	beq.w	8007468 <_strtod_l+0x488>
 80079e8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8007bbc <_strtod_l+0xbdc>
 80079ec:	f04f 38ff 	mov.w	r8, #4294967295
 80079f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80079f2:	4620      	mov	r0, r4
 80079f4:	f002 fcb4 	bl	800a360 <_Bfree>
 80079f8:	9905      	ldr	r1, [sp, #20]
 80079fa:	4620      	mov	r0, r4
 80079fc:	f002 fcb0 	bl	800a360 <_Bfree>
 8007a00:	4659      	mov	r1, fp
 8007a02:	4620      	mov	r0, r4
 8007a04:	f002 fcac 	bl	800a360 <_Bfree>
 8007a08:	4629      	mov	r1, r5
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	f002 fca8 	bl	800a360 <_Bfree>
 8007a10:	e609      	b.n	8007626 <_strtod_l+0x646>
 8007a12:	f1b8 0f01 	cmp.w	r8, #1
 8007a16:	d103      	bne.n	8007a20 <_strtod_l+0xa40>
 8007a18:	f1b9 0f00 	cmp.w	r9, #0
 8007a1c:	f43f ad95 	beq.w	800754a <_strtod_l+0x56a>
 8007a20:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007b78 <_strtod_l+0xb98>
 8007a24:	4f60      	ldr	r7, [pc, #384]	; (8007ba8 <_strtod_l+0xbc8>)
 8007a26:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007a2a:	2600      	movs	r6, #0
 8007a2c:	e7ae      	b.n	800798c <_strtod_l+0x9ac>
 8007a2e:	4f5f      	ldr	r7, [pc, #380]	; (8007bac <_strtod_l+0xbcc>)
 8007a30:	2600      	movs	r6, #0
 8007a32:	e7a7      	b.n	8007984 <_strtod_l+0x9a4>
 8007a34:	4b5d      	ldr	r3, [pc, #372]	; (8007bac <_strtod_l+0xbcc>)
 8007a36:	4630      	mov	r0, r6
 8007a38:	4639      	mov	r1, r7
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f7f8 fdec 	bl	8000618 <__aeabi_dmul>
 8007a40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a42:	4606      	mov	r6, r0
 8007a44:	460f      	mov	r7, r1
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d09c      	beq.n	8007984 <_strtod_l+0x9a4>
 8007a4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007a4e:	e79d      	b.n	800798c <_strtod_l+0x9ac>
 8007a50:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007b80 <_strtod_l+0xba0>
 8007a54:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007a58:	ec57 6b17 	vmov	r6, r7, d7
 8007a5c:	e796      	b.n	800798c <_strtod_l+0x9ac>
 8007a5e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007a62:	9b04      	ldr	r3, [sp, #16]
 8007a64:	46ca      	mov	sl, r9
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1c2      	bne.n	80079f0 <_strtod_l+0xa10>
 8007a6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a70:	0d1b      	lsrs	r3, r3, #20
 8007a72:	051b      	lsls	r3, r3, #20
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d1bb      	bne.n	80079f0 <_strtod_l+0xa10>
 8007a78:	4630      	mov	r0, r6
 8007a7a:	4639      	mov	r1, r7
 8007a7c:	f7f9 f8dc 	bl	8000c38 <__aeabi_d2lz>
 8007a80:	f7f8 fd9c 	bl	80005bc <__aeabi_l2d>
 8007a84:	4602      	mov	r2, r0
 8007a86:	460b      	mov	r3, r1
 8007a88:	4630      	mov	r0, r6
 8007a8a:	4639      	mov	r1, r7
 8007a8c:	f7f8 fc0c 	bl	80002a8 <__aeabi_dsub>
 8007a90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a96:	ea43 0308 	orr.w	r3, r3, r8
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	4606      	mov	r6, r0
 8007a9e:	460f      	mov	r7, r1
 8007aa0:	d054      	beq.n	8007b4c <_strtod_l+0xb6c>
 8007aa2:	a339      	add	r3, pc, #228	; (adr r3, 8007b88 <_strtod_l+0xba8>)
 8007aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa8:	f7f9 f828 	bl	8000afc <__aeabi_dcmplt>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	f47f ace5 	bne.w	800747c <_strtod_l+0x49c>
 8007ab2:	a337      	add	r3, pc, #220	; (adr r3, 8007b90 <_strtod_l+0xbb0>)
 8007ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab8:	4630      	mov	r0, r6
 8007aba:	4639      	mov	r1, r7
 8007abc:	f7f9 f83c 	bl	8000b38 <__aeabi_dcmpgt>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	d095      	beq.n	80079f0 <_strtod_l+0xa10>
 8007ac4:	e4da      	b.n	800747c <_strtod_l+0x49c>
 8007ac6:	9b04      	ldr	r3, [sp, #16]
 8007ac8:	b333      	cbz	r3, 8007b18 <_strtod_l+0xb38>
 8007aca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007acc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007ad0:	d822      	bhi.n	8007b18 <_strtod_l+0xb38>
 8007ad2:	a331      	add	r3, pc, #196	; (adr r3, 8007b98 <_strtod_l+0xbb8>)
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	4630      	mov	r0, r6
 8007ada:	4639      	mov	r1, r7
 8007adc:	f7f9 f818 	bl	8000b10 <__aeabi_dcmple>
 8007ae0:	b1a0      	cbz	r0, 8007b0c <_strtod_l+0xb2c>
 8007ae2:	4639      	mov	r1, r7
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	f7f9 f86f 	bl	8000bc8 <__aeabi_d2uiz>
 8007aea:	2801      	cmp	r0, #1
 8007aec:	bf38      	it	cc
 8007aee:	2001      	movcc	r0, #1
 8007af0:	f7f8 fd18 	bl	8000524 <__aeabi_ui2d>
 8007af4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007af6:	4606      	mov	r6, r0
 8007af8:	460f      	mov	r7, r1
 8007afa:	bb23      	cbnz	r3, 8007b46 <_strtod_l+0xb66>
 8007afc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b00:	9010      	str	r0, [sp, #64]	; 0x40
 8007b02:	9311      	str	r3, [sp, #68]	; 0x44
 8007b04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b08:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007b0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b10:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007b14:	1a9b      	subs	r3, r3, r2
 8007b16:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b18:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007b1c:	eeb0 0a48 	vmov.f32	s0, s16
 8007b20:	eef0 0a68 	vmov.f32	s1, s17
 8007b24:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007b28:	f002 ff46 	bl	800a9b8 <__ulp>
 8007b2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007b30:	ec53 2b10 	vmov	r2, r3, d0
 8007b34:	f7f8 fd70 	bl	8000618 <__aeabi_dmul>
 8007b38:	ec53 2b18 	vmov	r2, r3, d8
 8007b3c:	f7f8 fbb6 	bl	80002ac <__adddf3>
 8007b40:	4680      	mov	r8, r0
 8007b42:	4689      	mov	r9, r1
 8007b44:	e78d      	b.n	8007a62 <_strtod_l+0xa82>
 8007b46:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007b4a:	e7db      	b.n	8007b04 <_strtod_l+0xb24>
 8007b4c:	a314      	add	r3, pc, #80	; (adr r3, 8007ba0 <_strtod_l+0xbc0>)
 8007b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b52:	f7f8 ffd3 	bl	8000afc <__aeabi_dcmplt>
 8007b56:	e7b3      	b.n	8007ac0 <_strtod_l+0xae0>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	930a      	str	r3, [sp, #40]	; 0x28
 8007b5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b60:	6013      	str	r3, [r2, #0]
 8007b62:	f7ff ba7c 	b.w	800705e <_strtod_l+0x7e>
 8007b66:	2a65      	cmp	r2, #101	; 0x65
 8007b68:	f43f ab75 	beq.w	8007256 <_strtod_l+0x276>
 8007b6c:	2a45      	cmp	r2, #69	; 0x45
 8007b6e:	f43f ab72 	beq.w	8007256 <_strtod_l+0x276>
 8007b72:	2301      	movs	r3, #1
 8007b74:	f7ff bbaa 	b.w	80072cc <_strtod_l+0x2ec>
 8007b78:	00000000 	.word	0x00000000
 8007b7c:	bff00000 	.word	0xbff00000
 8007b80:	00000000 	.word	0x00000000
 8007b84:	3ff00000 	.word	0x3ff00000
 8007b88:	94a03595 	.word	0x94a03595
 8007b8c:	3fdfffff 	.word	0x3fdfffff
 8007b90:	35afe535 	.word	0x35afe535
 8007b94:	3fe00000 	.word	0x3fe00000
 8007b98:	ffc00000 	.word	0xffc00000
 8007b9c:	41dfffff 	.word	0x41dfffff
 8007ba0:	94a03595 	.word	0x94a03595
 8007ba4:	3fcfffff 	.word	0x3fcfffff
 8007ba8:	3ff00000 	.word	0x3ff00000
 8007bac:	3fe00000 	.word	0x3fe00000
 8007bb0:	7ff00000 	.word	0x7ff00000
 8007bb4:	7fe00000 	.word	0x7fe00000
 8007bb8:	7c9fffff 	.word	0x7c9fffff
 8007bbc:	7fefffff 	.word	0x7fefffff

08007bc0 <strtod>:
 8007bc0:	460a      	mov	r2, r1
 8007bc2:	4601      	mov	r1, r0
 8007bc4:	4802      	ldr	r0, [pc, #8]	; (8007bd0 <strtod+0x10>)
 8007bc6:	4b03      	ldr	r3, [pc, #12]	; (8007bd4 <strtod+0x14>)
 8007bc8:	6800      	ldr	r0, [r0, #0]
 8007bca:	f7ff ba09 	b.w	8006fe0 <_strtod_l>
 8007bce:	bf00      	nop
 8007bd0:	200001f8 	.word	0x200001f8
 8007bd4:	20000040 	.word	0x20000040

08007bd8 <__cvt>:
 8007bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bdc:	ec55 4b10 	vmov	r4, r5, d0
 8007be0:	2d00      	cmp	r5, #0
 8007be2:	460e      	mov	r6, r1
 8007be4:	4619      	mov	r1, r3
 8007be6:	462b      	mov	r3, r5
 8007be8:	bfbb      	ittet	lt
 8007bea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007bee:	461d      	movlt	r5, r3
 8007bf0:	2300      	movge	r3, #0
 8007bf2:	232d      	movlt	r3, #45	; 0x2d
 8007bf4:	700b      	strb	r3, [r1, #0]
 8007bf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bf8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007bfc:	4691      	mov	r9, r2
 8007bfe:	f023 0820 	bic.w	r8, r3, #32
 8007c02:	bfbc      	itt	lt
 8007c04:	4622      	movlt	r2, r4
 8007c06:	4614      	movlt	r4, r2
 8007c08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c0c:	d005      	beq.n	8007c1a <__cvt+0x42>
 8007c0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c12:	d100      	bne.n	8007c16 <__cvt+0x3e>
 8007c14:	3601      	adds	r6, #1
 8007c16:	2102      	movs	r1, #2
 8007c18:	e000      	b.n	8007c1c <__cvt+0x44>
 8007c1a:	2103      	movs	r1, #3
 8007c1c:	ab03      	add	r3, sp, #12
 8007c1e:	9301      	str	r3, [sp, #4]
 8007c20:	ab02      	add	r3, sp, #8
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	ec45 4b10 	vmov	d0, r4, r5
 8007c28:	4653      	mov	r3, sl
 8007c2a:	4632      	mov	r2, r6
 8007c2c:	f001 f8fc 	bl	8008e28 <_dtoa_r>
 8007c30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c34:	4607      	mov	r7, r0
 8007c36:	d102      	bne.n	8007c3e <__cvt+0x66>
 8007c38:	f019 0f01 	tst.w	r9, #1
 8007c3c:	d022      	beq.n	8007c84 <__cvt+0xac>
 8007c3e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c42:	eb07 0906 	add.w	r9, r7, r6
 8007c46:	d110      	bne.n	8007c6a <__cvt+0x92>
 8007c48:	783b      	ldrb	r3, [r7, #0]
 8007c4a:	2b30      	cmp	r3, #48	; 0x30
 8007c4c:	d10a      	bne.n	8007c64 <__cvt+0x8c>
 8007c4e:	2200      	movs	r2, #0
 8007c50:	2300      	movs	r3, #0
 8007c52:	4620      	mov	r0, r4
 8007c54:	4629      	mov	r1, r5
 8007c56:	f7f8 ff47 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c5a:	b918      	cbnz	r0, 8007c64 <__cvt+0x8c>
 8007c5c:	f1c6 0601 	rsb	r6, r6, #1
 8007c60:	f8ca 6000 	str.w	r6, [sl]
 8007c64:	f8da 3000 	ldr.w	r3, [sl]
 8007c68:	4499      	add	r9, r3
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	4620      	mov	r0, r4
 8007c70:	4629      	mov	r1, r5
 8007c72:	f7f8 ff39 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c76:	b108      	cbz	r0, 8007c7c <__cvt+0xa4>
 8007c78:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c7c:	2230      	movs	r2, #48	; 0x30
 8007c7e:	9b03      	ldr	r3, [sp, #12]
 8007c80:	454b      	cmp	r3, r9
 8007c82:	d307      	bcc.n	8007c94 <__cvt+0xbc>
 8007c84:	9b03      	ldr	r3, [sp, #12]
 8007c86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c88:	1bdb      	subs	r3, r3, r7
 8007c8a:	4638      	mov	r0, r7
 8007c8c:	6013      	str	r3, [r2, #0]
 8007c8e:	b004      	add	sp, #16
 8007c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c94:	1c59      	adds	r1, r3, #1
 8007c96:	9103      	str	r1, [sp, #12]
 8007c98:	701a      	strb	r2, [r3, #0]
 8007c9a:	e7f0      	b.n	8007c7e <__cvt+0xa6>

08007c9c <__exponent>:
 8007c9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2900      	cmp	r1, #0
 8007ca2:	bfb8      	it	lt
 8007ca4:	4249      	neglt	r1, r1
 8007ca6:	f803 2b02 	strb.w	r2, [r3], #2
 8007caa:	bfb4      	ite	lt
 8007cac:	222d      	movlt	r2, #45	; 0x2d
 8007cae:	222b      	movge	r2, #43	; 0x2b
 8007cb0:	2909      	cmp	r1, #9
 8007cb2:	7042      	strb	r2, [r0, #1]
 8007cb4:	dd2a      	ble.n	8007d0c <__exponent+0x70>
 8007cb6:	f10d 0207 	add.w	r2, sp, #7
 8007cba:	4617      	mov	r7, r2
 8007cbc:	260a      	movs	r6, #10
 8007cbe:	4694      	mov	ip, r2
 8007cc0:	fb91 f5f6 	sdiv	r5, r1, r6
 8007cc4:	fb06 1415 	mls	r4, r6, r5, r1
 8007cc8:	3430      	adds	r4, #48	; 0x30
 8007cca:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007cce:	460c      	mov	r4, r1
 8007cd0:	2c63      	cmp	r4, #99	; 0x63
 8007cd2:	f102 32ff 	add.w	r2, r2, #4294967295
 8007cd6:	4629      	mov	r1, r5
 8007cd8:	dcf1      	bgt.n	8007cbe <__exponent+0x22>
 8007cda:	3130      	adds	r1, #48	; 0x30
 8007cdc:	f1ac 0402 	sub.w	r4, ip, #2
 8007ce0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007ce4:	1c41      	adds	r1, r0, #1
 8007ce6:	4622      	mov	r2, r4
 8007ce8:	42ba      	cmp	r2, r7
 8007cea:	d30a      	bcc.n	8007d02 <__exponent+0x66>
 8007cec:	f10d 0209 	add.w	r2, sp, #9
 8007cf0:	eba2 020c 	sub.w	r2, r2, ip
 8007cf4:	42bc      	cmp	r4, r7
 8007cf6:	bf88      	it	hi
 8007cf8:	2200      	movhi	r2, #0
 8007cfa:	4413      	add	r3, r2
 8007cfc:	1a18      	subs	r0, r3, r0
 8007cfe:	b003      	add	sp, #12
 8007d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d02:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007d06:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007d0a:	e7ed      	b.n	8007ce8 <__exponent+0x4c>
 8007d0c:	2330      	movs	r3, #48	; 0x30
 8007d0e:	3130      	adds	r1, #48	; 0x30
 8007d10:	7083      	strb	r3, [r0, #2]
 8007d12:	70c1      	strb	r1, [r0, #3]
 8007d14:	1d03      	adds	r3, r0, #4
 8007d16:	e7f1      	b.n	8007cfc <__exponent+0x60>

08007d18 <_printf_float>:
 8007d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1c:	ed2d 8b02 	vpush	{d8}
 8007d20:	b08d      	sub	sp, #52	; 0x34
 8007d22:	460c      	mov	r4, r1
 8007d24:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d28:	4616      	mov	r6, r2
 8007d2a:	461f      	mov	r7, r3
 8007d2c:	4605      	mov	r5, r0
 8007d2e:	f000 ff65 	bl	8008bfc <_localeconv_r>
 8007d32:	f8d0 a000 	ldr.w	sl, [r0]
 8007d36:	4650      	mov	r0, sl
 8007d38:	f7f8 faaa 	bl	8000290 <strlen>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	9305      	str	r3, [sp, #20]
 8007d44:	f8d8 3000 	ldr.w	r3, [r8]
 8007d48:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007d4c:	3307      	adds	r3, #7
 8007d4e:	f023 0307 	bic.w	r3, r3, #7
 8007d52:	f103 0208 	add.w	r2, r3, #8
 8007d56:	f8c8 2000 	str.w	r2, [r8]
 8007d5a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d62:	9307      	str	r3, [sp, #28]
 8007d64:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d68:	ee08 0a10 	vmov	s16, r0
 8007d6c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007d70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d74:	4b9e      	ldr	r3, [pc, #632]	; (8007ff0 <_printf_float+0x2d8>)
 8007d76:	f04f 32ff 	mov.w	r2, #4294967295
 8007d7a:	f7f8 fee7 	bl	8000b4c <__aeabi_dcmpun>
 8007d7e:	bb88      	cbnz	r0, 8007de4 <_printf_float+0xcc>
 8007d80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d84:	4b9a      	ldr	r3, [pc, #616]	; (8007ff0 <_printf_float+0x2d8>)
 8007d86:	f04f 32ff 	mov.w	r2, #4294967295
 8007d8a:	f7f8 fec1 	bl	8000b10 <__aeabi_dcmple>
 8007d8e:	bb48      	cbnz	r0, 8007de4 <_printf_float+0xcc>
 8007d90:	2200      	movs	r2, #0
 8007d92:	2300      	movs	r3, #0
 8007d94:	4640      	mov	r0, r8
 8007d96:	4649      	mov	r1, r9
 8007d98:	f7f8 feb0 	bl	8000afc <__aeabi_dcmplt>
 8007d9c:	b110      	cbz	r0, 8007da4 <_printf_float+0x8c>
 8007d9e:	232d      	movs	r3, #45	; 0x2d
 8007da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007da4:	4a93      	ldr	r2, [pc, #588]	; (8007ff4 <_printf_float+0x2dc>)
 8007da6:	4b94      	ldr	r3, [pc, #592]	; (8007ff8 <_printf_float+0x2e0>)
 8007da8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007dac:	bf94      	ite	ls
 8007dae:	4690      	movls	r8, r2
 8007db0:	4698      	movhi	r8, r3
 8007db2:	2303      	movs	r3, #3
 8007db4:	6123      	str	r3, [r4, #16]
 8007db6:	9b05      	ldr	r3, [sp, #20]
 8007db8:	f023 0304 	bic.w	r3, r3, #4
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	f04f 0900 	mov.w	r9, #0
 8007dc2:	9700      	str	r7, [sp, #0]
 8007dc4:	4633      	mov	r3, r6
 8007dc6:	aa0b      	add	r2, sp, #44	; 0x2c
 8007dc8:	4621      	mov	r1, r4
 8007dca:	4628      	mov	r0, r5
 8007dcc:	f000 f9da 	bl	8008184 <_printf_common>
 8007dd0:	3001      	adds	r0, #1
 8007dd2:	f040 8090 	bne.w	8007ef6 <_printf_float+0x1de>
 8007dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dda:	b00d      	add	sp, #52	; 0x34
 8007ddc:	ecbd 8b02 	vpop	{d8}
 8007de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de4:	4642      	mov	r2, r8
 8007de6:	464b      	mov	r3, r9
 8007de8:	4640      	mov	r0, r8
 8007dea:	4649      	mov	r1, r9
 8007dec:	f7f8 feae 	bl	8000b4c <__aeabi_dcmpun>
 8007df0:	b140      	cbz	r0, 8007e04 <_printf_float+0xec>
 8007df2:	464b      	mov	r3, r9
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	bfbc      	itt	lt
 8007df8:	232d      	movlt	r3, #45	; 0x2d
 8007dfa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007dfe:	4a7f      	ldr	r2, [pc, #508]	; (8007ffc <_printf_float+0x2e4>)
 8007e00:	4b7f      	ldr	r3, [pc, #508]	; (8008000 <_printf_float+0x2e8>)
 8007e02:	e7d1      	b.n	8007da8 <_printf_float+0x90>
 8007e04:	6863      	ldr	r3, [r4, #4]
 8007e06:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007e0a:	9206      	str	r2, [sp, #24]
 8007e0c:	1c5a      	adds	r2, r3, #1
 8007e0e:	d13f      	bne.n	8007e90 <_printf_float+0x178>
 8007e10:	2306      	movs	r3, #6
 8007e12:	6063      	str	r3, [r4, #4]
 8007e14:	9b05      	ldr	r3, [sp, #20]
 8007e16:	6861      	ldr	r1, [r4, #4]
 8007e18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	9303      	str	r3, [sp, #12]
 8007e20:	ab0a      	add	r3, sp, #40	; 0x28
 8007e22:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e26:	ab09      	add	r3, sp, #36	; 0x24
 8007e28:	ec49 8b10 	vmov	d0, r8, r9
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	6022      	str	r2, [r4, #0]
 8007e30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e34:	4628      	mov	r0, r5
 8007e36:	f7ff fecf 	bl	8007bd8 <__cvt>
 8007e3a:	9b06      	ldr	r3, [sp, #24]
 8007e3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e3e:	2b47      	cmp	r3, #71	; 0x47
 8007e40:	4680      	mov	r8, r0
 8007e42:	d108      	bne.n	8007e56 <_printf_float+0x13e>
 8007e44:	1cc8      	adds	r0, r1, #3
 8007e46:	db02      	blt.n	8007e4e <_printf_float+0x136>
 8007e48:	6863      	ldr	r3, [r4, #4]
 8007e4a:	4299      	cmp	r1, r3
 8007e4c:	dd41      	ble.n	8007ed2 <_printf_float+0x1ba>
 8007e4e:	f1ab 0302 	sub.w	r3, fp, #2
 8007e52:	fa5f fb83 	uxtb.w	fp, r3
 8007e56:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e5a:	d820      	bhi.n	8007e9e <_printf_float+0x186>
 8007e5c:	3901      	subs	r1, #1
 8007e5e:	465a      	mov	r2, fp
 8007e60:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e64:	9109      	str	r1, [sp, #36]	; 0x24
 8007e66:	f7ff ff19 	bl	8007c9c <__exponent>
 8007e6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e6c:	1813      	adds	r3, r2, r0
 8007e6e:	2a01      	cmp	r2, #1
 8007e70:	4681      	mov	r9, r0
 8007e72:	6123      	str	r3, [r4, #16]
 8007e74:	dc02      	bgt.n	8007e7c <_printf_float+0x164>
 8007e76:	6822      	ldr	r2, [r4, #0]
 8007e78:	07d2      	lsls	r2, r2, #31
 8007e7a:	d501      	bpl.n	8007e80 <_printf_float+0x168>
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	6123      	str	r3, [r4, #16]
 8007e80:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d09c      	beq.n	8007dc2 <_printf_float+0xaa>
 8007e88:	232d      	movs	r3, #45	; 0x2d
 8007e8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e8e:	e798      	b.n	8007dc2 <_printf_float+0xaa>
 8007e90:	9a06      	ldr	r2, [sp, #24]
 8007e92:	2a47      	cmp	r2, #71	; 0x47
 8007e94:	d1be      	bne.n	8007e14 <_printf_float+0xfc>
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1bc      	bne.n	8007e14 <_printf_float+0xfc>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e7b9      	b.n	8007e12 <_printf_float+0xfa>
 8007e9e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007ea2:	d118      	bne.n	8007ed6 <_printf_float+0x1be>
 8007ea4:	2900      	cmp	r1, #0
 8007ea6:	6863      	ldr	r3, [r4, #4]
 8007ea8:	dd0b      	ble.n	8007ec2 <_printf_float+0x1aa>
 8007eaa:	6121      	str	r1, [r4, #16]
 8007eac:	b913      	cbnz	r3, 8007eb4 <_printf_float+0x19c>
 8007eae:	6822      	ldr	r2, [r4, #0]
 8007eb0:	07d0      	lsls	r0, r2, #31
 8007eb2:	d502      	bpl.n	8007eba <_printf_float+0x1a2>
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	440b      	add	r3, r1
 8007eb8:	6123      	str	r3, [r4, #16]
 8007eba:	65a1      	str	r1, [r4, #88]	; 0x58
 8007ebc:	f04f 0900 	mov.w	r9, #0
 8007ec0:	e7de      	b.n	8007e80 <_printf_float+0x168>
 8007ec2:	b913      	cbnz	r3, 8007eca <_printf_float+0x1b2>
 8007ec4:	6822      	ldr	r2, [r4, #0]
 8007ec6:	07d2      	lsls	r2, r2, #31
 8007ec8:	d501      	bpl.n	8007ece <_printf_float+0x1b6>
 8007eca:	3302      	adds	r3, #2
 8007ecc:	e7f4      	b.n	8007eb8 <_printf_float+0x1a0>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e7f2      	b.n	8007eb8 <_printf_float+0x1a0>
 8007ed2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ed8:	4299      	cmp	r1, r3
 8007eda:	db05      	blt.n	8007ee8 <_printf_float+0x1d0>
 8007edc:	6823      	ldr	r3, [r4, #0]
 8007ede:	6121      	str	r1, [r4, #16]
 8007ee0:	07d8      	lsls	r0, r3, #31
 8007ee2:	d5ea      	bpl.n	8007eba <_printf_float+0x1a2>
 8007ee4:	1c4b      	adds	r3, r1, #1
 8007ee6:	e7e7      	b.n	8007eb8 <_printf_float+0x1a0>
 8007ee8:	2900      	cmp	r1, #0
 8007eea:	bfd4      	ite	le
 8007eec:	f1c1 0202 	rsble	r2, r1, #2
 8007ef0:	2201      	movgt	r2, #1
 8007ef2:	4413      	add	r3, r2
 8007ef4:	e7e0      	b.n	8007eb8 <_printf_float+0x1a0>
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	055a      	lsls	r2, r3, #21
 8007efa:	d407      	bmi.n	8007f0c <_printf_float+0x1f4>
 8007efc:	6923      	ldr	r3, [r4, #16]
 8007efe:	4642      	mov	r2, r8
 8007f00:	4631      	mov	r1, r6
 8007f02:	4628      	mov	r0, r5
 8007f04:	47b8      	blx	r7
 8007f06:	3001      	adds	r0, #1
 8007f08:	d12c      	bne.n	8007f64 <_printf_float+0x24c>
 8007f0a:	e764      	b.n	8007dd6 <_printf_float+0xbe>
 8007f0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f10:	f240 80e0 	bls.w	80080d4 <_printf_float+0x3bc>
 8007f14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f18:	2200      	movs	r2, #0
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	f7f8 fde4 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	d034      	beq.n	8007f8e <_printf_float+0x276>
 8007f24:	4a37      	ldr	r2, [pc, #220]	; (8008004 <_printf_float+0x2ec>)
 8007f26:	2301      	movs	r3, #1
 8007f28:	4631      	mov	r1, r6
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	47b8      	blx	r7
 8007f2e:	3001      	adds	r0, #1
 8007f30:	f43f af51 	beq.w	8007dd6 <_printf_float+0xbe>
 8007f34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	db02      	blt.n	8007f42 <_printf_float+0x22a>
 8007f3c:	6823      	ldr	r3, [r4, #0]
 8007f3e:	07d8      	lsls	r0, r3, #31
 8007f40:	d510      	bpl.n	8007f64 <_printf_float+0x24c>
 8007f42:	ee18 3a10 	vmov	r3, s16
 8007f46:	4652      	mov	r2, sl
 8007f48:	4631      	mov	r1, r6
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	47b8      	blx	r7
 8007f4e:	3001      	adds	r0, #1
 8007f50:	f43f af41 	beq.w	8007dd6 <_printf_float+0xbe>
 8007f54:	f04f 0800 	mov.w	r8, #0
 8007f58:	f104 091a 	add.w	r9, r4, #26
 8007f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	4543      	cmp	r3, r8
 8007f62:	dc09      	bgt.n	8007f78 <_printf_float+0x260>
 8007f64:	6823      	ldr	r3, [r4, #0]
 8007f66:	079b      	lsls	r3, r3, #30
 8007f68:	f100 8107 	bmi.w	800817a <_printf_float+0x462>
 8007f6c:	68e0      	ldr	r0, [r4, #12]
 8007f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f70:	4298      	cmp	r0, r3
 8007f72:	bfb8      	it	lt
 8007f74:	4618      	movlt	r0, r3
 8007f76:	e730      	b.n	8007dda <_printf_float+0xc2>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	464a      	mov	r2, r9
 8007f7c:	4631      	mov	r1, r6
 8007f7e:	4628      	mov	r0, r5
 8007f80:	47b8      	blx	r7
 8007f82:	3001      	adds	r0, #1
 8007f84:	f43f af27 	beq.w	8007dd6 <_printf_float+0xbe>
 8007f88:	f108 0801 	add.w	r8, r8, #1
 8007f8c:	e7e6      	b.n	8007f5c <_printf_float+0x244>
 8007f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	dc39      	bgt.n	8008008 <_printf_float+0x2f0>
 8007f94:	4a1b      	ldr	r2, [pc, #108]	; (8008004 <_printf_float+0x2ec>)
 8007f96:	2301      	movs	r3, #1
 8007f98:	4631      	mov	r1, r6
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	47b8      	blx	r7
 8007f9e:	3001      	adds	r0, #1
 8007fa0:	f43f af19 	beq.w	8007dd6 <_printf_float+0xbe>
 8007fa4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	d102      	bne.n	8007fb2 <_printf_float+0x29a>
 8007fac:	6823      	ldr	r3, [r4, #0]
 8007fae:	07d9      	lsls	r1, r3, #31
 8007fb0:	d5d8      	bpl.n	8007f64 <_printf_float+0x24c>
 8007fb2:	ee18 3a10 	vmov	r3, s16
 8007fb6:	4652      	mov	r2, sl
 8007fb8:	4631      	mov	r1, r6
 8007fba:	4628      	mov	r0, r5
 8007fbc:	47b8      	blx	r7
 8007fbe:	3001      	adds	r0, #1
 8007fc0:	f43f af09 	beq.w	8007dd6 <_printf_float+0xbe>
 8007fc4:	f04f 0900 	mov.w	r9, #0
 8007fc8:	f104 0a1a 	add.w	sl, r4, #26
 8007fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fce:	425b      	negs	r3, r3
 8007fd0:	454b      	cmp	r3, r9
 8007fd2:	dc01      	bgt.n	8007fd8 <_printf_float+0x2c0>
 8007fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fd6:	e792      	b.n	8007efe <_printf_float+0x1e6>
 8007fd8:	2301      	movs	r3, #1
 8007fda:	4652      	mov	r2, sl
 8007fdc:	4631      	mov	r1, r6
 8007fde:	4628      	mov	r0, r5
 8007fe0:	47b8      	blx	r7
 8007fe2:	3001      	adds	r0, #1
 8007fe4:	f43f aef7 	beq.w	8007dd6 <_printf_float+0xbe>
 8007fe8:	f109 0901 	add.w	r9, r9, #1
 8007fec:	e7ee      	b.n	8007fcc <_printf_float+0x2b4>
 8007fee:	bf00      	nop
 8007ff0:	7fefffff 	.word	0x7fefffff
 8007ff4:	0800d2e8 	.word	0x0800d2e8
 8007ff8:	0800d2ec 	.word	0x0800d2ec
 8007ffc:	0800d2f0 	.word	0x0800d2f0
 8008000:	0800d2f4 	.word	0x0800d2f4
 8008004:	0800d68c 	.word	0x0800d68c
 8008008:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800800a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800800c:	429a      	cmp	r2, r3
 800800e:	bfa8      	it	ge
 8008010:	461a      	movge	r2, r3
 8008012:	2a00      	cmp	r2, #0
 8008014:	4691      	mov	r9, r2
 8008016:	dc37      	bgt.n	8008088 <_printf_float+0x370>
 8008018:	f04f 0b00 	mov.w	fp, #0
 800801c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008020:	f104 021a 	add.w	r2, r4, #26
 8008024:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008026:	9305      	str	r3, [sp, #20]
 8008028:	eba3 0309 	sub.w	r3, r3, r9
 800802c:	455b      	cmp	r3, fp
 800802e:	dc33      	bgt.n	8008098 <_printf_float+0x380>
 8008030:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008034:	429a      	cmp	r2, r3
 8008036:	db3b      	blt.n	80080b0 <_printf_float+0x398>
 8008038:	6823      	ldr	r3, [r4, #0]
 800803a:	07da      	lsls	r2, r3, #31
 800803c:	d438      	bmi.n	80080b0 <_printf_float+0x398>
 800803e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008042:	eba2 0903 	sub.w	r9, r2, r3
 8008046:	9b05      	ldr	r3, [sp, #20]
 8008048:	1ad2      	subs	r2, r2, r3
 800804a:	4591      	cmp	r9, r2
 800804c:	bfa8      	it	ge
 800804e:	4691      	movge	r9, r2
 8008050:	f1b9 0f00 	cmp.w	r9, #0
 8008054:	dc35      	bgt.n	80080c2 <_printf_float+0x3aa>
 8008056:	f04f 0800 	mov.w	r8, #0
 800805a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800805e:	f104 0a1a 	add.w	sl, r4, #26
 8008062:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008066:	1a9b      	subs	r3, r3, r2
 8008068:	eba3 0309 	sub.w	r3, r3, r9
 800806c:	4543      	cmp	r3, r8
 800806e:	f77f af79 	ble.w	8007f64 <_printf_float+0x24c>
 8008072:	2301      	movs	r3, #1
 8008074:	4652      	mov	r2, sl
 8008076:	4631      	mov	r1, r6
 8008078:	4628      	mov	r0, r5
 800807a:	47b8      	blx	r7
 800807c:	3001      	adds	r0, #1
 800807e:	f43f aeaa 	beq.w	8007dd6 <_printf_float+0xbe>
 8008082:	f108 0801 	add.w	r8, r8, #1
 8008086:	e7ec      	b.n	8008062 <_printf_float+0x34a>
 8008088:	4613      	mov	r3, r2
 800808a:	4631      	mov	r1, r6
 800808c:	4642      	mov	r2, r8
 800808e:	4628      	mov	r0, r5
 8008090:	47b8      	blx	r7
 8008092:	3001      	adds	r0, #1
 8008094:	d1c0      	bne.n	8008018 <_printf_float+0x300>
 8008096:	e69e      	b.n	8007dd6 <_printf_float+0xbe>
 8008098:	2301      	movs	r3, #1
 800809a:	4631      	mov	r1, r6
 800809c:	4628      	mov	r0, r5
 800809e:	9205      	str	r2, [sp, #20]
 80080a0:	47b8      	blx	r7
 80080a2:	3001      	adds	r0, #1
 80080a4:	f43f ae97 	beq.w	8007dd6 <_printf_float+0xbe>
 80080a8:	9a05      	ldr	r2, [sp, #20]
 80080aa:	f10b 0b01 	add.w	fp, fp, #1
 80080ae:	e7b9      	b.n	8008024 <_printf_float+0x30c>
 80080b0:	ee18 3a10 	vmov	r3, s16
 80080b4:	4652      	mov	r2, sl
 80080b6:	4631      	mov	r1, r6
 80080b8:	4628      	mov	r0, r5
 80080ba:	47b8      	blx	r7
 80080bc:	3001      	adds	r0, #1
 80080be:	d1be      	bne.n	800803e <_printf_float+0x326>
 80080c0:	e689      	b.n	8007dd6 <_printf_float+0xbe>
 80080c2:	9a05      	ldr	r2, [sp, #20]
 80080c4:	464b      	mov	r3, r9
 80080c6:	4442      	add	r2, r8
 80080c8:	4631      	mov	r1, r6
 80080ca:	4628      	mov	r0, r5
 80080cc:	47b8      	blx	r7
 80080ce:	3001      	adds	r0, #1
 80080d0:	d1c1      	bne.n	8008056 <_printf_float+0x33e>
 80080d2:	e680      	b.n	8007dd6 <_printf_float+0xbe>
 80080d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080d6:	2a01      	cmp	r2, #1
 80080d8:	dc01      	bgt.n	80080de <_printf_float+0x3c6>
 80080da:	07db      	lsls	r3, r3, #31
 80080dc:	d53a      	bpl.n	8008154 <_printf_float+0x43c>
 80080de:	2301      	movs	r3, #1
 80080e0:	4642      	mov	r2, r8
 80080e2:	4631      	mov	r1, r6
 80080e4:	4628      	mov	r0, r5
 80080e6:	47b8      	blx	r7
 80080e8:	3001      	adds	r0, #1
 80080ea:	f43f ae74 	beq.w	8007dd6 <_printf_float+0xbe>
 80080ee:	ee18 3a10 	vmov	r3, s16
 80080f2:	4652      	mov	r2, sl
 80080f4:	4631      	mov	r1, r6
 80080f6:	4628      	mov	r0, r5
 80080f8:	47b8      	blx	r7
 80080fa:	3001      	adds	r0, #1
 80080fc:	f43f ae6b 	beq.w	8007dd6 <_printf_float+0xbe>
 8008100:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008104:	2200      	movs	r2, #0
 8008106:	2300      	movs	r3, #0
 8008108:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800810c:	f7f8 fcec 	bl	8000ae8 <__aeabi_dcmpeq>
 8008110:	b9d8      	cbnz	r0, 800814a <_printf_float+0x432>
 8008112:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008116:	f108 0201 	add.w	r2, r8, #1
 800811a:	4631      	mov	r1, r6
 800811c:	4628      	mov	r0, r5
 800811e:	47b8      	blx	r7
 8008120:	3001      	adds	r0, #1
 8008122:	d10e      	bne.n	8008142 <_printf_float+0x42a>
 8008124:	e657      	b.n	8007dd6 <_printf_float+0xbe>
 8008126:	2301      	movs	r3, #1
 8008128:	4652      	mov	r2, sl
 800812a:	4631      	mov	r1, r6
 800812c:	4628      	mov	r0, r5
 800812e:	47b8      	blx	r7
 8008130:	3001      	adds	r0, #1
 8008132:	f43f ae50 	beq.w	8007dd6 <_printf_float+0xbe>
 8008136:	f108 0801 	add.w	r8, r8, #1
 800813a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800813c:	3b01      	subs	r3, #1
 800813e:	4543      	cmp	r3, r8
 8008140:	dcf1      	bgt.n	8008126 <_printf_float+0x40e>
 8008142:	464b      	mov	r3, r9
 8008144:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008148:	e6da      	b.n	8007f00 <_printf_float+0x1e8>
 800814a:	f04f 0800 	mov.w	r8, #0
 800814e:	f104 0a1a 	add.w	sl, r4, #26
 8008152:	e7f2      	b.n	800813a <_printf_float+0x422>
 8008154:	2301      	movs	r3, #1
 8008156:	4642      	mov	r2, r8
 8008158:	e7df      	b.n	800811a <_printf_float+0x402>
 800815a:	2301      	movs	r3, #1
 800815c:	464a      	mov	r2, r9
 800815e:	4631      	mov	r1, r6
 8008160:	4628      	mov	r0, r5
 8008162:	47b8      	blx	r7
 8008164:	3001      	adds	r0, #1
 8008166:	f43f ae36 	beq.w	8007dd6 <_printf_float+0xbe>
 800816a:	f108 0801 	add.w	r8, r8, #1
 800816e:	68e3      	ldr	r3, [r4, #12]
 8008170:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008172:	1a5b      	subs	r3, r3, r1
 8008174:	4543      	cmp	r3, r8
 8008176:	dcf0      	bgt.n	800815a <_printf_float+0x442>
 8008178:	e6f8      	b.n	8007f6c <_printf_float+0x254>
 800817a:	f04f 0800 	mov.w	r8, #0
 800817e:	f104 0919 	add.w	r9, r4, #25
 8008182:	e7f4      	b.n	800816e <_printf_float+0x456>

08008184 <_printf_common>:
 8008184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008188:	4616      	mov	r6, r2
 800818a:	4699      	mov	r9, r3
 800818c:	688a      	ldr	r2, [r1, #8]
 800818e:	690b      	ldr	r3, [r1, #16]
 8008190:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008194:	4293      	cmp	r3, r2
 8008196:	bfb8      	it	lt
 8008198:	4613      	movlt	r3, r2
 800819a:	6033      	str	r3, [r6, #0]
 800819c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081a0:	4607      	mov	r7, r0
 80081a2:	460c      	mov	r4, r1
 80081a4:	b10a      	cbz	r2, 80081aa <_printf_common+0x26>
 80081a6:	3301      	adds	r3, #1
 80081a8:	6033      	str	r3, [r6, #0]
 80081aa:	6823      	ldr	r3, [r4, #0]
 80081ac:	0699      	lsls	r1, r3, #26
 80081ae:	bf42      	ittt	mi
 80081b0:	6833      	ldrmi	r3, [r6, #0]
 80081b2:	3302      	addmi	r3, #2
 80081b4:	6033      	strmi	r3, [r6, #0]
 80081b6:	6825      	ldr	r5, [r4, #0]
 80081b8:	f015 0506 	ands.w	r5, r5, #6
 80081bc:	d106      	bne.n	80081cc <_printf_common+0x48>
 80081be:	f104 0a19 	add.w	sl, r4, #25
 80081c2:	68e3      	ldr	r3, [r4, #12]
 80081c4:	6832      	ldr	r2, [r6, #0]
 80081c6:	1a9b      	subs	r3, r3, r2
 80081c8:	42ab      	cmp	r3, r5
 80081ca:	dc26      	bgt.n	800821a <_printf_common+0x96>
 80081cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081d0:	1e13      	subs	r3, r2, #0
 80081d2:	6822      	ldr	r2, [r4, #0]
 80081d4:	bf18      	it	ne
 80081d6:	2301      	movne	r3, #1
 80081d8:	0692      	lsls	r2, r2, #26
 80081da:	d42b      	bmi.n	8008234 <_printf_common+0xb0>
 80081dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081e0:	4649      	mov	r1, r9
 80081e2:	4638      	mov	r0, r7
 80081e4:	47c0      	blx	r8
 80081e6:	3001      	adds	r0, #1
 80081e8:	d01e      	beq.n	8008228 <_printf_common+0xa4>
 80081ea:	6823      	ldr	r3, [r4, #0]
 80081ec:	6922      	ldr	r2, [r4, #16]
 80081ee:	f003 0306 	and.w	r3, r3, #6
 80081f2:	2b04      	cmp	r3, #4
 80081f4:	bf02      	ittt	eq
 80081f6:	68e5      	ldreq	r5, [r4, #12]
 80081f8:	6833      	ldreq	r3, [r6, #0]
 80081fa:	1aed      	subeq	r5, r5, r3
 80081fc:	68a3      	ldr	r3, [r4, #8]
 80081fe:	bf0c      	ite	eq
 8008200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008204:	2500      	movne	r5, #0
 8008206:	4293      	cmp	r3, r2
 8008208:	bfc4      	itt	gt
 800820a:	1a9b      	subgt	r3, r3, r2
 800820c:	18ed      	addgt	r5, r5, r3
 800820e:	2600      	movs	r6, #0
 8008210:	341a      	adds	r4, #26
 8008212:	42b5      	cmp	r5, r6
 8008214:	d11a      	bne.n	800824c <_printf_common+0xc8>
 8008216:	2000      	movs	r0, #0
 8008218:	e008      	b.n	800822c <_printf_common+0xa8>
 800821a:	2301      	movs	r3, #1
 800821c:	4652      	mov	r2, sl
 800821e:	4649      	mov	r1, r9
 8008220:	4638      	mov	r0, r7
 8008222:	47c0      	blx	r8
 8008224:	3001      	adds	r0, #1
 8008226:	d103      	bne.n	8008230 <_printf_common+0xac>
 8008228:	f04f 30ff 	mov.w	r0, #4294967295
 800822c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008230:	3501      	adds	r5, #1
 8008232:	e7c6      	b.n	80081c2 <_printf_common+0x3e>
 8008234:	18e1      	adds	r1, r4, r3
 8008236:	1c5a      	adds	r2, r3, #1
 8008238:	2030      	movs	r0, #48	; 0x30
 800823a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800823e:	4422      	add	r2, r4
 8008240:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008244:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008248:	3302      	adds	r3, #2
 800824a:	e7c7      	b.n	80081dc <_printf_common+0x58>
 800824c:	2301      	movs	r3, #1
 800824e:	4622      	mov	r2, r4
 8008250:	4649      	mov	r1, r9
 8008252:	4638      	mov	r0, r7
 8008254:	47c0      	blx	r8
 8008256:	3001      	adds	r0, #1
 8008258:	d0e6      	beq.n	8008228 <_printf_common+0xa4>
 800825a:	3601      	adds	r6, #1
 800825c:	e7d9      	b.n	8008212 <_printf_common+0x8e>
	...

08008260 <_printf_i>:
 8008260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008264:	7e0f      	ldrb	r7, [r1, #24]
 8008266:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008268:	2f78      	cmp	r7, #120	; 0x78
 800826a:	4691      	mov	r9, r2
 800826c:	4680      	mov	r8, r0
 800826e:	460c      	mov	r4, r1
 8008270:	469a      	mov	sl, r3
 8008272:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008276:	d807      	bhi.n	8008288 <_printf_i+0x28>
 8008278:	2f62      	cmp	r7, #98	; 0x62
 800827a:	d80a      	bhi.n	8008292 <_printf_i+0x32>
 800827c:	2f00      	cmp	r7, #0
 800827e:	f000 80d4 	beq.w	800842a <_printf_i+0x1ca>
 8008282:	2f58      	cmp	r7, #88	; 0x58
 8008284:	f000 80c0 	beq.w	8008408 <_printf_i+0x1a8>
 8008288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800828c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008290:	e03a      	b.n	8008308 <_printf_i+0xa8>
 8008292:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008296:	2b15      	cmp	r3, #21
 8008298:	d8f6      	bhi.n	8008288 <_printf_i+0x28>
 800829a:	a101      	add	r1, pc, #4	; (adr r1, 80082a0 <_printf_i+0x40>)
 800829c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082a0:	080082f9 	.word	0x080082f9
 80082a4:	0800830d 	.word	0x0800830d
 80082a8:	08008289 	.word	0x08008289
 80082ac:	08008289 	.word	0x08008289
 80082b0:	08008289 	.word	0x08008289
 80082b4:	08008289 	.word	0x08008289
 80082b8:	0800830d 	.word	0x0800830d
 80082bc:	08008289 	.word	0x08008289
 80082c0:	08008289 	.word	0x08008289
 80082c4:	08008289 	.word	0x08008289
 80082c8:	08008289 	.word	0x08008289
 80082cc:	08008411 	.word	0x08008411
 80082d0:	08008339 	.word	0x08008339
 80082d4:	080083cb 	.word	0x080083cb
 80082d8:	08008289 	.word	0x08008289
 80082dc:	08008289 	.word	0x08008289
 80082e0:	08008433 	.word	0x08008433
 80082e4:	08008289 	.word	0x08008289
 80082e8:	08008339 	.word	0x08008339
 80082ec:	08008289 	.word	0x08008289
 80082f0:	08008289 	.word	0x08008289
 80082f4:	080083d3 	.word	0x080083d3
 80082f8:	682b      	ldr	r3, [r5, #0]
 80082fa:	1d1a      	adds	r2, r3, #4
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	602a      	str	r2, [r5, #0]
 8008300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008308:	2301      	movs	r3, #1
 800830a:	e09f      	b.n	800844c <_printf_i+0x1ec>
 800830c:	6820      	ldr	r0, [r4, #0]
 800830e:	682b      	ldr	r3, [r5, #0]
 8008310:	0607      	lsls	r7, r0, #24
 8008312:	f103 0104 	add.w	r1, r3, #4
 8008316:	6029      	str	r1, [r5, #0]
 8008318:	d501      	bpl.n	800831e <_printf_i+0xbe>
 800831a:	681e      	ldr	r6, [r3, #0]
 800831c:	e003      	b.n	8008326 <_printf_i+0xc6>
 800831e:	0646      	lsls	r6, r0, #25
 8008320:	d5fb      	bpl.n	800831a <_printf_i+0xba>
 8008322:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008326:	2e00      	cmp	r6, #0
 8008328:	da03      	bge.n	8008332 <_printf_i+0xd2>
 800832a:	232d      	movs	r3, #45	; 0x2d
 800832c:	4276      	negs	r6, r6
 800832e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008332:	485a      	ldr	r0, [pc, #360]	; (800849c <_printf_i+0x23c>)
 8008334:	230a      	movs	r3, #10
 8008336:	e012      	b.n	800835e <_printf_i+0xfe>
 8008338:	682b      	ldr	r3, [r5, #0]
 800833a:	6820      	ldr	r0, [r4, #0]
 800833c:	1d19      	adds	r1, r3, #4
 800833e:	6029      	str	r1, [r5, #0]
 8008340:	0605      	lsls	r5, r0, #24
 8008342:	d501      	bpl.n	8008348 <_printf_i+0xe8>
 8008344:	681e      	ldr	r6, [r3, #0]
 8008346:	e002      	b.n	800834e <_printf_i+0xee>
 8008348:	0641      	lsls	r1, r0, #25
 800834a:	d5fb      	bpl.n	8008344 <_printf_i+0xe4>
 800834c:	881e      	ldrh	r6, [r3, #0]
 800834e:	4853      	ldr	r0, [pc, #332]	; (800849c <_printf_i+0x23c>)
 8008350:	2f6f      	cmp	r7, #111	; 0x6f
 8008352:	bf0c      	ite	eq
 8008354:	2308      	moveq	r3, #8
 8008356:	230a      	movne	r3, #10
 8008358:	2100      	movs	r1, #0
 800835a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800835e:	6865      	ldr	r5, [r4, #4]
 8008360:	60a5      	str	r5, [r4, #8]
 8008362:	2d00      	cmp	r5, #0
 8008364:	bfa2      	ittt	ge
 8008366:	6821      	ldrge	r1, [r4, #0]
 8008368:	f021 0104 	bicge.w	r1, r1, #4
 800836c:	6021      	strge	r1, [r4, #0]
 800836e:	b90e      	cbnz	r6, 8008374 <_printf_i+0x114>
 8008370:	2d00      	cmp	r5, #0
 8008372:	d04b      	beq.n	800840c <_printf_i+0x1ac>
 8008374:	4615      	mov	r5, r2
 8008376:	fbb6 f1f3 	udiv	r1, r6, r3
 800837a:	fb03 6711 	mls	r7, r3, r1, r6
 800837e:	5dc7      	ldrb	r7, [r0, r7]
 8008380:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008384:	4637      	mov	r7, r6
 8008386:	42bb      	cmp	r3, r7
 8008388:	460e      	mov	r6, r1
 800838a:	d9f4      	bls.n	8008376 <_printf_i+0x116>
 800838c:	2b08      	cmp	r3, #8
 800838e:	d10b      	bne.n	80083a8 <_printf_i+0x148>
 8008390:	6823      	ldr	r3, [r4, #0]
 8008392:	07de      	lsls	r6, r3, #31
 8008394:	d508      	bpl.n	80083a8 <_printf_i+0x148>
 8008396:	6923      	ldr	r3, [r4, #16]
 8008398:	6861      	ldr	r1, [r4, #4]
 800839a:	4299      	cmp	r1, r3
 800839c:	bfde      	ittt	le
 800839e:	2330      	movle	r3, #48	; 0x30
 80083a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083a8:	1b52      	subs	r2, r2, r5
 80083aa:	6122      	str	r2, [r4, #16]
 80083ac:	f8cd a000 	str.w	sl, [sp]
 80083b0:	464b      	mov	r3, r9
 80083b2:	aa03      	add	r2, sp, #12
 80083b4:	4621      	mov	r1, r4
 80083b6:	4640      	mov	r0, r8
 80083b8:	f7ff fee4 	bl	8008184 <_printf_common>
 80083bc:	3001      	adds	r0, #1
 80083be:	d14a      	bne.n	8008456 <_printf_i+0x1f6>
 80083c0:	f04f 30ff 	mov.w	r0, #4294967295
 80083c4:	b004      	add	sp, #16
 80083c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	f043 0320 	orr.w	r3, r3, #32
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	4833      	ldr	r0, [pc, #204]	; (80084a0 <_printf_i+0x240>)
 80083d4:	2778      	movs	r7, #120	; 0x78
 80083d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	6829      	ldr	r1, [r5, #0]
 80083de:	061f      	lsls	r7, r3, #24
 80083e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80083e4:	d402      	bmi.n	80083ec <_printf_i+0x18c>
 80083e6:	065f      	lsls	r7, r3, #25
 80083e8:	bf48      	it	mi
 80083ea:	b2b6      	uxthmi	r6, r6
 80083ec:	07df      	lsls	r7, r3, #31
 80083ee:	bf48      	it	mi
 80083f0:	f043 0320 	orrmi.w	r3, r3, #32
 80083f4:	6029      	str	r1, [r5, #0]
 80083f6:	bf48      	it	mi
 80083f8:	6023      	strmi	r3, [r4, #0]
 80083fa:	b91e      	cbnz	r6, 8008404 <_printf_i+0x1a4>
 80083fc:	6823      	ldr	r3, [r4, #0]
 80083fe:	f023 0320 	bic.w	r3, r3, #32
 8008402:	6023      	str	r3, [r4, #0]
 8008404:	2310      	movs	r3, #16
 8008406:	e7a7      	b.n	8008358 <_printf_i+0xf8>
 8008408:	4824      	ldr	r0, [pc, #144]	; (800849c <_printf_i+0x23c>)
 800840a:	e7e4      	b.n	80083d6 <_printf_i+0x176>
 800840c:	4615      	mov	r5, r2
 800840e:	e7bd      	b.n	800838c <_printf_i+0x12c>
 8008410:	682b      	ldr	r3, [r5, #0]
 8008412:	6826      	ldr	r6, [r4, #0]
 8008414:	6961      	ldr	r1, [r4, #20]
 8008416:	1d18      	adds	r0, r3, #4
 8008418:	6028      	str	r0, [r5, #0]
 800841a:	0635      	lsls	r5, r6, #24
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	d501      	bpl.n	8008424 <_printf_i+0x1c4>
 8008420:	6019      	str	r1, [r3, #0]
 8008422:	e002      	b.n	800842a <_printf_i+0x1ca>
 8008424:	0670      	lsls	r0, r6, #25
 8008426:	d5fb      	bpl.n	8008420 <_printf_i+0x1c0>
 8008428:	8019      	strh	r1, [r3, #0]
 800842a:	2300      	movs	r3, #0
 800842c:	6123      	str	r3, [r4, #16]
 800842e:	4615      	mov	r5, r2
 8008430:	e7bc      	b.n	80083ac <_printf_i+0x14c>
 8008432:	682b      	ldr	r3, [r5, #0]
 8008434:	1d1a      	adds	r2, r3, #4
 8008436:	602a      	str	r2, [r5, #0]
 8008438:	681d      	ldr	r5, [r3, #0]
 800843a:	6862      	ldr	r2, [r4, #4]
 800843c:	2100      	movs	r1, #0
 800843e:	4628      	mov	r0, r5
 8008440:	f7f7 fed6 	bl	80001f0 <memchr>
 8008444:	b108      	cbz	r0, 800844a <_printf_i+0x1ea>
 8008446:	1b40      	subs	r0, r0, r5
 8008448:	6060      	str	r0, [r4, #4]
 800844a:	6863      	ldr	r3, [r4, #4]
 800844c:	6123      	str	r3, [r4, #16]
 800844e:	2300      	movs	r3, #0
 8008450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008454:	e7aa      	b.n	80083ac <_printf_i+0x14c>
 8008456:	6923      	ldr	r3, [r4, #16]
 8008458:	462a      	mov	r2, r5
 800845a:	4649      	mov	r1, r9
 800845c:	4640      	mov	r0, r8
 800845e:	47d0      	blx	sl
 8008460:	3001      	adds	r0, #1
 8008462:	d0ad      	beq.n	80083c0 <_printf_i+0x160>
 8008464:	6823      	ldr	r3, [r4, #0]
 8008466:	079b      	lsls	r3, r3, #30
 8008468:	d413      	bmi.n	8008492 <_printf_i+0x232>
 800846a:	68e0      	ldr	r0, [r4, #12]
 800846c:	9b03      	ldr	r3, [sp, #12]
 800846e:	4298      	cmp	r0, r3
 8008470:	bfb8      	it	lt
 8008472:	4618      	movlt	r0, r3
 8008474:	e7a6      	b.n	80083c4 <_printf_i+0x164>
 8008476:	2301      	movs	r3, #1
 8008478:	4632      	mov	r2, r6
 800847a:	4649      	mov	r1, r9
 800847c:	4640      	mov	r0, r8
 800847e:	47d0      	blx	sl
 8008480:	3001      	adds	r0, #1
 8008482:	d09d      	beq.n	80083c0 <_printf_i+0x160>
 8008484:	3501      	adds	r5, #1
 8008486:	68e3      	ldr	r3, [r4, #12]
 8008488:	9903      	ldr	r1, [sp, #12]
 800848a:	1a5b      	subs	r3, r3, r1
 800848c:	42ab      	cmp	r3, r5
 800848e:	dcf2      	bgt.n	8008476 <_printf_i+0x216>
 8008490:	e7eb      	b.n	800846a <_printf_i+0x20a>
 8008492:	2500      	movs	r5, #0
 8008494:	f104 0619 	add.w	r6, r4, #25
 8008498:	e7f5      	b.n	8008486 <_printf_i+0x226>
 800849a:	bf00      	nop
 800849c:	0800d2f8 	.word	0x0800d2f8
 80084a0:	0800d309 	.word	0x0800d309

080084a4 <__sflush_r>:
 80084a4:	898a      	ldrh	r2, [r1, #12]
 80084a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084aa:	4605      	mov	r5, r0
 80084ac:	0710      	lsls	r0, r2, #28
 80084ae:	460c      	mov	r4, r1
 80084b0:	d458      	bmi.n	8008564 <__sflush_r+0xc0>
 80084b2:	684b      	ldr	r3, [r1, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	dc05      	bgt.n	80084c4 <__sflush_r+0x20>
 80084b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	dc02      	bgt.n	80084c4 <__sflush_r+0x20>
 80084be:	2000      	movs	r0, #0
 80084c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084c6:	2e00      	cmp	r6, #0
 80084c8:	d0f9      	beq.n	80084be <__sflush_r+0x1a>
 80084ca:	2300      	movs	r3, #0
 80084cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80084d0:	682f      	ldr	r7, [r5, #0]
 80084d2:	6a21      	ldr	r1, [r4, #32]
 80084d4:	602b      	str	r3, [r5, #0]
 80084d6:	d032      	beq.n	800853e <__sflush_r+0x9a>
 80084d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80084da:	89a3      	ldrh	r3, [r4, #12]
 80084dc:	075a      	lsls	r2, r3, #29
 80084de:	d505      	bpl.n	80084ec <__sflush_r+0x48>
 80084e0:	6863      	ldr	r3, [r4, #4]
 80084e2:	1ac0      	subs	r0, r0, r3
 80084e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80084e6:	b10b      	cbz	r3, 80084ec <__sflush_r+0x48>
 80084e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084ea:	1ac0      	subs	r0, r0, r3
 80084ec:	2300      	movs	r3, #0
 80084ee:	4602      	mov	r2, r0
 80084f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084f2:	6a21      	ldr	r1, [r4, #32]
 80084f4:	4628      	mov	r0, r5
 80084f6:	47b0      	blx	r6
 80084f8:	1c43      	adds	r3, r0, #1
 80084fa:	89a3      	ldrh	r3, [r4, #12]
 80084fc:	d106      	bne.n	800850c <__sflush_r+0x68>
 80084fe:	6829      	ldr	r1, [r5, #0]
 8008500:	291d      	cmp	r1, #29
 8008502:	d82b      	bhi.n	800855c <__sflush_r+0xb8>
 8008504:	4a29      	ldr	r2, [pc, #164]	; (80085ac <__sflush_r+0x108>)
 8008506:	410a      	asrs	r2, r1
 8008508:	07d6      	lsls	r6, r2, #31
 800850a:	d427      	bmi.n	800855c <__sflush_r+0xb8>
 800850c:	2200      	movs	r2, #0
 800850e:	6062      	str	r2, [r4, #4]
 8008510:	04d9      	lsls	r1, r3, #19
 8008512:	6922      	ldr	r2, [r4, #16]
 8008514:	6022      	str	r2, [r4, #0]
 8008516:	d504      	bpl.n	8008522 <__sflush_r+0x7e>
 8008518:	1c42      	adds	r2, r0, #1
 800851a:	d101      	bne.n	8008520 <__sflush_r+0x7c>
 800851c:	682b      	ldr	r3, [r5, #0]
 800851e:	b903      	cbnz	r3, 8008522 <__sflush_r+0x7e>
 8008520:	6560      	str	r0, [r4, #84]	; 0x54
 8008522:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008524:	602f      	str	r7, [r5, #0]
 8008526:	2900      	cmp	r1, #0
 8008528:	d0c9      	beq.n	80084be <__sflush_r+0x1a>
 800852a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800852e:	4299      	cmp	r1, r3
 8008530:	d002      	beq.n	8008538 <__sflush_r+0x94>
 8008532:	4628      	mov	r0, r5
 8008534:	f001 fa6a 	bl	8009a0c <_free_r>
 8008538:	2000      	movs	r0, #0
 800853a:	6360      	str	r0, [r4, #52]	; 0x34
 800853c:	e7c0      	b.n	80084c0 <__sflush_r+0x1c>
 800853e:	2301      	movs	r3, #1
 8008540:	4628      	mov	r0, r5
 8008542:	47b0      	blx	r6
 8008544:	1c41      	adds	r1, r0, #1
 8008546:	d1c8      	bne.n	80084da <__sflush_r+0x36>
 8008548:	682b      	ldr	r3, [r5, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d0c5      	beq.n	80084da <__sflush_r+0x36>
 800854e:	2b1d      	cmp	r3, #29
 8008550:	d001      	beq.n	8008556 <__sflush_r+0xb2>
 8008552:	2b16      	cmp	r3, #22
 8008554:	d101      	bne.n	800855a <__sflush_r+0xb6>
 8008556:	602f      	str	r7, [r5, #0]
 8008558:	e7b1      	b.n	80084be <__sflush_r+0x1a>
 800855a:	89a3      	ldrh	r3, [r4, #12]
 800855c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008560:	81a3      	strh	r3, [r4, #12]
 8008562:	e7ad      	b.n	80084c0 <__sflush_r+0x1c>
 8008564:	690f      	ldr	r7, [r1, #16]
 8008566:	2f00      	cmp	r7, #0
 8008568:	d0a9      	beq.n	80084be <__sflush_r+0x1a>
 800856a:	0793      	lsls	r3, r2, #30
 800856c:	680e      	ldr	r6, [r1, #0]
 800856e:	bf08      	it	eq
 8008570:	694b      	ldreq	r3, [r1, #20]
 8008572:	600f      	str	r7, [r1, #0]
 8008574:	bf18      	it	ne
 8008576:	2300      	movne	r3, #0
 8008578:	eba6 0807 	sub.w	r8, r6, r7
 800857c:	608b      	str	r3, [r1, #8]
 800857e:	f1b8 0f00 	cmp.w	r8, #0
 8008582:	dd9c      	ble.n	80084be <__sflush_r+0x1a>
 8008584:	6a21      	ldr	r1, [r4, #32]
 8008586:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008588:	4643      	mov	r3, r8
 800858a:	463a      	mov	r2, r7
 800858c:	4628      	mov	r0, r5
 800858e:	47b0      	blx	r6
 8008590:	2800      	cmp	r0, #0
 8008592:	dc06      	bgt.n	80085a2 <__sflush_r+0xfe>
 8008594:	89a3      	ldrh	r3, [r4, #12]
 8008596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800859a:	81a3      	strh	r3, [r4, #12]
 800859c:	f04f 30ff 	mov.w	r0, #4294967295
 80085a0:	e78e      	b.n	80084c0 <__sflush_r+0x1c>
 80085a2:	4407      	add	r7, r0
 80085a4:	eba8 0800 	sub.w	r8, r8, r0
 80085a8:	e7e9      	b.n	800857e <__sflush_r+0xda>
 80085aa:	bf00      	nop
 80085ac:	dfbffffe 	.word	0xdfbffffe

080085b0 <_fflush_r>:
 80085b0:	b538      	push	{r3, r4, r5, lr}
 80085b2:	690b      	ldr	r3, [r1, #16]
 80085b4:	4605      	mov	r5, r0
 80085b6:	460c      	mov	r4, r1
 80085b8:	b913      	cbnz	r3, 80085c0 <_fflush_r+0x10>
 80085ba:	2500      	movs	r5, #0
 80085bc:	4628      	mov	r0, r5
 80085be:	bd38      	pop	{r3, r4, r5, pc}
 80085c0:	b118      	cbz	r0, 80085ca <_fflush_r+0x1a>
 80085c2:	6a03      	ldr	r3, [r0, #32]
 80085c4:	b90b      	cbnz	r3, 80085ca <_fflush_r+0x1a>
 80085c6:	f000 f8bb 	bl	8008740 <__sinit>
 80085ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d0f3      	beq.n	80085ba <_fflush_r+0xa>
 80085d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80085d4:	07d0      	lsls	r0, r2, #31
 80085d6:	d404      	bmi.n	80085e2 <_fflush_r+0x32>
 80085d8:	0599      	lsls	r1, r3, #22
 80085da:	d402      	bmi.n	80085e2 <_fflush_r+0x32>
 80085dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085de:	f000 fb82 	bl	8008ce6 <__retarget_lock_acquire_recursive>
 80085e2:	4628      	mov	r0, r5
 80085e4:	4621      	mov	r1, r4
 80085e6:	f7ff ff5d 	bl	80084a4 <__sflush_r>
 80085ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085ec:	07da      	lsls	r2, r3, #31
 80085ee:	4605      	mov	r5, r0
 80085f0:	d4e4      	bmi.n	80085bc <_fflush_r+0xc>
 80085f2:	89a3      	ldrh	r3, [r4, #12]
 80085f4:	059b      	lsls	r3, r3, #22
 80085f6:	d4e1      	bmi.n	80085bc <_fflush_r+0xc>
 80085f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085fa:	f000 fb75 	bl	8008ce8 <__retarget_lock_release_recursive>
 80085fe:	e7dd      	b.n	80085bc <_fflush_r+0xc>

08008600 <fflush>:
 8008600:	4601      	mov	r1, r0
 8008602:	b920      	cbnz	r0, 800860e <fflush+0xe>
 8008604:	4a04      	ldr	r2, [pc, #16]	; (8008618 <fflush+0x18>)
 8008606:	4905      	ldr	r1, [pc, #20]	; (800861c <fflush+0x1c>)
 8008608:	4805      	ldr	r0, [pc, #20]	; (8008620 <fflush+0x20>)
 800860a:	f000 b8b1 	b.w	8008770 <_fwalk_sglue>
 800860e:	4b05      	ldr	r3, [pc, #20]	; (8008624 <fflush+0x24>)
 8008610:	6818      	ldr	r0, [r3, #0]
 8008612:	f7ff bfcd 	b.w	80085b0 <_fflush_r>
 8008616:	bf00      	nop
 8008618:	20000034 	.word	0x20000034
 800861c:	080085b1 	.word	0x080085b1
 8008620:	200001ac 	.word	0x200001ac
 8008624:	200001f8 	.word	0x200001f8

08008628 <std>:
 8008628:	2300      	movs	r3, #0
 800862a:	b510      	push	{r4, lr}
 800862c:	4604      	mov	r4, r0
 800862e:	e9c0 3300 	strd	r3, r3, [r0]
 8008632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008636:	6083      	str	r3, [r0, #8]
 8008638:	8181      	strh	r1, [r0, #12]
 800863a:	6643      	str	r3, [r0, #100]	; 0x64
 800863c:	81c2      	strh	r2, [r0, #14]
 800863e:	6183      	str	r3, [r0, #24]
 8008640:	4619      	mov	r1, r3
 8008642:	2208      	movs	r2, #8
 8008644:	305c      	adds	r0, #92	; 0x5c
 8008646:	f000 fabf 	bl	8008bc8 <memset>
 800864a:	4b0d      	ldr	r3, [pc, #52]	; (8008680 <std+0x58>)
 800864c:	6263      	str	r3, [r4, #36]	; 0x24
 800864e:	4b0d      	ldr	r3, [pc, #52]	; (8008684 <std+0x5c>)
 8008650:	62a3      	str	r3, [r4, #40]	; 0x28
 8008652:	4b0d      	ldr	r3, [pc, #52]	; (8008688 <std+0x60>)
 8008654:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008656:	4b0d      	ldr	r3, [pc, #52]	; (800868c <std+0x64>)
 8008658:	6323      	str	r3, [r4, #48]	; 0x30
 800865a:	4b0d      	ldr	r3, [pc, #52]	; (8008690 <std+0x68>)
 800865c:	6224      	str	r4, [r4, #32]
 800865e:	429c      	cmp	r4, r3
 8008660:	d006      	beq.n	8008670 <std+0x48>
 8008662:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008666:	4294      	cmp	r4, r2
 8008668:	d002      	beq.n	8008670 <std+0x48>
 800866a:	33d0      	adds	r3, #208	; 0xd0
 800866c:	429c      	cmp	r4, r3
 800866e:	d105      	bne.n	800867c <std+0x54>
 8008670:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008678:	f000 bb34 	b.w	8008ce4 <__retarget_lock_init_recursive>
 800867c:	bd10      	pop	{r4, pc}
 800867e:	bf00      	nop
 8008680:	08008a19 	.word	0x08008a19
 8008684:	08008a3b 	.word	0x08008a3b
 8008688:	08008a73 	.word	0x08008a73
 800868c:	08008a97 	.word	0x08008a97
 8008690:	20002b18 	.word	0x20002b18

08008694 <stdio_exit_handler>:
 8008694:	4a02      	ldr	r2, [pc, #8]	; (80086a0 <stdio_exit_handler+0xc>)
 8008696:	4903      	ldr	r1, [pc, #12]	; (80086a4 <stdio_exit_handler+0x10>)
 8008698:	4803      	ldr	r0, [pc, #12]	; (80086a8 <stdio_exit_handler+0x14>)
 800869a:	f000 b869 	b.w	8008770 <_fwalk_sglue>
 800869e:	bf00      	nop
 80086a0:	20000034 	.word	0x20000034
 80086a4:	080085b1 	.word	0x080085b1
 80086a8:	200001ac 	.word	0x200001ac

080086ac <cleanup_stdio>:
 80086ac:	6841      	ldr	r1, [r0, #4]
 80086ae:	4b0c      	ldr	r3, [pc, #48]	; (80086e0 <cleanup_stdio+0x34>)
 80086b0:	4299      	cmp	r1, r3
 80086b2:	b510      	push	{r4, lr}
 80086b4:	4604      	mov	r4, r0
 80086b6:	d001      	beq.n	80086bc <cleanup_stdio+0x10>
 80086b8:	f7ff ff7a 	bl	80085b0 <_fflush_r>
 80086bc:	68a1      	ldr	r1, [r4, #8]
 80086be:	4b09      	ldr	r3, [pc, #36]	; (80086e4 <cleanup_stdio+0x38>)
 80086c0:	4299      	cmp	r1, r3
 80086c2:	d002      	beq.n	80086ca <cleanup_stdio+0x1e>
 80086c4:	4620      	mov	r0, r4
 80086c6:	f7ff ff73 	bl	80085b0 <_fflush_r>
 80086ca:	68e1      	ldr	r1, [r4, #12]
 80086cc:	4b06      	ldr	r3, [pc, #24]	; (80086e8 <cleanup_stdio+0x3c>)
 80086ce:	4299      	cmp	r1, r3
 80086d0:	d004      	beq.n	80086dc <cleanup_stdio+0x30>
 80086d2:	4620      	mov	r0, r4
 80086d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086d8:	f7ff bf6a 	b.w	80085b0 <_fflush_r>
 80086dc:	bd10      	pop	{r4, pc}
 80086de:	bf00      	nop
 80086e0:	20002b18 	.word	0x20002b18
 80086e4:	20002b80 	.word	0x20002b80
 80086e8:	20002be8 	.word	0x20002be8

080086ec <global_stdio_init.part.0>:
 80086ec:	b510      	push	{r4, lr}
 80086ee:	4b0b      	ldr	r3, [pc, #44]	; (800871c <global_stdio_init.part.0+0x30>)
 80086f0:	4c0b      	ldr	r4, [pc, #44]	; (8008720 <global_stdio_init.part.0+0x34>)
 80086f2:	4a0c      	ldr	r2, [pc, #48]	; (8008724 <global_stdio_init.part.0+0x38>)
 80086f4:	601a      	str	r2, [r3, #0]
 80086f6:	4620      	mov	r0, r4
 80086f8:	2200      	movs	r2, #0
 80086fa:	2104      	movs	r1, #4
 80086fc:	f7ff ff94 	bl	8008628 <std>
 8008700:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008704:	2201      	movs	r2, #1
 8008706:	2109      	movs	r1, #9
 8008708:	f7ff ff8e 	bl	8008628 <std>
 800870c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008710:	2202      	movs	r2, #2
 8008712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008716:	2112      	movs	r1, #18
 8008718:	f7ff bf86 	b.w	8008628 <std>
 800871c:	20002c50 	.word	0x20002c50
 8008720:	20002b18 	.word	0x20002b18
 8008724:	08008695 	.word	0x08008695

08008728 <__sfp_lock_acquire>:
 8008728:	4801      	ldr	r0, [pc, #4]	; (8008730 <__sfp_lock_acquire+0x8>)
 800872a:	f000 badc 	b.w	8008ce6 <__retarget_lock_acquire_recursive>
 800872e:	bf00      	nop
 8008730:	20002c59 	.word	0x20002c59

08008734 <__sfp_lock_release>:
 8008734:	4801      	ldr	r0, [pc, #4]	; (800873c <__sfp_lock_release+0x8>)
 8008736:	f000 bad7 	b.w	8008ce8 <__retarget_lock_release_recursive>
 800873a:	bf00      	nop
 800873c:	20002c59 	.word	0x20002c59

08008740 <__sinit>:
 8008740:	b510      	push	{r4, lr}
 8008742:	4604      	mov	r4, r0
 8008744:	f7ff fff0 	bl	8008728 <__sfp_lock_acquire>
 8008748:	6a23      	ldr	r3, [r4, #32]
 800874a:	b11b      	cbz	r3, 8008754 <__sinit+0x14>
 800874c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008750:	f7ff bff0 	b.w	8008734 <__sfp_lock_release>
 8008754:	4b04      	ldr	r3, [pc, #16]	; (8008768 <__sinit+0x28>)
 8008756:	6223      	str	r3, [r4, #32]
 8008758:	4b04      	ldr	r3, [pc, #16]	; (800876c <__sinit+0x2c>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1f5      	bne.n	800874c <__sinit+0xc>
 8008760:	f7ff ffc4 	bl	80086ec <global_stdio_init.part.0>
 8008764:	e7f2      	b.n	800874c <__sinit+0xc>
 8008766:	bf00      	nop
 8008768:	080086ad 	.word	0x080086ad
 800876c:	20002c50 	.word	0x20002c50

08008770 <_fwalk_sglue>:
 8008770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008774:	4607      	mov	r7, r0
 8008776:	4688      	mov	r8, r1
 8008778:	4614      	mov	r4, r2
 800877a:	2600      	movs	r6, #0
 800877c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008780:	f1b9 0901 	subs.w	r9, r9, #1
 8008784:	d505      	bpl.n	8008792 <_fwalk_sglue+0x22>
 8008786:	6824      	ldr	r4, [r4, #0]
 8008788:	2c00      	cmp	r4, #0
 800878a:	d1f7      	bne.n	800877c <_fwalk_sglue+0xc>
 800878c:	4630      	mov	r0, r6
 800878e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008792:	89ab      	ldrh	r3, [r5, #12]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d907      	bls.n	80087a8 <_fwalk_sglue+0x38>
 8008798:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800879c:	3301      	adds	r3, #1
 800879e:	d003      	beq.n	80087a8 <_fwalk_sglue+0x38>
 80087a0:	4629      	mov	r1, r5
 80087a2:	4638      	mov	r0, r7
 80087a4:	47c0      	blx	r8
 80087a6:	4306      	orrs	r6, r0
 80087a8:	3568      	adds	r5, #104	; 0x68
 80087aa:	e7e9      	b.n	8008780 <_fwalk_sglue+0x10>

080087ac <iprintf>:
 80087ac:	b40f      	push	{r0, r1, r2, r3}
 80087ae:	b507      	push	{r0, r1, r2, lr}
 80087b0:	4906      	ldr	r1, [pc, #24]	; (80087cc <iprintf+0x20>)
 80087b2:	ab04      	add	r3, sp, #16
 80087b4:	6808      	ldr	r0, [r1, #0]
 80087b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80087ba:	6881      	ldr	r1, [r0, #8]
 80087bc:	9301      	str	r3, [sp, #4]
 80087be:	f002 fa73 	bl	800aca8 <_vfiprintf_r>
 80087c2:	b003      	add	sp, #12
 80087c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80087c8:	b004      	add	sp, #16
 80087ca:	4770      	bx	lr
 80087cc:	200001f8 	.word	0x200001f8

080087d0 <putchar>:
 80087d0:	4b02      	ldr	r3, [pc, #8]	; (80087dc <putchar+0xc>)
 80087d2:	4601      	mov	r1, r0
 80087d4:	6818      	ldr	r0, [r3, #0]
 80087d6:	6882      	ldr	r2, [r0, #8]
 80087d8:	f002 bee6 	b.w	800b5a8 <_putc_r>
 80087dc:	200001f8 	.word	0x200001f8

080087e0 <_puts_r>:
 80087e0:	6a03      	ldr	r3, [r0, #32]
 80087e2:	b570      	push	{r4, r5, r6, lr}
 80087e4:	6884      	ldr	r4, [r0, #8]
 80087e6:	4605      	mov	r5, r0
 80087e8:	460e      	mov	r6, r1
 80087ea:	b90b      	cbnz	r3, 80087f0 <_puts_r+0x10>
 80087ec:	f7ff ffa8 	bl	8008740 <__sinit>
 80087f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087f2:	07db      	lsls	r3, r3, #31
 80087f4:	d405      	bmi.n	8008802 <_puts_r+0x22>
 80087f6:	89a3      	ldrh	r3, [r4, #12]
 80087f8:	0598      	lsls	r0, r3, #22
 80087fa:	d402      	bmi.n	8008802 <_puts_r+0x22>
 80087fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087fe:	f000 fa72 	bl	8008ce6 <__retarget_lock_acquire_recursive>
 8008802:	89a3      	ldrh	r3, [r4, #12]
 8008804:	0719      	lsls	r1, r3, #28
 8008806:	d513      	bpl.n	8008830 <_puts_r+0x50>
 8008808:	6923      	ldr	r3, [r4, #16]
 800880a:	b18b      	cbz	r3, 8008830 <_puts_r+0x50>
 800880c:	3e01      	subs	r6, #1
 800880e:	68a3      	ldr	r3, [r4, #8]
 8008810:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008814:	3b01      	subs	r3, #1
 8008816:	60a3      	str	r3, [r4, #8]
 8008818:	b9e9      	cbnz	r1, 8008856 <_puts_r+0x76>
 800881a:	2b00      	cmp	r3, #0
 800881c:	da2e      	bge.n	800887c <_puts_r+0x9c>
 800881e:	4622      	mov	r2, r4
 8008820:	210a      	movs	r1, #10
 8008822:	4628      	mov	r0, r5
 8008824:	f000 f93b 	bl	8008a9e <__swbuf_r>
 8008828:	3001      	adds	r0, #1
 800882a:	d007      	beq.n	800883c <_puts_r+0x5c>
 800882c:	250a      	movs	r5, #10
 800882e:	e007      	b.n	8008840 <_puts_r+0x60>
 8008830:	4621      	mov	r1, r4
 8008832:	4628      	mov	r0, r5
 8008834:	f000 f970 	bl	8008b18 <__swsetup_r>
 8008838:	2800      	cmp	r0, #0
 800883a:	d0e7      	beq.n	800880c <_puts_r+0x2c>
 800883c:	f04f 35ff 	mov.w	r5, #4294967295
 8008840:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008842:	07da      	lsls	r2, r3, #31
 8008844:	d405      	bmi.n	8008852 <_puts_r+0x72>
 8008846:	89a3      	ldrh	r3, [r4, #12]
 8008848:	059b      	lsls	r3, r3, #22
 800884a:	d402      	bmi.n	8008852 <_puts_r+0x72>
 800884c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800884e:	f000 fa4b 	bl	8008ce8 <__retarget_lock_release_recursive>
 8008852:	4628      	mov	r0, r5
 8008854:	bd70      	pop	{r4, r5, r6, pc}
 8008856:	2b00      	cmp	r3, #0
 8008858:	da04      	bge.n	8008864 <_puts_r+0x84>
 800885a:	69a2      	ldr	r2, [r4, #24]
 800885c:	429a      	cmp	r2, r3
 800885e:	dc06      	bgt.n	800886e <_puts_r+0x8e>
 8008860:	290a      	cmp	r1, #10
 8008862:	d004      	beq.n	800886e <_puts_r+0x8e>
 8008864:	6823      	ldr	r3, [r4, #0]
 8008866:	1c5a      	adds	r2, r3, #1
 8008868:	6022      	str	r2, [r4, #0]
 800886a:	7019      	strb	r1, [r3, #0]
 800886c:	e7cf      	b.n	800880e <_puts_r+0x2e>
 800886e:	4622      	mov	r2, r4
 8008870:	4628      	mov	r0, r5
 8008872:	f000 f914 	bl	8008a9e <__swbuf_r>
 8008876:	3001      	adds	r0, #1
 8008878:	d1c9      	bne.n	800880e <_puts_r+0x2e>
 800887a:	e7df      	b.n	800883c <_puts_r+0x5c>
 800887c:	6823      	ldr	r3, [r4, #0]
 800887e:	250a      	movs	r5, #10
 8008880:	1c5a      	adds	r2, r3, #1
 8008882:	6022      	str	r2, [r4, #0]
 8008884:	701d      	strb	r5, [r3, #0]
 8008886:	e7db      	b.n	8008840 <_puts_r+0x60>

08008888 <puts>:
 8008888:	4b02      	ldr	r3, [pc, #8]	; (8008894 <puts+0xc>)
 800888a:	4601      	mov	r1, r0
 800888c:	6818      	ldr	r0, [r3, #0]
 800888e:	f7ff bfa7 	b.w	80087e0 <_puts_r>
 8008892:	bf00      	nop
 8008894:	200001f8 	.word	0x200001f8

08008898 <iscanf>:
 8008898:	b40f      	push	{r0, r1, r2, r3}
 800889a:	b507      	push	{r0, r1, r2, lr}
 800889c:	4906      	ldr	r1, [pc, #24]	; (80088b8 <iscanf+0x20>)
 800889e:	ab04      	add	r3, sp, #16
 80088a0:	6808      	ldr	r0, [r1, #0]
 80088a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80088a6:	6841      	ldr	r1, [r0, #4]
 80088a8:	9301      	str	r3, [sp, #4]
 80088aa:	f002 fcb9 	bl	800b220 <_vfiscanf_r>
 80088ae:	b003      	add	sp, #12
 80088b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80088b4:	b004      	add	sp, #16
 80088b6:	4770      	bx	lr
 80088b8:	200001f8 	.word	0x200001f8

080088bc <setvbuf>:
 80088bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80088c0:	461d      	mov	r5, r3
 80088c2:	4b54      	ldr	r3, [pc, #336]	; (8008a14 <setvbuf+0x158>)
 80088c4:	681f      	ldr	r7, [r3, #0]
 80088c6:	4604      	mov	r4, r0
 80088c8:	460e      	mov	r6, r1
 80088ca:	4690      	mov	r8, r2
 80088cc:	b127      	cbz	r7, 80088d8 <setvbuf+0x1c>
 80088ce:	6a3b      	ldr	r3, [r7, #32]
 80088d0:	b913      	cbnz	r3, 80088d8 <setvbuf+0x1c>
 80088d2:	4638      	mov	r0, r7
 80088d4:	f7ff ff34 	bl	8008740 <__sinit>
 80088d8:	f1b8 0f02 	cmp.w	r8, #2
 80088dc:	d006      	beq.n	80088ec <setvbuf+0x30>
 80088de:	f1b8 0f01 	cmp.w	r8, #1
 80088e2:	f200 8094 	bhi.w	8008a0e <setvbuf+0x152>
 80088e6:	2d00      	cmp	r5, #0
 80088e8:	f2c0 8091 	blt.w	8008a0e <setvbuf+0x152>
 80088ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088ee:	07da      	lsls	r2, r3, #31
 80088f0:	d405      	bmi.n	80088fe <setvbuf+0x42>
 80088f2:	89a3      	ldrh	r3, [r4, #12]
 80088f4:	059b      	lsls	r3, r3, #22
 80088f6:	d402      	bmi.n	80088fe <setvbuf+0x42>
 80088f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088fa:	f000 f9f4 	bl	8008ce6 <__retarget_lock_acquire_recursive>
 80088fe:	4621      	mov	r1, r4
 8008900:	4638      	mov	r0, r7
 8008902:	f7ff fe55 	bl	80085b0 <_fflush_r>
 8008906:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008908:	b141      	cbz	r1, 800891c <setvbuf+0x60>
 800890a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800890e:	4299      	cmp	r1, r3
 8008910:	d002      	beq.n	8008918 <setvbuf+0x5c>
 8008912:	4638      	mov	r0, r7
 8008914:	f001 f87a 	bl	8009a0c <_free_r>
 8008918:	2300      	movs	r3, #0
 800891a:	6363      	str	r3, [r4, #52]	; 0x34
 800891c:	2300      	movs	r3, #0
 800891e:	61a3      	str	r3, [r4, #24]
 8008920:	6063      	str	r3, [r4, #4]
 8008922:	89a3      	ldrh	r3, [r4, #12]
 8008924:	0618      	lsls	r0, r3, #24
 8008926:	d503      	bpl.n	8008930 <setvbuf+0x74>
 8008928:	6921      	ldr	r1, [r4, #16]
 800892a:	4638      	mov	r0, r7
 800892c:	f001 f86e 	bl	8009a0c <_free_r>
 8008930:	89a3      	ldrh	r3, [r4, #12]
 8008932:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008936:	f023 0303 	bic.w	r3, r3, #3
 800893a:	f1b8 0f02 	cmp.w	r8, #2
 800893e:	81a3      	strh	r3, [r4, #12]
 8008940:	d05f      	beq.n	8008a02 <setvbuf+0x146>
 8008942:	ab01      	add	r3, sp, #4
 8008944:	466a      	mov	r2, sp
 8008946:	4621      	mov	r1, r4
 8008948:	4638      	mov	r0, r7
 800894a:	f002 fdcb 	bl	800b4e4 <__swhatbuf_r>
 800894e:	89a3      	ldrh	r3, [r4, #12]
 8008950:	4318      	orrs	r0, r3
 8008952:	81a0      	strh	r0, [r4, #12]
 8008954:	bb2d      	cbnz	r5, 80089a2 <setvbuf+0xe6>
 8008956:	9d00      	ldr	r5, [sp, #0]
 8008958:	4628      	mov	r0, r5
 800895a:	f001 fbfb 	bl	800a154 <malloc>
 800895e:	4606      	mov	r6, r0
 8008960:	2800      	cmp	r0, #0
 8008962:	d150      	bne.n	8008a06 <setvbuf+0x14a>
 8008964:	f8dd 9000 	ldr.w	r9, [sp]
 8008968:	45a9      	cmp	r9, r5
 800896a:	d13e      	bne.n	80089ea <setvbuf+0x12e>
 800896c:	f04f 35ff 	mov.w	r5, #4294967295
 8008970:	2200      	movs	r2, #0
 8008972:	60a2      	str	r2, [r4, #8]
 8008974:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8008978:	6022      	str	r2, [r4, #0]
 800897a:	6122      	str	r2, [r4, #16]
 800897c:	2201      	movs	r2, #1
 800897e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008982:	6162      	str	r2, [r4, #20]
 8008984:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008986:	f043 0302 	orr.w	r3, r3, #2
 800898a:	07d1      	lsls	r1, r2, #31
 800898c:	81a3      	strh	r3, [r4, #12]
 800898e:	d404      	bmi.n	800899a <setvbuf+0xde>
 8008990:	059b      	lsls	r3, r3, #22
 8008992:	d402      	bmi.n	800899a <setvbuf+0xde>
 8008994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008996:	f000 f9a7 	bl	8008ce8 <__retarget_lock_release_recursive>
 800899a:	4628      	mov	r0, r5
 800899c:	b003      	add	sp, #12
 800899e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089a2:	2e00      	cmp	r6, #0
 80089a4:	d0d8      	beq.n	8008958 <setvbuf+0x9c>
 80089a6:	6a3b      	ldr	r3, [r7, #32]
 80089a8:	b913      	cbnz	r3, 80089b0 <setvbuf+0xf4>
 80089aa:	4638      	mov	r0, r7
 80089ac:	f7ff fec8 	bl	8008740 <__sinit>
 80089b0:	f1b8 0f01 	cmp.w	r8, #1
 80089b4:	bf08      	it	eq
 80089b6:	89a3      	ldrheq	r3, [r4, #12]
 80089b8:	6026      	str	r6, [r4, #0]
 80089ba:	bf04      	itt	eq
 80089bc:	f043 0301 	orreq.w	r3, r3, #1
 80089c0:	81a3      	strheq	r3, [r4, #12]
 80089c2:	89a3      	ldrh	r3, [r4, #12]
 80089c4:	f013 0208 	ands.w	r2, r3, #8
 80089c8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80089cc:	d01d      	beq.n	8008a0a <setvbuf+0x14e>
 80089ce:	07da      	lsls	r2, r3, #31
 80089d0:	bf41      	itttt	mi
 80089d2:	2200      	movmi	r2, #0
 80089d4:	426d      	negmi	r5, r5
 80089d6:	60a2      	strmi	r2, [r4, #8]
 80089d8:	61a5      	strmi	r5, [r4, #24]
 80089da:	bf58      	it	pl
 80089dc:	60a5      	strpl	r5, [r4, #8]
 80089de:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80089e0:	f015 0501 	ands.w	r5, r5, #1
 80089e4:	d0d4      	beq.n	8008990 <setvbuf+0xd4>
 80089e6:	2500      	movs	r5, #0
 80089e8:	e7d7      	b.n	800899a <setvbuf+0xde>
 80089ea:	4648      	mov	r0, r9
 80089ec:	f001 fbb2 	bl	800a154 <malloc>
 80089f0:	4606      	mov	r6, r0
 80089f2:	2800      	cmp	r0, #0
 80089f4:	d0ba      	beq.n	800896c <setvbuf+0xb0>
 80089f6:	89a3      	ldrh	r3, [r4, #12]
 80089f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089fc:	81a3      	strh	r3, [r4, #12]
 80089fe:	464d      	mov	r5, r9
 8008a00:	e7d1      	b.n	80089a6 <setvbuf+0xea>
 8008a02:	2500      	movs	r5, #0
 8008a04:	e7b4      	b.n	8008970 <setvbuf+0xb4>
 8008a06:	46a9      	mov	r9, r5
 8008a08:	e7f5      	b.n	80089f6 <setvbuf+0x13a>
 8008a0a:	60a2      	str	r2, [r4, #8]
 8008a0c:	e7e7      	b.n	80089de <setvbuf+0x122>
 8008a0e:	f04f 35ff 	mov.w	r5, #4294967295
 8008a12:	e7c2      	b.n	800899a <setvbuf+0xde>
 8008a14:	200001f8 	.word	0x200001f8

08008a18 <__sread>:
 8008a18:	b510      	push	{r4, lr}
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a20:	f000 f912 	bl	8008c48 <_read_r>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	bfab      	itete	ge
 8008a28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a2a:	89a3      	ldrhlt	r3, [r4, #12]
 8008a2c:	181b      	addge	r3, r3, r0
 8008a2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a32:	bfac      	ite	ge
 8008a34:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a36:	81a3      	strhlt	r3, [r4, #12]
 8008a38:	bd10      	pop	{r4, pc}

08008a3a <__swrite>:
 8008a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a3e:	461f      	mov	r7, r3
 8008a40:	898b      	ldrh	r3, [r1, #12]
 8008a42:	05db      	lsls	r3, r3, #23
 8008a44:	4605      	mov	r5, r0
 8008a46:	460c      	mov	r4, r1
 8008a48:	4616      	mov	r6, r2
 8008a4a:	d505      	bpl.n	8008a58 <__swrite+0x1e>
 8008a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a50:	2302      	movs	r3, #2
 8008a52:	2200      	movs	r2, #0
 8008a54:	f000 f8e6 	bl	8008c24 <_lseek_r>
 8008a58:	89a3      	ldrh	r3, [r4, #12]
 8008a5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a62:	81a3      	strh	r3, [r4, #12]
 8008a64:	4632      	mov	r2, r6
 8008a66:	463b      	mov	r3, r7
 8008a68:	4628      	mov	r0, r5
 8008a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a6e:	f000 b8fd 	b.w	8008c6c <_write_r>

08008a72 <__sseek>:
 8008a72:	b510      	push	{r4, lr}
 8008a74:	460c      	mov	r4, r1
 8008a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a7a:	f000 f8d3 	bl	8008c24 <_lseek_r>
 8008a7e:	1c43      	adds	r3, r0, #1
 8008a80:	89a3      	ldrh	r3, [r4, #12]
 8008a82:	bf15      	itete	ne
 8008a84:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a8e:	81a3      	strheq	r3, [r4, #12]
 8008a90:	bf18      	it	ne
 8008a92:	81a3      	strhne	r3, [r4, #12]
 8008a94:	bd10      	pop	{r4, pc}

08008a96 <__sclose>:
 8008a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a9a:	f000 b8b3 	b.w	8008c04 <_close_r>

08008a9e <__swbuf_r>:
 8008a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa0:	460e      	mov	r6, r1
 8008aa2:	4614      	mov	r4, r2
 8008aa4:	4605      	mov	r5, r0
 8008aa6:	b118      	cbz	r0, 8008ab0 <__swbuf_r+0x12>
 8008aa8:	6a03      	ldr	r3, [r0, #32]
 8008aaa:	b90b      	cbnz	r3, 8008ab0 <__swbuf_r+0x12>
 8008aac:	f7ff fe48 	bl	8008740 <__sinit>
 8008ab0:	69a3      	ldr	r3, [r4, #24]
 8008ab2:	60a3      	str	r3, [r4, #8]
 8008ab4:	89a3      	ldrh	r3, [r4, #12]
 8008ab6:	071a      	lsls	r2, r3, #28
 8008ab8:	d525      	bpl.n	8008b06 <__swbuf_r+0x68>
 8008aba:	6923      	ldr	r3, [r4, #16]
 8008abc:	b31b      	cbz	r3, 8008b06 <__swbuf_r+0x68>
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	6922      	ldr	r2, [r4, #16]
 8008ac2:	1a98      	subs	r0, r3, r2
 8008ac4:	6963      	ldr	r3, [r4, #20]
 8008ac6:	b2f6      	uxtb	r6, r6
 8008ac8:	4283      	cmp	r3, r0
 8008aca:	4637      	mov	r7, r6
 8008acc:	dc04      	bgt.n	8008ad8 <__swbuf_r+0x3a>
 8008ace:	4621      	mov	r1, r4
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	f7ff fd6d 	bl	80085b0 <_fflush_r>
 8008ad6:	b9e0      	cbnz	r0, 8008b12 <__swbuf_r+0x74>
 8008ad8:	68a3      	ldr	r3, [r4, #8]
 8008ada:	3b01      	subs	r3, #1
 8008adc:	60a3      	str	r3, [r4, #8]
 8008ade:	6823      	ldr	r3, [r4, #0]
 8008ae0:	1c5a      	adds	r2, r3, #1
 8008ae2:	6022      	str	r2, [r4, #0]
 8008ae4:	701e      	strb	r6, [r3, #0]
 8008ae6:	6962      	ldr	r2, [r4, #20]
 8008ae8:	1c43      	adds	r3, r0, #1
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d004      	beq.n	8008af8 <__swbuf_r+0x5a>
 8008aee:	89a3      	ldrh	r3, [r4, #12]
 8008af0:	07db      	lsls	r3, r3, #31
 8008af2:	d506      	bpl.n	8008b02 <__swbuf_r+0x64>
 8008af4:	2e0a      	cmp	r6, #10
 8008af6:	d104      	bne.n	8008b02 <__swbuf_r+0x64>
 8008af8:	4621      	mov	r1, r4
 8008afa:	4628      	mov	r0, r5
 8008afc:	f7ff fd58 	bl	80085b0 <_fflush_r>
 8008b00:	b938      	cbnz	r0, 8008b12 <__swbuf_r+0x74>
 8008b02:	4638      	mov	r0, r7
 8008b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b06:	4621      	mov	r1, r4
 8008b08:	4628      	mov	r0, r5
 8008b0a:	f000 f805 	bl	8008b18 <__swsetup_r>
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d0d5      	beq.n	8008abe <__swbuf_r+0x20>
 8008b12:	f04f 37ff 	mov.w	r7, #4294967295
 8008b16:	e7f4      	b.n	8008b02 <__swbuf_r+0x64>

08008b18 <__swsetup_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	4b2a      	ldr	r3, [pc, #168]	; (8008bc4 <__swsetup_r+0xac>)
 8008b1c:	4605      	mov	r5, r0
 8008b1e:	6818      	ldr	r0, [r3, #0]
 8008b20:	460c      	mov	r4, r1
 8008b22:	b118      	cbz	r0, 8008b2c <__swsetup_r+0x14>
 8008b24:	6a03      	ldr	r3, [r0, #32]
 8008b26:	b90b      	cbnz	r3, 8008b2c <__swsetup_r+0x14>
 8008b28:	f7ff fe0a 	bl	8008740 <__sinit>
 8008b2c:	89a3      	ldrh	r3, [r4, #12]
 8008b2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b32:	0718      	lsls	r0, r3, #28
 8008b34:	d422      	bmi.n	8008b7c <__swsetup_r+0x64>
 8008b36:	06d9      	lsls	r1, r3, #27
 8008b38:	d407      	bmi.n	8008b4a <__swsetup_r+0x32>
 8008b3a:	2309      	movs	r3, #9
 8008b3c:	602b      	str	r3, [r5, #0]
 8008b3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b42:	81a3      	strh	r3, [r4, #12]
 8008b44:	f04f 30ff 	mov.w	r0, #4294967295
 8008b48:	e034      	b.n	8008bb4 <__swsetup_r+0x9c>
 8008b4a:	0758      	lsls	r0, r3, #29
 8008b4c:	d512      	bpl.n	8008b74 <__swsetup_r+0x5c>
 8008b4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b50:	b141      	cbz	r1, 8008b64 <__swsetup_r+0x4c>
 8008b52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b56:	4299      	cmp	r1, r3
 8008b58:	d002      	beq.n	8008b60 <__swsetup_r+0x48>
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	f000 ff56 	bl	8009a0c <_free_r>
 8008b60:	2300      	movs	r3, #0
 8008b62:	6363      	str	r3, [r4, #52]	; 0x34
 8008b64:	89a3      	ldrh	r3, [r4, #12]
 8008b66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b6a:	81a3      	strh	r3, [r4, #12]
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	6063      	str	r3, [r4, #4]
 8008b70:	6923      	ldr	r3, [r4, #16]
 8008b72:	6023      	str	r3, [r4, #0]
 8008b74:	89a3      	ldrh	r3, [r4, #12]
 8008b76:	f043 0308 	orr.w	r3, r3, #8
 8008b7a:	81a3      	strh	r3, [r4, #12]
 8008b7c:	6923      	ldr	r3, [r4, #16]
 8008b7e:	b94b      	cbnz	r3, 8008b94 <__swsetup_r+0x7c>
 8008b80:	89a3      	ldrh	r3, [r4, #12]
 8008b82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b8a:	d003      	beq.n	8008b94 <__swsetup_r+0x7c>
 8008b8c:	4621      	mov	r1, r4
 8008b8e:	4628      	mov	r0, r5
 8008b90:	f002 fcce 	bl	800b530 <__smakebuf_r>
 8008b94:	89a0      	ldrh	r0, [r4, #12]
 8008b96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b9a:	f010 0301 	ands.w	r3, r0, #1
 8008b9e:	d00a      	beq.n	8008bb6 <__swsetup_r+0x9e>
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	60a3      	str	r3, [r4, #8]
 8008ba4:	6963      	ldr	r3, [r4, #20]
 8008ba6:	425b      	negs	r3, r3
 8008ba8:	61a3      	str	r3, [r4, #24]
 8008baa:	6923      	ldr	r3, [r4, #16]
 8008bac:	b943      	cbnz	r3, 8008bc0 <__swsetup_r+0xa8>
 8008bae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008bb2:	d1c4      	bne.n	8008b3e <__swsetup_r+0x26>
 8008bb4:	bd38      	pop	{r3, r4, r5, pc}
 8008bb6:	0781      	lsls	r1, r0, #30
 8008bb8:	bf58      	it	pl
 8008bba:	6963      	ldrpl	r3, [r4, #20]
 8008bbc:	60a3      	str	r3, [r4, #8]
 8008bbe:	e7f4      	b.n	8008baa <__swsetup_r+0x92>
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	e7f7      	b.n	8008bb4 <__swsetup_r+0x9c>
 8008bc4:	200001f8 	.word	0x200001f8

08008bc8 <memset>:
 8008bc8:	4402      	add	r2, r0
 8008bca:	4603      	mov	r3, r0
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d100      	bne.n	8008bd2 <memset+0xa>
 8008bd0:	4770      	bx	lr
 8008bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8008bd6:	e7f9      	b.n	8008bcc <memset+0x4>

08008bd8 <strncmp>:
 8008bd8:	b510      	push	{r4, lr}
 8008bda:	b16a      	cbz	r2, 8008bf8 <strncmp+0x20>
 8008bdc:	3901      	subs	r1, #1
 8008bde:	1884      	adds	r4, r0, r2
 8008be0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008be4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d103      	bne.n	8008bf4 <strncmp+0x1c>
 8008bec:	42a0      	cmp	r0, r4
 8008bee:	d001      	beq.n	8008bf4 <strncmp+0x1c>
 8008bf0:	2a00      	cmp	r2, #0
 8008bf2:	d1f5      	bne.n	8008be0 <strncmp+0x8>
 8008bf4:	1ad0      	subs	r0, r2, r3
 8008bf6:	bd10      	pop	{r4, pc}
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	e7fc      	b.n	8008bf6 <strncmp+0x1e>

08008bfc <_localeconv_r>:
 8008bfc:	4800      	ldr	r0, [pc, #0]	; (8008c00 <_localeconv_r+0x4>)
 8008bfe:	4770      	bx	lr
 8008c00:	20000130 	.word	0x20000130

08008c04 <_close_r>:
 8008c04:	b538      	push	{r3, r4, r5, lr}
 8008c06:	4d06      	ldr	r5, [pc, #24]	; (8008c20 <_close_r+0x1c>)
 8008c08:	2300      	movs	r3, #0
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	4608      	mov	r0, r1
 8008c0e:	602b      	str	r3, [r5, #0]
 8008c10:	f7fa ff73 	bl	8003afa <_close>
 8008c14:	1c43      	adds	r3, r0, #1
 8008c16:	d102      	bne.n	8008c1e <_close_r+0x1a>
 8008c18:	682b      	ldr	r3, [r5, #0]
 8008c1a:	b103      	cbz	r3, 8008c1e <_close_r+0x1a>
 8008c1c:	6023      	str	r3, [r4, #0]
 8008c1e:	bd38      	pop	{r3, r4, r5, pc}
 8008c20:	20002c54 	.word	0x20002c54

08008c24 <_lseek_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4d07      	ldr	r5, [pc, #28]	; (8008c44 <_lseek_r+0x20>)
 8008c28:	4604      	mov	r4, r0
 8008c2a:	4608      	mov	r0, r1
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	2200      	movs	r2, #0
 8008c30:	602a      	str	r2, [r5, #0]
 8008c32:	461a      	mov	r2, r3
 8008c34:	f7fa ff88 	bl	8003b48 <_lseek>
 8008c38:	1c43      	adds	r3, r0, #1
 8008c3a:	d102      	bne.n	8008c42 <_lseek_r+0x1e>
 8008c3c:	682b      	ldr	r3, [r5, #0]
 8008c3e:	b103      	cbz	r3, 8008c42 <_lseek_r+0x1e>
 8008c40:	6023      	str	r3, [r4, #0]
 8008c42:	bd38      	pop	{r3, r4, r5, pc}
 8008c44:	20002c54 	.word	0x20002c54

08008c48 <_read_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	4d07      	ldr	r5, [pc, #28]	; (8008c68 <_read_r+0x20>)
 8008c4c:	4604      	mov	r4, r0
 8008c4e:	4608      	mov	r0, r1
 8008c50:	4611      	mov	r1, r2
 8008c52:	2200      	movs	r2, #0
 8008c54:	602a      	str	r2, [r5, #0]
 8008c56:	461a      	mov	r2, r3
 8008c58:	f7fa ff32 	bl	8003ac0 <_read>
 8008c5c:	1c43      	adds	r3, r0, #1
 8008c5e:	d102      	bne.n	8008c66 <_read_r+0x1e>
 8008c60:	682b      	ldr	r3, [r5, #0]
 8008c62:	b103      	cbz	r3, 8008c66 <_read_r+0x1e>
 8008c64:	6023      	str	r3, [r4, #0]
 8008c66:	bd38      	pop	{r3, r4, r5, pc}
 8008c68:	20002c54 	.word	0x20002c54

08008c6c <_write_r>:
 8008c6c:	b538      	push	{r3, r4, r5, lr}
 8008c6e:	4d07      	ldr	r5, [pc, #28]	; (8008c8c <_write_r+0x20>)
 8008c70:	4604      	mov	r4, r0
 8008c72:	4608      	mov	r0, r1
 8008c74:	4611      	mov	r1, r2
 8008c76:	2200      	movs	r2, #0
 8008c78:	602a      	str	r2, [r5, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	f7fa fd94 	bl	80037a8 <_write>
 8008c80:	1c43      	adds	r3, r0, #1
 8008c82:	d102      	bne.n	8008c8a <_write_r+0x1e>
 8008c84:	682b      	ldr	r3, [r5, #0]
 8008c86:	b103      	cbz	r3, 8008c8a <_write_r+0x1e>
 8008c88:	6023      	str	r3, [r4, #0]
 8008c8a:	bd38      	pop	{r3, r4, r5, pc}
 8008c8c:	20002c54 	.word	0x20002c54

08008c90 <__errno>:
 8008c90:	4b01      	ldr	r3, [pc, #4]	; (8008c98 <__errno+0x8>)
 8008c92:	6818      	ldr	r0, [r3, #0]
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	200001f8 	.word	0x200001f8

08008c9c <__libc_init_array>:
 8008c9c:	b570      	push	{r4, r5, r6, lr}
 8008c9e:	4d0d      	ldr	r5, [pc, #52]	; (8008cd4 <__libc_init_array+0x38>)
 8008ca0:	4c0d      	ldr	r4, [pc, #52]	; (8008cd8 <__libc_init_array+0x3c>)
 8008ca2:	1b64      	subs	r4, r4, r5
 8008ca4:	10a4      	asrs	r4, r4, #2
 8008ca6:	2600      	movs	r6, #0
 8008ca8:	42a6      	cmp	r6, r4
 8008caa:	d109      	bne.n	8008cc0 <__libc_init_array+0x24>
 8008cac:	4d0b      	ldr	r5, [pc, #44]	; (8008cdc <__libc_init_array+0x40>)
 8008cae:	4c0c      	ldr	r4, [pc, #48]	; (8008ce0 <__libc_init_array+0x44>)
 8008cb0:	f004 f8fa 	bl	800cea8 <_init>
 8008cb4:	1b64      	subs	r4, r4, r5
 8008cb6:	10a4      	asrs	r4, r4, #2
 8008cb8:	2600      	movs	r6, #0
 8008cba:	42a6      	cmp	r6, r4
 8008cbc:	d105      	bne.n	8008cca <__libc_init_array+0x2e>
 8008cbe:	bd70      	pop	{r4, r5, r6, pc}
 8008cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cc4:	4798      	blx	r3
 8008cc6:	3601      	adds	r6, #1
 8008cc8:	e7ee      	b.n	8008ca8 <__libc_init_array+0xc>
 8008cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cce:	4798      	blx	r3
 8008cd0:	3601      	adds	r6, #1
 8008cd2:	e7f2      	b.n	8008cba <__libc_init_array+0x1e>
 8008cd4:	0800d748 	.word	0x0800d748
 8008cd8:	0800d748 	.word	0x0800d748
 8008cdc:	0800d748 	.word	0x0800d748
 8008ce0:	0800d74c 	.word	0x0800d74c

08008ce4 <__retarget_lock_init_recursive>:
 8008ce4:	4770      	bx	lr

08008ce6 <__retarget_lock_acquire_recursive>:
 8008ce6:	4770      	bx	lr

08008ce8 <__retarget_lock_release_recursive>:
 8008ce8:	4770      	bx	lr

08008cea <memcpy>:
 8008cea:	440a      	add	r2, r1
 8008cec:	4291      	cmp	r1, r2
 8008cee:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf2:	d100      	bne.n	8008cf6 <memcpy+0xc>
 8008cf4:	4770      	bx	lr
 8008cf6:	b510      	push	{r4, lr}
 8008cf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d00:	4291      	cmp	r1, r2
 8008d02:	d1f9      	bne.n	8008cf8 <memcpy+0xe>
 8008d04:	bd10      	pop	{r4, pc}
	...

08008d08 <nan>:
 8008d08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008d10 <nan+0x8>
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	00000000 	.word	0x00000000
 8008d14:	7ff80000 	.word	0x7ff80000

08008d18 <quorem>:
 8008d18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d1c:	6903      	ldr	r3, [r0, #16]
 8008d1e:	690c      	ldr	r4, [r1, #16]
 8008d20:	42a3      	cmp	r3, r4
 8008d22:	4607      	mov	r7, r0
 8008d24:	db7e      	blt.n	8008e24 <quorem+0x10c>
 8008d26:	3c01      	subs	r4, #1
 8008d28:	f101 0814 	add.w	r8, r1, #20
 8008d2c:	f100 0514 	add.w	r5, r0, #20
 8008d30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d34:	9301      	str	r3, [sp, #4]
 8008d36:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	429a      	cmp	r2, r3
 8008d42:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008d46:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d4a:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d4e:	d331      	bcc.n	8008db4 <quorem+0x9c>
 8008d50:	f04f 0e00 	mov.w	lr, #0
 8008d54:	4640      	mov	r0, r8
 8008d56:	46ac      	mov	ip, r5
 8008d58:	46f2      	mov	sl, lr
 8008d5a:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d5e:	b293      	uxth	r3, r2
 8008d60:	fb06 e303 	mla	r3, r6, r3, lr
 8008d64:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d68:	0c1a      	lsrs	r2, r3, #16
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	ebaa 0303 	sub.w	r3, sl, r3
 8008d70:	f8dc a000 	ldr.w	sl, [ip]
 8008d74:	fa13 f38a 	uxtah	r3, r3, sl
 8008d78:	fb06 220e 	mla	r2, r6, lr, r2
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	9b00      	ldr	r3, [sp, #0]
 8008d80:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d84:	b292      	uxth	r2, r2
 8008d86:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008d8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d8e:	f8bd 3000 	ldrh.w	r3, [sp]
 8008d92:	4581      	cmp	r9, r0
 8008d94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d98:	f84c 3b04 	str.w	r3, [ip], #4
 8008d9c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008da0:	d2db      	bcs.n	8008d5a <quorem+0x42>
 8008da2:	f855 300b 	ldr.w	r3, [r5, fp]
 8008da6:	b92b      	cbnz	r3, 8008db4 <quorem+0x9c>
 8008da8:	9b01      	ldr	r3, [sp, #4]
 8008daa:	3b04      	subs	r3, #4
 8008dac:	429d      	cmp	r5, r3
 8008dae:	461a      	mov	r2, r3
 8008db0:	d32c      	bcc.n	8008e0c <quorem+0xf4>
 8008db2:	613c      	str	r4, [r7, #16]
 8008db4:	4638      	mov	r0, r7
 8008db6:	f001 fd59 	bl	800a86c <__mcmp>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	db22      	blt.n	8008e04 <quorem+0xec>
 8008dbe:	3601      	adds	r6, #1
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008dc8:	f8d1 c000 	ldr.w	ip, [r1]
 8008dcc:	b293      	uxth	r3, r2
 8008dce:	1ac3      	subs	r3, r0, r3
 8008dd0:	0c12      	lsrs	r2, r2, #16
 8008dd2:	fa13 f38c 	uxtah	r3, r3, ip
 8008dd6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008dda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008de4:	45c1      	cmp	r9, r8
 8008de6:	f841 3b04 	str.w	r3, [r1], #4
 8008dea:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008dee:	d2e9      	bcs.n	8008dc4 <quorem+0xac>
 8008df0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008df4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008df8:	b922      	cbnz	r2, 8008e04 <quorem+0xec>
 8008dfa:	3b04      	subs	r3, #4
 8008dfc:	429d      	cmp	r5, r3
 8008dfe:	461a      	mov	r2, r3
 8008e00:	d30a      	bcc.n	8008e18 <quorem+0x100>
 8008e02:	613c      	str	r4, [r7, #16]
 8008e04:	4630      	mov	r0, r6
 8008e06:	b003      	add	sp, #12
 8008e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e0c:	6812      	ldr	r2, [r2, #0]
 8008e0e:	3b04      	subs	r3, #4
 8008e10:	2a00      	cmp	r2, #0
 8008e12:	d1ce      	bne.n	8008db2 <quorem+0x9a>
 8008e14:	3c01      	subs	r4, #1
 8008e16:	e7c9      	b.n	8008dac <quorem+0x94>
 8008e18:	6812      	ldr	r2, [r2, #0]
 8008e1a:	3b04      	subs	r3, #4
 8008e1c:	2a00      	cmp	r2, #0
 8008e1e:	d1f0      	bne.n	8008e02 <quorem+0xea>
 8008e20:	3c01      	subs	r4, #1
 8008e22:	e7eb      	b.n	8008dfc <quorem+0xe4>
 8008e24:	2000      	movs	r0, #0
 8008e26:	e7ee      	b.n	8008e06 <quorem+0xee>

08008e28 <_dtoa_r>:
 8008e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e2c:	ed2d 8b04 	vpush	{d8-d9}
 8008e30:	69c5      	ldr	r5, [r0, #28]
 8008e32:	b093      	sub	sp, #76	; 0x4c
 8008e34:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008e38:	ec57 6b10 	vmov	r6, r7, d0
 8008e3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008e40:	9107      	str	r1, [sp, #28]
 8008e42:	4604      	mov	r4, r0
 8008e44:	920a      	str	r2, [sp, #40]	; 0x28
 8008e46:	930d      	str	r3, [sp, #52]	; 0x34
 8008e48:	b975      	cbnz	r5, 8008e68 <_dtoa_r+0x40>
 8008e4a:	2010      	movs	r0, #16
 8008e4c:	f001 f982 	bl	800a154 <malloc>
 8008e50:	4602      	mov	r2, r0
 8008e52:	61e0      	str	r0, [r4, #28]
 8008e54:	b920      	cbnz	r0, 8008e60 <_dtoa_r+0x38>
 8008e56:	4bae      	ldr	r3, [pc, #696]	; (8009110 <_dtoa_r+0x2e8>)
 8008e58:	21ef      	movs	r1, #239	; 0xef
 8008e5a:	48ae      	ldr	r0, [pc, #696]	; (8009114 <_dtoa_r+0x2ec>)
 8008e5c:	f002 fd88 	bl	800b970 <__assert_func>
 8008e60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e64:	6005      	str	r5, [r0, #0]
 8008e66:	60c5      	str	r5, [r0, #12]
 8008e68:	69e3      	ldr	r3, [r4, #28]
 8008e6a:	6819      	ldr	r1, [r3, #0]
 8008e6c:	b151      	cbz	r1, 8008e84 <_dtoa_r+0x5c>
 8008e6e:	685a      	ldr	r2, [r3, #4]
 8008e70:	604a      	str	r2, [r1, #4]
 8008e72:	2301      	movs	r3, #1
 8008e74:	4093      	lsls	r3, r2
 8008e76:	608b      	str	r3, [r1, #8]
 8008e78:	4620      	mov	r0, r4
 8008e7a:	f001 fa71 	bl	800a360 <_Bfree>
 8008e7e:	69e3      	ldr	r3, [r4, #28]
 8008e80:	2200      	movs	r2, #0
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	1e3b      	subs	r3, r7, #0
 8008e86:	bfbb      	ittet	lt
 8008e88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008e8c:	9303      	strlt	r3, [sp, #12]
 8008e8e:	2300      	movge	r3, #0
 8008e90:	2201      	movlt	r2, #1
 8008e92:	bfac      	ite	ge
 8008e94:	f8c8 3000 	strge.w	r3, [r8]
 8008e98:	f8c8 2000 	strlt.w	r2, [r8]
 8008e9c:	4b9e      	ldr	r3, [pc, #632]	; (8009118 <_dtoa_r+0x2f0>)
 8008e9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008ea2:	ea33 0308 	bics.w	r3, r3, r8
 8008ea6:	d11b      	bne.n	8008ee0 <_dtoa_r+0xb8>
 8008ea8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008eaa:	f242 730f 	movw	r3, #9999	; 0x270f
 8008eae:	6013      	str	r3, [r2, #0]
 8008eb0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008eb4:	4333      	orrs	r3, r6
 8008eb6:	f000 8593 	beq.w	80099e0 <_dtoa_r+0xbb8>
 8008eba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ebc:	b963      	cbnz	r3, 8008ed8 <_dtoa_r+0xb0>
 8008ebe:	4b97      	ldr	r3, [pc, #604]	; (800911c <_dtoa_r+0x2f4>)
 8008ec0:	e027      	b.n	8008f12 <_dtoa_r+0xea>
 8008ec2:	4b97      	ldr	r3, [pc, #604]	; (8009120 <_dtoa_r+0x2f8>)
 8008ec4:	9300      	str	r3, [sp, #0]
 8008ec6:	3308      	adds	r3, #8
 8008ec8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008eca:	6013      	str	r3, [r2, #0]
 8008ecc:	9800      	ldr	r0, [sp, #0]
 8008ece:	b013      	add	sp, #76	; 0x4c
 8008ed0:	ecbd 8b04 	vpop	{d8-d9}
 8008ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed8:	4b90      	ldr	r3, [pc, #576]	; (800911c <_dtoa_r+0x2f4>)
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	3303      	adds	r3, #3
 8008ede:	e7f3      	b.n	8008ec8 <_dtoa_r+0xa0>
 8008ee0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	ec51 0b17 	vmov	r0, r1, d7
 8008eea:	eeb0 8a47 	vmov.f32	s16, s14
 8008eee:	eef0 8a67 	vmov.f32	s17, s15
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	f7f7 fdf8 	bl	8000ae8 <__aeabi_dcmpeq>
 8008ef8:	4681      	mov	r9, r0
 8008efa:	b160      	cbz	r0, 8008f16 <_dtoa_r+0xee>
 8008efc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008efe:	2301      	movs	r3, #1
 8008f00:	6013      	str	r3, [r2, #0]
 8008f02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f000 8568 	beq.w	80099da <_dtoa_r+0xbb2>
 8008f0a:	4b86      	ldr	r3, [pc, #536]	; (8009124 <_dtoa_r+0x2fc>)
 8008f0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008f0e:	6013      	str	r3, [r2, #0]
 8008f10:	3b01      	subs	r3, #1
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	e7da      	b.n	8008ecc <_dtoa_r+0xa4>
 8008f16:	aa10      	add	r2, sp, #64	; 0x40
 8008f18:	a911      	add	r1, sp, #68	; 0x44
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	eeb0 0a48 	vmov.f32	s0, s16
 8008f20:	eef0 0a68 	vmov.f32	s1, s17
 8008f24:	f001 fdb8 	bl	800aa98 <__d2b>
 8008f28:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008f2c:	4682      	mov	sl, r0
 8008f2e:	2d00      	cmp	r5, #0
 8008f30:	d07f      	beq.n	8009032 <_dtoa_r+0x20a>
 8008f32:	ee18 3a90 	vmov	r3, s17
 8008f36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f3a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008f3e:	ec51 0b18 	vmov	r0, r1, d8
 8008f42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008f46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008f4a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008f4e:	4619      	mov	r1, r3
 8008f50:	2200      	movs	r2, #0
 8008f52:	4b75      	ldr	r3, [pc, #468]	; (8009128 <_dtoa_r+0x300>)
 8008f54:	f7f7 f9a8 	bl	80002a8 <__aeabi_dsub>
 8008f58:	a367      	add	r3, pc, #412	; (adr r3, 80090f8 <_dtoa_r+0x2d0>)
 8008f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5e:	f7f7 fb5b 	bl	8000618 <__aeabi_dmul>
 8008f62:	a367      	add	r3, pc, #412	; (adr r3, 8009100 <_dtoa_r+0x2d8>)
 8008f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f68:	f7f7 f9a0 	bl	80002ac <__adddf3>
 8008f6c:	4606      	mov	r6, r0
 8008f6e:	4628      	mov	r0, r5
 8008f70:	460f      	mov	r7, r1
 8008f72:	f7f7 fae7 	bl	8000544 <__aeabi_i2d>
 8008f76:	a364      	add	r3, pc, #400	; (adr r3, 8009108 <_dtoa_r+0x2e0>)
 8008f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7c:	f7f7 fb4c 	bl	8000618 <__aeabi_dmul>
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	4630      	mov	r0, r6
 8008f86:	4639      	mov	r1, r7
 8008f88:	f7f7 f990 	bl	80002ac <__adddf3>
 8008f8c:	4606      	mov	r6, r0
 8008f8e:	460f      	mov	r7, r1
 8008f90:	f7f7 fdf2 	bl	8000b78 <__aeabi_d2iz>
 8008f94:	2200      	movs	r2, #0
 8008f96:	4683      	mov	fp, r0
 8008f98:	2300      	movs	r3, #0
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	4639      	mov	r1, r7
 8008f9e:	f7f7 fdad 	bl	8000afc <__aeabi_dcmplt>
 8008fa2:	b148      	cbz	r0, 8008fb8 <_dtoa_r+0x190>
 8008fa4:	4658      	mov	r0, fp
 8008fa6:	f7f7 facd 	bl	8000544 <__aeabi_i2d>
 8008faa:	4632      	mov	r2, r6
 8008fac:	463b      	mov	r3, r7
 8008fae:	f7f7 fd9b 	bl	8000ae8 <__aeabi_dcmpeq>
 8008fb2:	b908      	cbnz	r0, 8008fb8 <_dtoa_r+0x190>
 8008fb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008fb8:	f1bb 0f16 	cmp.w	fp, #22
 8008fbc:	d857      	bhi.n	800906e <_dtoa_r+0x246>
 8008fbe:	4b5b      	ldr	r3, [pc, #364]	; (800912c <_dtoa_r+0x304>)
 8008fc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc8:	ec51 0b18 	vmov	r0, r1, d8
 8008fcc:	f7f7 fd96 	bl	8000afc <__aeabi_dcmplt>
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	d04e      	beq.n	8009072 <_dtoa_r+0x24a>
 8008fd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008fd8:	2300      	movs	r3, #0
 8008fda:	930c      	str	r3, [sp, #48]	; 0x30
 8008fdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008fde:	1b5b      	subs	r3, r3, r5
 8008fe0:	1e5a      	subs	r2, r3, #1
 8008fe2:	bf45      	ittet	mi
 8008fe4:	f1c3 0301 	rsbmi	r3, r3, #1
 8008fe8:	9305      	strmi	r3, [sp, #20]
 8008fea:	2300      	movpl	r3, #0
 8008fec:	2300      	movmi	r3, #0
 8008fee:	9206      	str	r2, [sp, #24]
 8008ff0:	bf54      	ite	pl
 8008ff2:	9305      	strpl	r3, [sp, #20]
 8008ff4:	9306      	strmi	r3, [sp, #24]
 8008ff6:	f1bb 0f00 	cmp.w	fp, #0
 8008ffa:	db3c      	blt.n	8009076 <_dtoa_r+0x24e>
 8008ffc:	9b06      	ldr	r3, [sp, #24]
 8008ffe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009002:	445b      	add	r3, fp
 8009004:	9306      	str	r3, [sp, #24]
 8009006:	2300      	movs	r3, #0
 8009008:	9308      	str	r3, [sp, #32]
 800900a:	9b07      	ldr	r3, [sp, #28]
 800900c:	2b09      	cmp	r3, #9
 800900e:	d868      	bhi.n	80090e2 <_dtoa_r+0x2ba>
 8009010:	2b05      	cmp	r3, #5
 8009012:	bfc4      	itt	gt
 8009014:	3b04      	subgt	r3, #4
 8009016:	9307      	strgt	r3, [sp, #28]
 8009018:	9b07      	ldr	r3, [sp, #28]
 800901a:	f1a3 0302 	sub.w	r3, r3, #2
 800901e:	bfcc      	ite	gt
 8009020:	2500      	movgt	r5, #0
 8009022:	2501      	movle	r5, #1
 8009024:	2b03      	cmp	r3, #3
 8009026:	f200 8085 	bhi.w	8009134 <_dtoa_r+0x30c>
 800902a:	e8df f003 	tbb	[pc, r3]
 800902e:	3b2e      	.short	0x3b2e
 8009030:	5839      	.short	0x5839
 8009032:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009036:	441d      	add	r5, r3
 8009038:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800903c:	2b20      	cmp	r3, #32
 800903e:	bfc1      	itttt	gt
 8009040:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009044:	fa08 f803 	lslgt.w	r8, r8, r3
 8009048:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800904c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009050:	bfd6      	itet	le
 8009052:	f1c3 0320 	rsble	r3, r3, #32
 8009056:	ea48 0003 	orrgt.w	r0, r8, r3
 800905a:	fa06 f003 	lslle.w	r0, r6, r3
 800905e:	f7f7 fa61 	bl	8000524 <__aeabi_ui2d>
 8009062:	2201      	movs	r2, #1
 8009064:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009068:	3d01      	subs	r5, #1
 800906a:	920e      	str	r2, [sp, #56]	; 0x38
 800906c:	e76f      	b.n	8008f4e <_dtoa_r+0x126>
 800906e:	2301      	movs	r3, #1
 8009070:	e7b3      	b.n	8008fda <_dtoa_r+0x1b2>
 8009072:	900c      	str	r0, [sp, #48]	; 0x30
 8009074:	e7b2      	b.n	8008fdc <_dtoa_r+0x1b4>
 8009076:	9b05      	ldr	r3, [sp, #20]
 8009078:	eba3 030b 	sub.w	r3, r3, fp
 800907c:	9305      	str	r3, [sp, #20]
 800907e:	f1cb 0300 	rsb	r3, fp, #0
 8009082:	9308      	str	r3, [sp, #32]
 8009084:	2300      	movs	r3, #0
 8009086:	930b      	str	r3, [sp, #44]	; 0x2c
 8009088:	e7bf      	b.n	800900a <_dtoa_r+0x1e2>
 800908a:	2300      	movs	r3, #0
 800908c:	9309      	str	r3, [sp, #36]	; 0x24
 800908e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009090:	2b00      	cmp	r3, #0
 8009092:	dc52      	bgt.n	800913a <_dtoa_r+0x312>
 8009094:	2301      	movs	r3, #1
 8009096:	9301      	str	r3, [sp, #4]
 8009098:	9304      	str	r3, [sp, #16]
 800909a:	461a      	mov	r2, r3
 800909c:	920a      	str	r2, [sp, #40]	; 0x28
 800909e:	e00b      	b.n	80090b8 <_dtoa_r+0x290>
 80090a0:	2301      	movs	r3, #1
 80090a2:	e7f3      	b.n	800908c <_dtoa_r+0x264>
 80090a4:	2300      	movs	r3, #0
 80090a6:	9309      	str	r3, [sp, #36]	; 0x24
 80090a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090aa:	445b      	add	r3, fp
 80090ac:	9301      	str	r3, [sp, #4]
 80090ae:	3301      	adds	r3, #1
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	9304      	str	r3, [sp, #16]
 80090b4:	bfb8      	it	lt
 80090b6:	2301      	movlt	r3, #1
 80090b8:	69e0      	ldr	r0, [r4, #28]
 80090ba:	2100      	movs	r1, #0
 80090bc:	2204      	movs	r2, #4
 80090be:	f102 0614 	add.w	r6, r2, #20
 80090c2:	429e      	cmp	r6, r3
 80090c4:	d93d      	bls.n	8009142 <_dtoa_r+0x31a>
 80090c6:	6041      	str	r1, [r0, #4]
 80090c8:	4620      	mov	r0, r4
 80090ca:	f001 f909 	bl	800a2e0 <_Balloc>
 80090ce:	9000      	str	r0, [sp, #0]
 80090d0:	2800      	cmp	r0, #0
 80090d2:	d139      	bne.n	8009148 <_dtoa_r+0x320>
 80090d4:	4b16      	ldr	r3, [pc, #88]	; (8009130 <_dtoa_r+0x308>)
 80090d6:	4602      	mov	r2, r0
 80090d8:	f240 11af 	movw	r1, #431	; 0x1af
 80090dc:	e6bd      	b.n	8008e5a <_dtoa_r+0x32>
 80090de:	2301      	movs	r3, #1
 80090e0:	e7e1      	b.n	80090a6 <_dtoa_r+0x27e>
 80090e2:	2501      	movs	r5, #1
 80090e4:	2300      	movs	r3, #0
 80090e6:	9307      	str	r3, [sp, #28]
 80090e8:	9509      	str	r5, [sp, #36]	; 0x24
 80090ea:	f04f 33ff 	mov.w	r3, #4294967295
 80090ee:	9301      	str	r3, [sp, #4]
 80090f0:	9304      	str	r3, [sp, #16]
 80090f2:	2200      	movs	r2, #0
 80090f4:	2312      	movs	r3, #18
 80090f6:	e7d1      	b.n	800909c <_dtoa_r+0x274>
 80090f8:	636f4361 	.word	0x636f4361
 80090fc:	3fd287a7 	.word	0x3fd287a7
 8009100:	8b60c8b3 	.word	0x8b60c8b3
 8009104:	3fc68a28 	.word	0x3fc68a28
 8009108:	509f79fb 	.word	0x509f79fb
 800910c:	3fd34413 	.word	0x3fd34413
 8009110:	0800d32f 	.word	0x0800d32f
 8009114:	0800d346 	.word	0x0800d346
 8009118:	7ff00000 	.word	0x7ff00000
 800911c:	0800d32b 	.word	0x0800d32b
 8009120:	0800d322 	.word	0x0800d322
 8009124:	0800d68d 	.word	0x0800d68d
 8009128:	3ff80000 	.word	0x3ff80000
 800912c:	0800d490 	.word	0x0800d490
 8009130:	0800d39e 	.word	0x0800d39e
 8009134:	2301      	movs	r3, #1
 8009136:	9309      	str	r3, [sp, #36]	; 0x24
 8009138:	e7d7      	b.n	80090ea <_dtoa_r+0x2c2>
 800913a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800913c:	9301      	str	r3, [sp, #4]
 800913e:	9304      	str	r3, [sp, #16]
 8009140:	e7ba      	b.n	80090b8 <_dtoa_r+0x290>
 8009142:	3101      	adds	r1, #1
 8009144:	0052      	lsls	r2, r2, #1
 8009146:	e7ba      	b.n	80090be <_dtoa_r+0x296>
 8009148:	69e3      	ldr	r3, [r4, #28]
 800914a:	9a00      	ldr	r2, [sp, #0]
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	9b04      	ldr	r3, [sp, #16]
 8009150:	2b0e      	cmp	r3, #14
 8009152:	f200 80a8 	bhi.w	80092a6 <_dtoa_r+0x47e>
 8009156:	2d00      	cmp	r5, #0
 8009158:	f000 80a5 	beq.w	80092a6 <_dtoa_r+0x47e>
 800915c:	f1bb 0f00 	cmp.w	fp, #0
 8009160:	dd38      	ble.n	80091d4 <_dtoa_r+0x3ac>
 8009162:	4bc0      	ldr	r3, [pc, #768]	; (8009464 <_dtoa_r+0x63c>)
 8009164:	f00b 020f 	and.w	r2, fp, #15
 8009168:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800916c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009170:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009174:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009178:	d019      	beq.n	80091ae <_dtoa_r+0x386>
 800917a:	4bbb      	ldr	r3, [pc, #748]	; (8009468 <_dtoa_r+0x640>)
 800917c:	ec51 0b18 	vmov	r0, r1, d8
 8009180:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009184:	f7f7 fb72 	bl	800086c <__aeabi_ddiv>
 8009188:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800918c:	f008 080f 	and.w	r8, r8, #15
 8009190:	2503      	movs	r5, #3
 8009192:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009468 <_dtoa_r+0x640>
 8009196:	f1b8 0f00 	cmp.w	r8, #0
 800919a:	d10a      	bne.n	80091b2 <_dtoa_r+0x38a>
 800919c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091a0:	4632      	mov	r2, r6
 80091a2:	463b      	mov	r3, r7
 80091a4:	f7f7 fb62 	bl	800086c <__aeabi_ddiv>
 80091a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091ac:	e02b      	b.n	8009206 <_dtoa_r+0x3de>
 80091ae:	2502      	movs	r5, #2
 80091b0:	e7ef      	b.n	8009192 <_dtoa_r+0x36a>
 80091b2:	f018 0f01 	tst.w	r8, #1
 80091b6:	d008      	beq.n	80091ca <_dtoa_r+0x3a2>
 80091b8:	4630      	mov	r0, r6
 80091ba:	4639      	mov	r1, r7
 80091bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80091c0:	f7f7 fa2a 	bl	8000618 <__aeabi_dmul>
 80091c4:	3501      	adds	r5, #1
 80091c6:	4606      	mov	r6, r0
 80091c8:	460f      	mov	r7, r1
 80091ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80091ce:	f109 0908 	add.w	r9, r9, #8
 80091d2:	e7e0      	b.n	8009196 <_dtoa_r+0x36e>
 80091d4:	f000 809f 	beq.w	8009316 <_dtoa_r+0x4ee>
 80091d8:	f1cb 0600 	rsb	r6, fp, #0
 80091dc:	4ba1      	ldr	r3, [pc, #644]	; (8009464 <_dtoa_r+0x63c>)
 80091de:	4fa2      	ldr	r7, [pc, #648]	; (8009468 <_dtoa_r+0x640>)
 80091e0:	f006 020f 	and.w	r2, r6, #15
 80091e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ec:	ec51 0b18 	vmov	r0, r1, d8
 80091f0:	f7f7 fa12 	bl	8000618 <__aeabi_dmul>
 80091f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091f8:	1136      	asrs	r6, r6, #4
 80091fa:	2300      	movs	r3, #0
 80091fc:	2502      	movs	r5, #2
 80091fe:	2e00      	cmp	r6, #0
 8009200:	d17e      	bne.n	8009300 <_dtoa_r+0x4d8>
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1d0      	bne.n	80091a8 <_dtoa_r+0x380>
 8009206:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009208:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800920c:	2b00      	cmp	r3, #0
 800920e:	f000 8084 	beq.w	800931a <_dtoa_r+0x4f2>
 8009212:	4b96      	ldr	r3, [pc, #600]	; (800946c <_dtoa_r+0x644>)
 8009214:	2200      	movs	r2, #0
 8009216:	4640      	mov	r0, r8
 8009218:	4649      	mov	r1, r9
 800921a:	f7f7 fc6f 	bl	8000afc <__aeabi_dcmplt>
 800921e:	2800      	cmp	r0, #0
 8009220:	d07b      	beq.n	800931a <_dtoa_r+0x4f2>
 8009222:	9b04      	ldr	r3, [sp, #16]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d078      	beq.n	800931a <_dtoa_r+0x4f2>
 8009228:	9b01      	ldr	r3, [sp, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	dd39      	ble.n	80092a2 <_dtoa_r+0x47a>
 800922e:	4b90      	ldr	r3, [pc, #576]	; (8009470 <_dtoa_r+0x648>)
 8009230:	2200      	movs	r2, #0
 8009232:	4640      	mov	r0, r8
 8009234:	4649      	mov	r1, r9
 8009236:	f7f7 f9ef 	bl	8000618 <__aeabi_dmul>
 800923a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800923e:	9e01      	ldr	r6, [sp, #4]
 8009240:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009244:	3501      	adds	r5, #1
 8009246:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800924a:	4628      	mov	r0, r5
 800924c:	f7f7 f97a 	bl	8000544 <__aeabi_i2d>
 8009250:	4642      	mov	r2, r8
 8009252:	464b      	mov	r3, r9
 8009254:	f7f7 f9e0 	bl	8000618 <__aeabi_dmul>
 8009258:	4b86      	ldr	r3, [pc, #536]	; (8009474 <_dtoa_r+0x64c>)
 800925a:	2200      	movs	r2, #0
 800925c:	f7f7 f826 	bl	80002ac <__adddf3>
 8009260:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009268:	9303      	str	r3, [sp, #12]
 800926a:	2e00      	cmp	r6, #0
 800926c:	d158      	bne.n	8009320 <_dtoa_r+0x4f8>
 800926e:	4b82      	ldr	r3, [pc, #520]	; (8009478 <_dtoa_r+0x650>)
 8009270:	2200      	movs	r2, #0
 8009272:	4640      	mov	r0, r8
 8009274:	4649      	mov	r1, r9
 8009276:	f7f7 f817 	bl	80002a8 <__aeabi_dsub>
 800927a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800927e:	4680      	mov	r8, r0
 8009280:	4689      	mov	r9, r1
 8009282:	f7f7 fc59 	bl	8000b38 <__aeabi_dcmpgt>
 8009286:	2800      	cmp	r0, #0
 8009288:	f040 8296 	bne.w	80097b8 <_dtoa_r+0x990>
 800928c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009290:	4640      	mov	r0, r8
 8009292:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009296:	4649      	mov	r1, r9
 8009298:	f7f7 fc30 	bl	8000afc <__aeabi_dcmplt>
 800929c:	2800      	cmp	r0, #0
 800929e:	f040 8289 	bne.w	80097b4 <_dtoa_r+0x98c>
 80092a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80092a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f2c0 814e 	blt.w	800954a <_dtoa_r+0x722>
 80092ae:	f1bb 0f0e 	cmp.w	fp, #14
 80092b2:	f300 814a 	bgt.w	800954a <_dtoa_r+0x722>
 80092b6:	4b6b      	ldr	r3, [pc, #428]	; (8009464 <_dtoa_r+0x63c>)
 80092b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80092bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80092c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	f280 80dc 	bge.w	8009480 <_dtoa_r+0x658>
 80092c8:	9b04      	ldr	r3, [sp, #16]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	f300 80d8 	bgt.w	8009480 <_dtoa_r+0x658>
 80092d0:	f040 826f 	bne.w	80097b2 <_dtoa_r+0x98a>
 80092d4:	4b68      	ldr	r3, [pc, #416]	; (8009478 <_dtoa_r+0x650>)
 80092d6:	2200      	movs	r2, #0
 80092d8:	4640      	mov	r0, r8
 80092da:	4649      	mov	r1, r9
 80092dc:	f7f7 f99c 	bl	8000618 <__aeabi_dmul>
 80092e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092e4:	f7f7 fc1e 	bl	8000b24 <__aeabi_dcmpge>
 80092e8:	9e04      	ldr	r6, [sp, #16]
 80092ea:	4637      	mov	r7, r6
 80092ec:	2800      	cmp	r0, #0
 80092ee:	f040 8245 	bne.w	800977c <_dtoa_r+0x954>
 80092f2:	9d00      	ldr	r5, [sp, #0]
 80092f4:	2331      	movs	r3, #49	; 0x31
 80092f6:	f805 3b01 	strb.w	r3, [r5], #1
 80092fa:	f10b 0b01 	add.w	fp, fp, #1
 80092fe:	e241      	b.n	8009784 <_dtoa_r+0x95c>
 8009300:	07f2      	lsls	r2, r6, #31
 8009302:	d505      	bpl.n	8009310 <_dtoa_r+0x4e8>
 8009304:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009308:	f7f7 f986 	bl	8000618 <__aeabi_dmul>
 800930c:	3501      	adds	r5, #1
 800930e:	2301      	movs	r3, #1
 8009310:	1076      	asrs	r6, r6, #1
 8009312:	3708      	adds	r7, #8
 8009314:	e773      	b.n	80091fe <_dtoa_r+0x3d6>
 8009316:	2502      	movs	r5, #2
 8009318:	e775      	b.n	8009206 <_dtoa_r+0x3de>
 800931a:	9e04      	ldr	r6, [sp, #16]
 800931c:	465f      	mov	r7, fp
 800931e:	e792      	b.n	8009246 <_dtoa_r+0x41e>
 8009320:	9900      	ldr	r1, [sp, #0]
 8009322:	4b50      	ldr	r3, [pc, #320]	; (8009464 <_dtoa_r+0x63c>)
 8009324:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009328:	4431      	add	r1, r6
 800932a:	9102      	str	r1, [sp, #8]
 800932c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800932e:	eeb0 9a47 	vmov.f32	s18, s14
 8009332:	eef0 9a67 	vmov.f32	s19, s15
 8009336:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800933a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800933e:	2900      	cmp	r1, #0
 8009340:	d044      	beq.n	80093cc <_dtoa_r+0x5a4>
 8009342:	494e      	ldr	r1, [pc, #312]	; (800947c <_dtoa_r+0x654>)
 8009344:	2000      	movs	r0, #0
 8009346:	f7f7 fa91 	bl	800086c <__aeabi_ddiv>
 800934a:	ec53 2b19 	vmov	r2, r3, d9
 800934e:	f7f6 ffab 	bl	80002a8 <__aeabi_dsub>
 8009352:	9d00      	ldr	r5, [sp, #0]
 8009354:	ec41 0b19 	vmov	d9, r0, r1
 8009358:	4649      	mov	r1, r9
 800935a:	4640      	mov	r0, r8
 800935c:	f7f7 fc0c 	bl	8000b78 <__aeabi_d2iz>
 8009360:	4606      	mov	r6, r0
 8009362:	f7f7 f8ef 	bl	8000544 <__aeabi_i2d>
 8009366:	4602      	mov	r2, r0
 8009368:	460b      	mov	r3, r1
 800936a:	4640      	mov	r0, r8
 800936c:	4649      	mov	r1, r9
 800936e:	f7f6 ff9b 	bl	80002a8 <__aeabi_dsub>
 8009372:	3630      	adds	r6, #48	; 0x30
 8009374:	f805 6b01 	strb.w	r6, [r5], #1
 8009378:	ec53 2b19 	vmov	r2, r3, d9
 800937c:	4680      	mov	r8, r0
 800937e:	4689      	mov	r9, r1
 8009380:	f7f7 fbbc 	bl	8000afc <__aeabi_dcmplt>
 8009384:	2800      	cmp	r0, #0
 8009386:	d164      	bne.n	8009452 <_dtoa_r+0x62a>
 8009388:	4642      	mov	r2, r8
 800938a:	464b      	mov	r3, r9
 800938c:	4937      	ldr	r1, [pc, #220]	; (800946c <_dtoa_r+0x644>)
 800938e:	2000      	movs	r0, #0
 8009390:	f7f6 ff8a 	bl	80002a8 <__aeabi_dsub>
 8009394:	ec53 2b19 	vmov	r2, r3, d9
 8009398:	f7f7 fbb0 	bl	8000afc <__aeabi_dcmplt>
 800939c:	2800      	cmp	r0, #0
 800939e:	f040 80b6 	bne.w	800950e <_dtoa_r+0x6e6>
 80093a2:	9b02      	ldr	r3, [sp, #8]
 80093a4:	429d      	cmp	r5, r3
 80093a6:	f43f af7c 	beq.w	80092a2 <_dtoa_r+0x47a>
 80093aa:	4b31      	ldr	r3, [pc, #196]	; (8009470 <_dtoa_r+0x648>)
 80093ac:	ec51 0b19 	vmov	r0, r1, d9
 80093b0:	2200      	movs	r2, #0
 80093b2:	f7f7 f931 	bl	8000618 <__aeabi_dmul>
 80093b6:	4b2e      	ldr	r3, [pc, #184]	; (8009470 <_dtoa_r+0x648>)
 80093b8:	ec41 0b19 	vmov	d9, r0, r1
 80093bc:	2200      	movs	r2, #0
 80093be:	4640      	mov	r0, r8
 80093c0:	4649      	mov	r1, r9
 80093c2:	f7f7 f929 	bl	8000618 <__aeabi_dmul>
 80093c6:	4680      	mov	r8, r0
 80093c8:	4689      	mov	r9, r1
 80093ca:	e7c5      	b.n	8009358 <_dtoa_r+0x530>
 80093cc:	ec51 0b17 	vmov	r0, r1, d7
 80093d0:	f7f7 f922 	bl	8000618 <__aeabi_dmul>
 80093d4:	9b02      	ldr	r3, [sp, #8]
 80093d6:	9d00      	ldr	r5, [sp, #0]
 80093d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80093da:	ec41 0b19 	vmov	d9, r0, r1
 80093de:	4649      	mov	r1, r9
 80093e0:	4640      	mov	r0, r8
 80093e2:	f7f7 fbc9 	bl	8000b78 <__aeabi_d2iz>
 80093e6:	4606      	mov	r6, r0
 80093e8:	f7f7 f8ac 	bl	8000544 <__aeabi_i2d>
 80093ec:	3630      	adds	r6, #48	; 0x30
 80093ee:	4602      	mov	r2, r0
 80093f0:	460b      	mov	r3, r1
 80093f2:	4640      	mov	r0, r8
 80093f4:	4649      	mov	r1, r9
 80093f6:	f7f6 ff57 	bl	80002a8 <__aeabi_dsub>
 80093fa:	f805 6b01 	strb.w	r6, [r5], #1
 80093fe:	9b02      	ldr	r3, [sp, #8]
 8009400:	429d      	cmp	r5, r3
 8009402:	4680      	mov	r8, r0
 8009404:	4689      	mov	r9, r1
 8009406:	f04f 0200 	mov.w	r2, #0
 800940a:	d124      	bne.n	8009456 <_dtoa_r+0x62e>
 800940c:	4b1b      	ldr	r3, [pc, #108]	; (800947c <_dtoa_r+0x654>)
 800940e:	ec51 0b19 	vmov	r0, r1, d9
 8009412:	f7f6 ff4b 	bl	80002ac <__adddf3>
 8009416:	4602      	mov	r2, r0
 8009418:	460b      	mov	r3, r1
 800941a:	4640      	mov	r0, r8
 800941c:	4649      	mov	r1, r9
 800941e:	f7f7 fb8b 	bl	8000b38 <__aeabi_dcmpgt>
 8009422:	2800      	cmp	r0, #0
 8009424:	d173      	bne.n	800950e <_dtoa_r+0x6e6>
 8009426:	ec53 2b19 	vmov	r2, r3, d9
 800942a:	4914      	ldr	r1, [pc, #80]	; (800947c <_dtoa_r+0x654>)
 800942c:	2000      	movs	r0, #0
 800942e:	f7f6 ff3b 	bl	80002a8 <__aeabi_dsub>
 8009432:	4602      	mov	r2, r0
 8009434:	460b      	mov	r3, r1
 8009436:	4640      	mov	r0, r8
 8009438:	4649      	mov	r1, r9
 800943a:	f7f7 fb5f 	bl	8000afc <__aeabi_dcmplt>
 800943e:	2800      	cmp	r0, #0
 8009440:	f43f af2f 	beq.w	80092a2 <_dtoa_r+0x47a>
 8009444:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009446:	1e6b      	subs	r3, r5, #1
 8009448:	930f      	str	r3, [sp, #60]	; 0x3c
 800944a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800944e:	2b30      	cmp	r3, #48	; 0x30
 8009450:	d0f8      	beq.n	8009444 <_dtoa_r+0x61c>
 8009452:	46bb      	mov	fp, r7
 8009454:	e04a      	b.n	80094ec <_dtoa_r+0x6c4>
 8009456:	4b06      	ldr	r3, [pc, #24]	; (8009470 <_dtoa_r+0x648>)
 8009458:	f7f7 f8de 	bl	8000618 <__aeabi_dmul>
 800945c:	4680      	mov	r8, r0
 800945e:	4689      	mov	r9, r1
 8009460:	e7bd      	b.n	80093de <_dtoa_r+0x5b6>
 8009462:	bf00      	nop
 8009464:	0800d490 	.word	0x0800d490
 8009468:	0800d468 	.word	0x0800d468
 800946c:	3ff00000 	.word	0x3ff00000
 8009470:	40240000 	.word	0x40240000
 8009474:	401c0000 	.word	0x401c0000
 8009478:	40140000 	.word	0x40140000
 800947c:	3fe00000 	.word	0x3fe00000
 8009480:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009484:	9d00      	ldr	r5, [sp, #0]
 8009486:	4642      	mov	r2, r8
 8009488:	464b      	mov	r3, r9
 800948a:	4630      	mov	r0, r6
 800948c:	4639      	mov	r1, r7
 800948e:	f7f7 f9ed 	bl	800086c <__aeabi_ddiv>
 8009492:	f7f7 fb71 	bl	8000b78 <__aeabi_d2iz>
 8009496:	9001      	str	r0, [sp, #4]
 8009498:	f7f7 f854 	bl	8000544 <__aeabi_i2d>
 800949c:	4642      	mov	r2, r8
 800949e:	464b      	mov	r3, r9
 80094a0:	f7f7 f8ba 	bl	8000618 <__aeabi_dmul>
 80094a4:	4602      	mov	r2, r0
 80094a6:	460b      	mov	r3, r1
 80094a8:	4630      	mov	r0, r6
 80094aa:	4639      	mov	r1, r7
 80094ac:	f7f6 fefc 	bl	80002a8 <__aeabi_dsub>
 80094b0:	9e01      	ldr	r6, [sp, #4]
 80094b2:	9f04      	ldr	r7, [sp, #16]
 80094b4:	3630      	adds	r6, #48	; 0x30
 80094b6:	f805 6b01 	strb.w	r6, [r5], #1
 80094ba:	9e00      	ldr	r6, [sp, #0]
 80094bc:	1bae      	subs	r6, r5, r6
 80094be:	42b7      	cmp	r7, r6
 80094c0:	4602      	mov	r2, r0
 80094c2:	460b      	mov	r3, r1
 80094c4:	d134      	bne.n	8009530 <_dtoa_r+0x708>
 80094c6:	f7f6 fef1 	bl	80002ac <__adddf3>
 80094ca:	4642      	mov	r2, r8
 80094cc:	464b      	mov	r3, r9
 80094ce:	4606      	mov	r6, r0
 80094d0:	460f      	mov	r7, r1
 80094d2:	f7f7 fb31 	bl	8000b38 <__aeabi_dcmpgt>
 80094d6:	b9c8      	cbnz	r0, 800950c <_dtoa_r+0x6e4>
 80094d8:	4642      	mov	r2, r8
 80094da:	464b      	mov	r3, r9
 80094dc:	4630      	mov	r0, r6
 80094de:	4639      	mov	r1, r7
 80094e0:	f7f7 fb02 	bl	8000ae8 <__aeabi_dcmpeq>
 80094e4:	b110      	cbz	r0, 80094ec <_dtoa_r+0x6c4>
 80094e6:	9b01      	ldr	r3, [sp, #4]
 80094e8:	07db      	lsls	r3, r3, #31
 80094ea:	d40f      	bmi.n	800950c <_dtoa_r+0x6e4>
 80094ec:	4651      	mov	r1, sl
 80094ee:	4620      	mov	r0, r4
 80094f0:	f000 ff36 	bl	800a360 <_Bfree>
 80094f4:	2300      	movs	r3, #0
 80094f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094f8:	702b      	strb	r3, [r5, #0]
 80094fa:	f10b 0301 	add.w	r3, fp, #1
 80094fe:	6013      	str	r3, [r2, #0]
 8009500:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009502:	2b00      	cmp	r3, #0
 8009504:	f43f ace2 	beq.w	8008ecc <_dtoa_r+0xa4>
 8009508:	601d      	str	r5, [r3, #0]
 800950a:	e4df      	b.n	8008ecc <_dtoa_r+0xa4>
 800950c:	465f      	mov	r7, fp
 800950e:	462b      	mov	r3, r5
 8009510:	461d      	mov	r5, r3
 8009512:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009516:	2a39      	cmp	r2, #57	; 0x39
 8009518:	d106      	bne.n	8009528 <_dtoa_r+0x700>
 800951a:	9a00      	ldr	r2, [sp, #0]
 800951c:	429a      	cmp	r2, r3
 800951e:	d1f7      	bne.n	8009510 <_dtoa_r+0x6e8>
 8009520:	9900      	ldr	r1, [sp, #0]
 8009522:	2230      	movs	r2, #48	; 0x30
 8009524:	3701      	adds	r7, #1
 8009526:	700a      	strb	r2, [r1, #0]
 8009528:	781a      	ldrb	r2, [r3, #0]
 800952a:	3201      	adds	r2, #1
 800952c:	701a      	strb	r2, [r3, #0]
 800952e:	e790      	b.n	8009452 <_dtoa_r+0x62a>
 8009530:	4ba3      	ldr	r3, [pc, #652]	; (80097c0 <_dtoa_r+0x998>)
 8009532:	2200      	movs	r2, #0
 8009534:	f7f7 f870 	bl	8000618 <__aeabi_dmul>
 8009538:	2200      	movs	r2, #0
 800953a:	2300      	movs	r3, #0
 800953c:	4606      	mov	r6, r0
 800953e:	460f      	mov	r7, r1
 8009540:	f7f7 fad2 	bl	8000ae8 <__aeabi_dcmpeq>
 8009544:	2800      	cmp	r0, #0
 8009546:	d09e      	beq.n	8009486 <_dtoa_r+0x65e>
 8009548:	e7d0      	b.n	80094ec <_dtoa_r+0x6c4>
 800954a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800954c:	2a00      	cmp	r2, #0
 800954e:	f000 80ca 	beq.w	80096e6 <_dtoa_r+0x8be>
 8009552:	9a07      	ldr	r2, [sp, #28]
 8009554:	2a01      	cmp	r2, #1
 8009556:	f300 80ad 	bgt.w	80096b4 <_dtoa_r+0x88c>
 800955a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800955c:	2a00      	cmp	r2, #0
 800955e:	f000 80a5 	beq.w	80096ac <_dtoa_r+0x884>
 8009562:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009566:	9e08      	ldr	r6, [sp, #32]
 8009568:	9d05      	ldr	r5, [sp, #20]
 800956a:	9a05      	ldr	r2, [sp, #20]
 800956c:	441a      	add	r2, r3
 800956e:	9205      	str	r2, [sp, #20]
 8009570:	9a06      	ldr	r2, [sp, #24]
 8009572:	2101      	movs	r1, #1
 8009574:	441a      	add	r2, r3
 8009576:	4620      	mov	r0, r4
 8009578:	9206      	str	r2, [sp, #24]
 800957a:	f000 fff1 	bl	800a560 <__i2b>
 800957e:	4607      	mov	r7, r0
 8009580:	b165      	cbz	r5, 800959c <_dtoa_r+0x774>
 8009582:	9b06      	ldr	r3, [sp, #24]
 8009584:	2b00      	cmp	r3, #0
 8009586:	dd09      	ble.n	800959c <_dtoa_r+0x774>
 8009588:	42ab      	cmp	r3, r5
 800958a:	9a05      	ldr	r2, [sp, #20]
 800958c:	bfa8      	it	ge
 800958e:	462b      	movge	r3, r5
 8009590:	1ad2      	subs	r2, r2, r3
 8009592:	9205      	str	r2, [sp, #20]
 8009594:	9a06      	ldr	r2, [sp, #24]
 8009596:	1aed      	subs	r5, r5, r3
 8009598:	1ad3      	subs	r3, r2, r3
 800959a:	9306      	str	r3, [sp, #24]
 800959c:	9b08      	ldr	r3, [sp, #32]
 800959e:	b1f3      	cbz	r3, 80095de <_dtoa_r+0x7b6>
 80095a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f000 80a3 	beq.w	80096ee <_dtoa_r+0x8c6>
 80095a8:	2e00      	cmp	r6, #0
 80095aa:	dd10      	ble.n	80095ce <_dtoa_r+0x7a6>
 80095ac:	4639      	mov	r1, r7
 80095ae:	4632      	mov	r2, r6
 80095b0:	4620      	mov	r0, r4
 80095b2:	f001 f895 	bl	800a6e0 <__pow5mult>
 80095b6:	4652      	mov	r2, sl
 80095b8:	4601      	mov	r1, r0
 80095ba:	4607      	mov	r7, r0
 80095bc:	4620      	mov	r0, r4
 80095be:	f000 ffe5 	bl	800a58c <__multiply>
 80095c2:	4651      	mov	r1, sl
 80095c4:	4680      	mov	r8, r0
 80095c6:	4620      	mov	r0, r4
 80095c8:	f000 feca 	bl	800a360 <_Bfree>
 80095cc:	46c2      	mov	sl, r8
 80095ce:	9b08      	ldr	r3, [sp, #32]
 80095d0:	1b9a      	subs	r2, r3, r6
 80095d2:	d004      	beq.n	80095de <_dtoa_r+0x7b6>
 80095d4:	4651      	mov	r1, sl
 80095d6:	4620      	mov	r0, r4
 80095d8:	f001 f882 	bl	800a6e0 <__pow5mult>
 80095dc:	4682      	mov	sl, r0
 80095de:	2101      	movs	r1, #1
 80095e0:	4620      	mov	r0, r4
 80095e2:	f000 ffbd 	bl	800a560 <__i2b>
 80095e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	4606      	mov	r6, r0
 80095ec:	f340 8081 	ble.w	80096f2 <_dtoa_r+0x8ca>
 80095f0:	461a      	mov	r2, r3
 80095f2:	4601      	mov	r1, r0
 80095f4:	4620      	mov	r0, r4
 80095f6:	f001 f873 	bl	800a6e0 <__pow5mult>
 80095fa:	9b07      	ldr	r3, [sp, #28]
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	4606      	mov	r6, r0
 8009600:	dd7a      	ble.n	80096f8 <_dtoa_r+0x8d0>
 8009602:	f04f 0800 	mov.w	r8, #0
 8009606:	6933      	ldr	r3, [r6, #16]
 8009608:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800960c:	6918      	ldr	r0, [r3, #16]
 800960e:	f000 ff59 	bl	800a4c4 <__hi0bits>
 8009612:	f1c0 0020 	rsb	r0, r0, #32
 8009616:	9b06      	ldr	r3, [sp, #24]
 8009618:	4418      	add	r0, r3
 800961a:	f010 001f 	ands.w	r0, r0, #31
 800961e:	f000 8094 	beq.w	800974a <_dtoa_r+0x922>
 8009622:	f1c0 0320 	rsb	r3, r0, #32
 8009626:	2b04      	cmp	r3, #4
 8009628:	f340 8085 	ble.w	8009736 <_dtoa_r+0x90e>
 800962c:	9b05      	ldr	r3, [sp, #20]
 800962e:	f1c0 001c 	rsb	r0, r0, #28
 8009632:	4403      	add	r3, r0
 8009634:	9305      	str	r3, [sp, #20]
 8009636:	9b06      	ldr	r3, [sp, #24]
 8009638:	4403      	add	r3, r0
 800963a:	4405      	add	r5, r0
 800963c:	9306      	str	r3, [sp, #24]
 800963e:	9b05      	ldr	r3, [sp, #20]
 8009640:	2b00      	cmp	r3, #0
 8009642:	dd05      	ble.n	8009650 <_dtoa_r+0x828>
 8009644:	4651      	mov	r1, sl
 8009646:	461a      	mov	r2, r3
 8009648:	4620      	mov	r0, r4
 800964a:	f001 f8a3 	bl	800a794 <__lshift>
 800964e:	4682      	mov	sl, r0
 8009650:	9b06      	ldr	r3, [sp, #24]
 8009652:	2b00      	cmp	r3, #0
 8009654:	dd05      	ble.n	8009662 <_dtoa_r+0x83a>
 8009656:	4631      	mov	r1, r6
 8009658:	461a      	mov	r2, r3
 800965a:	4620      	mov	r0, r4
 800965c:	f001 f89a 	bl	800a794 <__lshift>
 8009660:	4606      	mov	r6, r0
 8009662:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009664:	2b00      	cmp	r3, #0
 8009666:	d072      	beq.n	800974e <_dtoa_r+0x926>
 8009668:	4631      	mov	r1, r6
 800966a:	4650      	mov	r0, sl
 800966c:	f001 f8fe 	bl	800a86c <__mcmp>
 8009670:	2800      	cmp	r0, #0
 8009672:	da6c      	bge.n	800974e <_dtoa_r+0x926>
 8009674:	2300      	movs	r3, #0
 8009676:	4651      	mov	r1, sl
 8009678:	220a      	movs	r2, #10
 800967a:	4620      	mov	r0, r4
 800967c:	f000 fe92 	bl	800a3a4 <__multadd>
 8009680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009682:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009686:	4682      	mov	sl, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	f000 81b0 	beq.w	80099ee <_dtoa_r+0xbc6>
 800968e:	2300      	movs	r3, #0
 8009690:	4639      	mov	r1, r7
 8009692:	220a      	movs	r2, #10
 8009694:	4620      	mov	r0, r4
 8009696:	f000 fe85 	bl	800a3a4 <__multadd>
 800969a:	9b01      	ldr	r3, [sp, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	4607      	mov	r7, r0
 80096a0:	f300 8096 	bgt.w	80097d0 <_dtoa_r+0x9a8>
 80096a4:	9b07      	ldr	r3, [sp, #28]
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	dc59      	bgt.n	800975e <_dtoa_r+0x936>
 80096aa:	e091      	b.n	80097d0 <_dtoa_r+0x9a8>
 80096ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80096b2:	e758      	b.n	8009566 <_dtoa_r+0x73e>
 80096b4:	9b04      	ldr	r3, [sp, #16]
 80096b6:	1e5e      	subs	r6, r3, #1
 80096b8:	9b08      	ldr	r3, [sp, #32]
 80096ba:	42b3      	cmp	r3, r6
 80096bc:	bfbf      	itttt	lt
 80096be:	9b08      	ldrlt	r3, [sp, #32]
 80096c0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80096c2:	9608      	strlt	r6, [sp, #32]
 80096c4:	1af3      	sublt	r3, r6, r3
 80096c6:	bfb4      	ite	lt
 80096c8:	18d2      	addlt	r2, r2, r3
 80096ca:	1b9e      	subge	r6, r3, r6
 80096cc:	9b04      	ldr	r3, [sp, #16]
 80096ce:	bfbc      	itt	lt
 80096d0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80096d2:	2600      	movlt	r6, #0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	bfb7      	itett	lt
 80096d8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80096dc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80096e0:	1a9d      	sublt	r5, r3, r2
 80096e2:	2300      	movlt	r3, #0
 80096e4:	e741      	b.n	800956a <_dtoa_r+0x742>
 80096e6:	9e08      	ldr	r6, [sp, #32]
 80096e8:	9d05      	ldr	r5, [sp, #20]
 80096ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80096ec:	e748      	b.n	8009580 <_dtoa_r+0x758>
 80096ee:	9a08      	ldr	r2, [sp, #32]
 80096f0:	e770      	b.n	80095d4 <_dtoa_r+0x7ac>
 80096f2:	9b07      	ldr	r3, [sp, #28]
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	dc19      	bgt.n	800972c <_dtoa_r+0x904>
 80096f8:	9b02      	ldr	r3, [sp, #8]
 80096fa:	b9bb      	cbnz	r3, 800972c <_dtoa_r+0x904>
 80096fc:	9b03      	ldr	r3, [sp, #12]
 80096fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009702:	b99b      	cbnz	r3, 800972c <_dtoa_r+0x904>
 8009704:	9b03      	ldr	r3, [sp, #12]
 8009706:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800970a:	0d1b      	lsrs	r3, r3, #20
 800970c:	051b      	lsls	r3, r3, #20
 800970e:	b183      	cbz	r3, 8009732 <_dtoa_r+0x90a>
 8009710:	9b05      	ldr	r3, [sp, #20]
 8009712:	3301      	adds	r3, #1
 8009714:	9305      	str	r3, [sp, #20]
 8009716:	9b06      	ldr	r3, [sp, #24]
 8009718:	3301      	adds	r3, #1
 800971a:	9306      	str	r3, [sp, #24]
 800971c:	f04f 0801 	mov.w	r8, #1
 8009720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009722:	2b00      	cmp	r3, #0
 8009724:	f47f af6f 	bne.w	8009606 <_dtoa_r+0x7de>
 8009728:	2001      	movs	r0, #1
 800972a:	e774      	b.n	8009616 <_dtoa_r+0x7ee>
 800972c:	f04f 0800 	mov.w	r8, #0
 8009730:	e7f6      	b.n	8009720 <_dtoa_r+0x8f8>
 8009732:	4698      	mov	r8, r3
 8009734:	e7f4      	b.n	8009720 <_dtoa_r+0x8f8>
 8009736:	d082      	beq.n	800963e <_dtoa_r+0x816>
 8009738:	9a05      	ldr	r2, [sp, #20]
 800973a:	331c      	adds	r3, #28
 800973c:	441a      	add	r2, r3
 800973e:	9205      	str	r2, [sp, #20]
 8009740:	9a06      	ldr	r2, [sp, #24]
 8009742:	441a      	add	r2, r3
 8009744:	441d      	add	r5, r3
 8009746:	9206      	str	r2, [sp, #24]
 8009748:	e779      	b.n	800963e <_dtoa_r+0x816>
 800974a:	4603      	mov	r3, r0
 800974c:	e7f4      	b.n	8009738 <_dtoa_r+0x910>
 800974e:	9b04      	ldr	r3, [sp, #16]
 8009750:	2b00      	cmp	r3, #0
 8009752:	dc37      	bgt.n	80097c4 <_dtoa_r+0x99c>
 8009754:	9b07      	ldr	r3, [sp, #28]
 8009756:	2b02      	cmp	r3, #2
 8009758:	dd34      	ble.n	80097c4 <_dtoa_r+0x99c>
 800975a:	9b04      	ldr	r3, [sp, #16]
 800975c:	9301      	str	r3, [sp, #4]
 800975e:	9b01      	ldr	r3, [sp, #4]
 8009760:	b963      	cbnz	r3, 800977c <_dtoa_r+0x954>
 8009762:	4631      	mov	r1, r6
 8009764:	2205      	movs	r2, #5
 8009766:	4620      	mov	r0, r4
 8009768:	f000 fe1c 	bl	800a3a4 <__multadd>
 800976c:	4601      	mov	r1, r0
 800976e:	4606      	mov	r6, r0
 8009770:	4650      	mov	r0, sl
 8009772:	f001 f87b 	bl	800a86c <__mcmp>
 8009776:	2800      	cmp	r0, #0
 8009778:	f73f adbb 	bgt.w	80092f2 <_dtoa_r+0x4ca>
 800977c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800977e:	9d00      	ldr	r5, [sp, #0]
 8009780:	ea6f 0b03 	mvn.w	fp, r3
 8009784:	f04f 0800 	mov.w	r8, #0
 8009788:	4631      	mov	r1, r6
 800978a:	4620      	mov	r0, r4
 800978c:	f000 fde8 	bl	800a360 <_Bfree>
 8009790:	2f00      	cmp	r7, #0
 8009792:	f43f aeab 	beq.w	80094ec <_dtoa_r+0x6c4>
 8009796:	f1b8 0f00 	cmp.w	r8, #0
 800979a:	d005      	beq.n	80097a8 <_dtoa_r+0x980>
 800979c:	45b8      	cmp	r8, r7
 800979e:	d003      	beq.n	80097a8 <_dtoa_r+0x980>
 80097a0:	4641      	mov	r1, r8
 80097a2:	4620      	mov	r0, r4
 80097a4:	f000 fddc 	bl	800a360 <_Bfree>
 80097a8:	4639      	mov	r1, r7
 80097aa:	4620      	mov	r0, r4
 80097ac:	f000 fdd8 	bl	800a360 <_Bfree>
 80097b0:	e69c      	b.n	80094ec <_dtoa_r+0x6c4>
 80097b2:	2600      	movs	r6, #0
 80097b4:	4637      	mov	r7, r6
 80097b6:	e7e1      	b.n	800977c <_dtoa_r+0x954>
 80097b8:	46bb      	mov	fp, r7
 80097ba:	4637      	mov	r7, r6
 80097bc:	e599      	b.n	80092f2 <_dtoa_r+0x4ca>
 80097be:	bf00      	nop
 80097c0:	40240000 	.word	0x40240000
 80097c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f000 80c8 	beq.w	800995c <_dtoa_r+0xb34>
 80097cc:	9b04      	ldr	r3, [sp, #16]
 80097ce:	9301      	str	r3, [sp, #4]
 80097d0:	2d00      	cmp	r5, #0
 80097d2:	dd05      	ble.n	80097e0 <_dtoa_r+0x9b8>
 80097d4:	4639      	mov	r1, r7
 80097d6:	462a      	mov	r2, r5
 80097d8:	4620      	mov	r0, r4
 80097da:	f000 ffdb 	bl	800a794 <__lshift>
 80097de:	4607      	mov	r7, r0
 80097e0:	f1b8 0f00 	cmp.w	r8, #0
 80097e4:	d05b      	beq.n	800989e <_dtoa_r+0xa76>
 80097e6:	6879      	ldr	r1, [r7, #4]
 80097e8:	4620      	mov	r0, r4
 80097ea:	f000 fd79 	bl	800a2e0 <_Balloc>
 80097ee:	4605      	mov	r5, r0
 80097f0:	b928      	cbnz	r0, 80097fe <_dtoa_r+0x9d6>
 80097f2:	4b83      	ldr	r3, [pc, #524]	; (8009a00 <_dtoa_r+0xbd8>)
 80097f4:	4602      	mov	r2, r0
 80097f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80097fa:	f7ff bb2e 	b.w	8008e5a <_dtoa_r+0x32>
 80097fe:	693a      	ldr	r2, [r7, #16]
 8009800:	3202      	adds	r2, #2
 8009802:	0092      	lsls	r2, r2, #2
 8009804:	f107 010c 	add.w	r1, r7, #12
 8009808:	300c      	adds	r0, #12
 800980a:	f7ff fa6e 	bl	8008cea <memcpy>
 800980e:	2201      	movs	r2, #1
 8009810:	4629      	mov	r1, r5
 8009812:	4620      	mov	r0, r4
 8009814:	f000 ffbe 	bl	800a794 <__lshift>
 8009818:	9b00      	ldr	r3, [sp, #0]
 800981a:	3301      	adds	r3, #1
 800981c:	9304      	str	r3, [sp, #16]
 800981e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009822:	4413      	add	r3, r2
 8009824:	9308      	str	r3, [sp, #32]
 8009826:	9b02      	ldr	r3, [sp, #8]
 8009828:	f003 0301 	and.w	r3, r3, #1
 800982c:	46b8      	mov	r8, r7
 800982e:	9306      	str	r3, [sp, #24]
 8009830:	4607      	mov	r7, r0
 8009832:	9b04      	ldr	r3, [sp, #16]
 8009834:	4631      	mov	r1, r6
 8009836:	3b01      	subs	r3, #1
 8009838:	4650      	mov	r0, sl
 800983a:	9301      	str	r3, [sp, #4]
 800983c:	f7ff fa6c 	bl	8008d18 <quorem>
 8009840:	4641      	mov	r1, r8
 8009842:	9002      	str	r0, [sp, #8]
 8009844:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009848:	4650      	mov	r0, sl
 800984a:	f001 f80f 	bl	800a86c <__mcmp>
 800984e:	463a      	mov	r2, r7
 8009850:	9005      	str	r0, [sp, #20]
 8009852:	4631      	mov	r1, r6
 8009854:	4620      	mov	r0, r4
 8009856:	f001 f825 	bl	800a8a4 <__mdiff>
 800985a:	68c2      	ldr	r2, [r0, #12]
 800985c:	4605      	mov	r5, r0
 800985e:	bb02      	cbnz	r2, 80098a2 <_dtoa_r+0xa7a>
 8009860:	4601      	mov	r1, r0
 8009862:	4650      	mov	r0, sl
 8009864:	f001 f802 	bl	800a86c <__mcmp>
 8009868:	4602      	mov	r2, r0
 800986a:	4629      	mov	r1, r5
 800986c:	4620      	mov	r0, r4
 800986e:	9209      	str	r2, [sp, #36]	; 0x24
 8009870:	f000 fd76 	bl	800a360 <_Bfree>
 8009874:	9b07      	ldr	r3, [sp, #28]
 8009876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009878:	9d04      	ldr	r5, [sp, #16]
 800987a:	ea43 0102 	orr.w	r1, r3, r2
 800987e:	9b06      	ldr	r3, [sp, #24]
 8009880:	4319      	orrs	r1, r3
 8009882:	d110      	bne.n	80098a6 <_dtoa_r+0xa7e>
 8009884:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009888:	d029      	beq.n	80098de <_dtoa_r+0xab6>
 800988a:	9b05      	ldr	r3, [sp, #20]
 800988c:	2b00      	cmp	r3, #0
 800988e:	dd02      	ble.n	8009896 <_dtoa_r+0xa6e>
 8009890:	9b02      	ldr	r3, [sp, #8]
 8009892:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009896:	9b01      	ldr	r3, [sp, #4]
 8009898:	f883 9000 	strb.w	r9, [r3]
 800989c:	e774      	b.n	8009788 <_dtoa_r+0x960>
 800989e:	4638      	mov	r0, r7
 80098a0:	e7ba      	b.n	8009818 <_dtoa_r+0x9f0>
 80098a2:	2201      	movs	r2, #1
 80098a4:	e7e1      	b.n	800986a <_dtoa_r+0xa42>
 80098a6:	9b05      	ldr	r3, [sp, #20]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	db04      	blt.n	80098b6 <_dtoa_r+0xa8e>
 80098ac:	9907      	ldr	r1, [sp, #28]
 80098ae:	430b      	orrs	r3, r1
 80098b0:	9906      	ldr	r1, [sp, #24]
 80098b2:	430b      	orrs	r3, r1
 80098b4:	d120      	bne.n	80098f8 <_dtoa_r+0xad0>
 80098b6:	2a00      	cmp	r2, #0
 80098b8:	dded      	ble.n	8009896 <_dtoa_r+0xa6e>
 80098ba:	4651      	mov	r1, sl
 80098bc:	2201      	movs	r2, #1
 80098be:	4620      	mov	r0, r4
 80098c0:	f000 ff68 	bl	800a794 <__lshift>
 80098c4:	4631      	mov	r1, r6
 80098c6:	4682      	mov	sl, r0
 80098c8:	f000 ffd0 	bl	800a86c <__mcmp>
 80098cc:	2800      	cmp	r0, #0
 80098ce:	dc03      	bgt.n	80098d8 <_dtoa_r+0xab0>
 80098d0:	d1e1      	bne.n	8009896 <_dtoa_r+0xa6e>
 80098d2:	f019 0f01 	tst.w	r9, #1
 80098d6:	d0de      	beq.n	8009896 <_dtoa_r+0xa6e>
 80098d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80098dc:	d1d8      	bne.n	8009890 <_dtoa_r+0xa68>
 80098de:	9a01      	ldr	r2, [sp, #4]
 80098e0:	2339      	movs	r3, #57	; 0x39
 80098e2:	7013      	strb	r3, [r2, #0]
 80098e4:	462b      	mov	r3, r5
 80098e6:	461d      	mov	r5, r3
 80098e8:	3b01      	subs	r3, #1
 80098ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80098ee:	2a39      	cmp	r2, #57	; 0x39
 80098f0:	d06c      	beq.n	80099cc <_dtoa_r+0xba4>
 80098f2:	3201      	adds	r2, #1
 80098f4:	701a      	strb	r2, [r3, #0]
 80098f6:	e747      	b.n	8009788 <_dtoa_r+0x960>
 80098f8:	2a00      	cmp	r2, #0
 80098fa:	dd07      	ble.n	800990c <_dtoa_r+0xae4>
 80098fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009900:	d0ed      	beq.n	80098de <_dtoa_r+0xab6>
 8009902:	9a01      	ldr	r2, [sp, #4]
 8009904:	f109 0301 	add.w	r3, r9, #1
 8009908:	7013      	strb	r3, [r2, #0]
 800990a:	e73d      	b.n	8009788 <_dtoa_r+0x960>
 800990c:	9b04      	ldr	r3, [sp, #16]
 800990e:	9a08      	ldr	r2, [sp, #32]
 8009910:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009914:	4293      	cmp	r3, r2
 8009916:	d043      	beq.n	80099a0 <_dtoa_r+0xb78>
 8009918:	4651      	mov	r1, sl
 800991a:	2300      	movs	r3, #0
 800991c:	220a      	movs	r2, #10
 800991e:	4620      	mov	r0, r4
 8009920:	f000 fd40 	bl	800a3a4 <__multadd>
 8009924:	45b8      	cmp	r8, r7
 8009926:	4682      	mov	sl, r0
 8009928:	f04f 0300 	mov.w	r3, #0
 800992c:	f04f 020a 	mov.w	r2, #10
 8009930:	4641      	mov	r1, r8
 8009932:	4620      	mov	r0, r4
 8009934:	d107      	bne.n	8009946 <_dtoa_r+0xb1e>
 8009936:	f000 fd35 	bl	800a3a4 <__multadd>
 800993a:	4680      	mov	r8, r0
 800993c:	4607      	mov	r7, r0
 800993e:	9b04      	ldr	r3, [sp, #16]
 8009940:	3301      	adds	r3, #1
 8009942:	9304      	str	r3, [sp, #16]
 8009944:	e775      	b.n	8009832 <_dtoa_r+0xa0a>
 8009946:	f000 fd2d 	bl	800a3a4 <__multadd>
 800994a:	4639      	mov	r1, r7
 800994c:	4680      	mov	r8, r0
 800994e:	2300      	movs	r3, #0
 8009950:	220a      	movs	r2, #10
 8009952:	4620      	mov	r0, r4
 8009954:	f000 fd26 	bl	800a3a4 <__multadd>
 8009958:	4607      	mov	r7, r0
 800995a:	e7f0      	b.n	800993e <_dtoa_r+0xb16>
 800995c:	9b04      	ldr	r3, [sp, #16]
 800995e:	9301      	str	r3, [sp, #4]
 8009960:	9d00      	ldr	r5, [sp, #0]
 8009962:	4631      	mov	r1, r6
 8009964:	4650      	mov	r0, sl
 8009966:	f7ff f9d7 	bl	8008d18 <quorem>
 800996a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800996e:	9b00      	ldr	r3, [sp, #0]
 8009970:	f805 9b01 	strb.w	r9, [r5], #1
 8009974:	1aea      	subs	r2, r5, r3
 8009976:	9b01      	ldr	r3, [sp, #4]
 8009978:	4293      	cmp	r3, r2
 800997a:	dd07      	ble.n	800998c <_dtoa_r+0xb64>
 800997c:	4651      	mov	r1, sl
 800997e:	2300      	movs	r3, #0
 8009980:	220a      	movs	r2, #10
 8009982:	4620      	mov	r0, r4
 8009984:	f000 fd0e 	bl	800a3a4 <__multadd>
 8009988:	4682      	mov	sl, r0
 800998a:	e7ea      	b.n	8009962 <_dtoa_r+0xb3a>
 800998c:	9b01      	ldr	r3, [sp, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	bfc8      	it	gt
 8009992:	461d      	movgt	r5, r3
 8009994:	9b00      	ldr	r3, [sp, #0]
 8009996:	bfd8      	it	le
 8009998:	2501      	movle	r5, #1
 800999a:	441d      	add	r5, r3
 800999c:	f04f 0800 	mov.w	r8, #0
 80099a0:	4651      	mov	r1, sl
 80099a2:	2201      	movs	r2, #1
 80099a4:	4620      	mov	r0, r4
 80099a6:	f000 fef5 	bl	800a794 <__lshift>
 80099aa:	4631      	mov	r1, r6
 80099ac:	4682      	mov	sl, r0
 80099ae:	f000 ff5d 	bl	800a86c <__mcmp>
 80099b2:	2800      	cmp	r0, #0
 80099b4:	dc96      	bgt.n	80098e4 <_dtoa_r+0xabc>
 80099b6:	d102      	bne.n	80099be <_dtoa_r+0xb96>
 80099b8:	f019 0f01 	tst.w	r9, #1
 80099bc:	d192      	bne.n	80098e4 <_dtoa_r+0xabc>
 80099be:	462b      	mov	r3, r5
 80099c0:	461d      	mov	r5, r3
 80099c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099c6:	2a30      	cmp	r2, #48	; 0x30
 80099c8:	d0fa      	beq.n	80099c0 <_dtoa_r+0xb98>
 80099ca:	e6dd      	b.n	8009788 <_dtoa_r+0x960>
 80099cc:	9a00      	ldr	r2, [sp, #0]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d189      	bne.n	80098e6 <_dtoa_r+0xabe>
 80099d2:	f10b 0b01 	add.w	fp, fp, #1
 80099d6:	2331      	movs	r3, #49	; 0x31
 80099d8:	e796      	b.n	8009908 <_dtoa_r+0xae0>
 80099da:	4b0a      	ldr	r3, [pc, #40]	; (8009a04 <_dtoa_r+0xbdc>)
 80099dc:	f7ff ba99 	b.w	8008f12 <_dtoa_r+0xea>
 80099e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	f47f aa6d 	bne.w	8008ec2 <_dtoa_r+0x9a>
 80099e8:	4b07      	ldr	r3, [pc, #28]	; (8009a08 <_dtoa_r+0xbe0>)
 80099ea:	f7ff ba92 	b.w	8008f12 <_dtoa_r+0xea>
 80099ee:	9b01      	ldr	r3, [sp, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	dcb5      	bgt.n	8009960 <_dtoa_r+0xb38>
 80099f4:	9b07      	ldr	r3, [sp, #28]
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	f73f aeb1 	bgt.w	800975e <_dtoa_r+0x936>
 80099fc:	e7b0      	b.n	8009960 <_dtoa_r+0xb38>
 80099fe:	bf00      	nop
 8009a00:	0800d39e 	.word	0x0800d39e
 8009a04:	0800d68c 	.word	0x0800d68c
 8009a08:	0800d322 	.word	0x0800d322

08009a0c <_free_r>:
 8009a0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a0e:	2900      	cmp	r1, #0
 8009a10:	d044      	beq.n	8009a9c <_free_r+0x90>
 8009a12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a16:	9001      	str	r0, [sp, #4]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f1a1 0404 	sub.w	r4, r1, #4
 8009a1e:	bfb8      	it	lt
 8009a20:	18e4      	addlt	r4, r4, r3
 8009a22:	f000 fc51 	bl	800a2c8 <__malloc_lock>
 8009a26:	4a1e      	ldr	r2, [pc, #120]	; (8009aa0 <_free_r+0x94>)
 8009a28:	9801      	ldr	r0, [sp, #4]
 8009a2a:	6813      	ldr	r3, [r2, #0]
 8009a2c:	b933      	cbnz	r3, 8009a3c <_free_r+0x30>
 8009a2e:	6063      	str	r3, [r4, #4]
 8009a30:	6014      	str	r4, [r2, #0]
 8009a32:	b003      	add	sp, #12
 8009a34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a38:	f000 bc4c 	b.w	800a2d4 <__malloc_unlock>
 8009a3c:	42a3      	cmp	r3, r4
 8009a3e:	d908      	bls.n	8009a52 <_free_r+0x46>
 8009a40:	6825      	ldr	r5, [r4, #0]
 8009a42:	1961      	adds	r1, r4, r5
 8009a44:	428b      	cmp	r3, r1
 8009a46:	bf01      	itttt	eq
 8009a48:	6819      	ldreq	r1, [r3, #0]
 8009a4a:	685b      	ldreq	r3, [r3, #4]
 8009a4c:	1949      	addeq	r1, r1, r5
 8009a4e:	6021      	streq	r1, [r4, #0]
 8009a50:	e7ed      	b.n	8009a2e <_free_r+0x22>
 8009a52:	461a      	mov	r2, r3
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	b10b      	cbz	r3, 8009a5c <_free_r+0x50>
 8009a58:	42a3      	cmp	r3, r4
 8009a5a:	d9fa      	bls.n	8009a52 <_free_r+0x46>
 8009a5c:	6811      	ldr	r1, [r2, #0]
 8009a5e:	1855      	adds	r5, r2, r1
 8009a60:	42a5      	cmp	r5, r4
 8009a62:	d10b      	bne.n	8009a7c <_free_r+0x70>
 8009a64:	6824      	ldr	r4, [r4, #0]
 8009a66:	4421      	add	r1, r4
 8009a68:	1854      	adds	r4, r2, r1
 8009a6a:	42a3      	cmp	r3, r4
 8009a6c:	6011      	str	r1, [r2, #0]
 8009a6e:	d1e0      	bne.n	8009a32 <_free_r+0x26>
 8009a70:	681c      	ldr	r4, [r3, #0]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	6053      	str	r3, [r2, #4]
 8009a76:	440c      	add	r4, r1
 8009a78:	6014      	str	r4, [r2, #0]
 8009a7a:	e7da      	b.n	8009a32 <_free_r+0x26>
 8009a7c:	d902      	bls.n	8009a84 <_free_r+0x78>
 8009a7e:	230c      	movs	r3, #12
 8009a80:	6003      	str	r3, [r0, #0]
 8009a82:	e7d6      	b.n	8009a32 <_free_r+0x26>
 8009a84:	6825      	ldr	r5, [r4, #0]
 8009a86:	1961      	adds	r1, r4, r5
 8009a88:	428b      	cmp	r3, r1
 8009a8a:	bf04      	itt	eq
 8009a8c:	6819      	ldreq	r1, [r3, #0]
 8009a8e:	685b      	ldreq	r3, [r3, #4]
 8009a90:	6063      	str	r3, [r4, #4]
 8009a92:	bf04      	itt	eq
 8009a94:	1949      	addeq	r1, r1, r5
 8009a96:	6021      	streq	r1, [r4, #0]
 8009a98:	6054      	str	r4, [r2, #4]
 8009a9a:	e7ca      	b.n	8009a32 <_free_r+0x26>
 8009a9c:	b003      	add	sp, #12
 8009a9e:	bd30      	pop	{r4, r5, pc}
 8009aa0:	20002c5c 	.word	0x20002c5c

08009aa4 <rshift>:
 8009aa4:	6903      	ldr	r3, [r0, #16]
 8009aa6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009aaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009aae:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009ab2:	f100 0414 	add.w	r4, r0, #20
 8009ab6:	dd45      	ble.n	8009b44 <rshift+0xa0>
 8009ab8:	f011 011f 	ands.w	r1, r1, #31
 8009abc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ac0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009ac4:	d10c      	bne.n	8009ae0 <rshift+0x3c>
 8009ac6:	f100 0710 	add.w	r7, r0, #16
 8009aca:	4629      	mov	r1, r5
 8009acc:	42b1      	cmp	r1, r6
 8009ace:	d334      	bcc.n	8009b3a <rshift+0x96>
 8009ad0:	1a9b      	subs	r3, r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	1eea      	subs	r2, r5, #3
 8009ad6:	4296      	cmp	r6, r2
 8009ad8:	bf38      	it	cc
 8009ada:	2300      	movcc	r3, #0
 8009adc:	4423      	add	r3, r4
 8009ade:	e015      	b.n	8009b0c <rshift+0x68>
 8009ae0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009ae4:	f1c1 0820 	rsb	r8, r1, #32
 8009ae8:	40cf      	lsrs	r7, r1
 8009aea:	f105 0e04 	add.w	lr, r5, #4
 8009aee:	46a1      	mov	r9, r4
 8009af0:	4576      	cmp	r6, lr
 8009af2:	46f4      	mov	ip, lr
 8009af4:	d815      	bhi.n	8009b22 <rshift+0x7e>
 8009af6:	1a9a      	subs	r2, r3, r2
 8009af8:	0092      	lsls	r2, r2, #2
 8009afa:	3a04      	subs	r2, #4
 8009afc:	3501      	adds	r5, #1
 8009afe:	42ae      	cmp	r6, r5
 8009b00:	bf38      	it	cc
 8009b02:	2200      	movcc	r2, #0
 8009b04:	18a3      	adds	r3, r4, r2
 8009b06:	50a7      	str	r7, [r4, r2]
 8009b08:	b107      	cbz	r7, 8009b0c <rshift+0x68>
 8009b0a:	3304      	adds	r3, #4
 8009b0c:	1b1a      	subs	r2, r3, r4
 8009b0e:	42a3      	cmp	r3, r4
 8009b10:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009b14:	bf08      	it	eq
 8009b16:	2300      	moveq	r3, #0
 8009b18:	6102      	str	r2, [r0, #16]
 8009b1a:	bf08      	it	eq
 8009b1c:	6143      	streq	r3, [r0, #20]
 8009b1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b22:	f8dc c000 	ldr.w	ip, [ip]
 8009b26:	fa0c fc08 	lsl.w	ip, ip, r8
 8009b2a:	ea4c 0707 	orr.w	r7, ip, r7
 8009b2e:	f849 7b04 	str.w	r7, [r9], #4
 8009b32:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b36:	40cf      	lsrs	r7, r1
 8009b38:	e7da      	b.n	8009af0 <rshift+0x4c>
 8009b3a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009b3e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009b42:	e7c3      	b.n	8009acc <rshift+0x28>
 8009b44:	4623      	mov	r3, r4
 8009b46:	e7e1      	b.n	8009b0c <rshift+0x68>

08009b48 <__hexdig_fun>:
 8009b48:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009b4c:	2b09      	cmp	r3, #9
 8009b4e:	d802      	bhi.n	8009b56 <__hexdig_fun+0xe>
 8009b50:	3820      	subs	r0, #32
 8009b52:	b2c0      	uxtb	r0, r0
 8009b54:	4770      	bx	lr
 8009b56:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009b5a:	2b05      	cmp	r3, #5
 8009b5c:	d801      	bhi.n	8009b62 <__hexdig_fun+0x1a>
 8009b5e:	3847      	subs	r0, #71	; 0x47
 8009b60:	e7f7      	b.n	8009b52 <__hexdig_fun+0xa>
 8009b62:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009b66:	2b05      	cmp	r3, #5
 8009b68:	d801      	bhi.n	8009b6e <__hexdig_fun+0x26>
 8009b6a:	3827      	subs	r0, #39	; 0x27
 8009b6c:	e7f1      	b.n	8009b52 <__hexdig_fun+0xa>
 8009b6e:	2000      	movs	r0, #0
 8009b70:	4770      	bx	lr
	...

08009b74 <__gethex>:
 8009b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b78:	4617      	mov	r7, r2
 8009b7a:	680a      	ldr	r2, [r1, #0]
 8009b7c:	b085      	sub	sp, #20
 8009b7e:	f102 0b02 	add.w	fp, r2, #2
 8009b82:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009b86:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009b8a:	4681      	mov	r9, r0
 8009b8c:	468a      	mov	sl, r1
 8009b8e:	9302      	str	r3, [sp, #8]
 8009b90:	32fe      	adds	r2, #254	; 0xfe
 8009b92:	eb02 030b 	add.w	r3, r2, fp
 8009b96:	46d8      	mov	r8, fp
 8009b98:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009b9c:	9301      	str	r3, [sp, #4]
 8009b9e:	2830      	cmp	r0, #48	; 0x30
 8009ba0:	d0f7      	beq.n	8009b92 <__gethex+0x1e>
 8009ba2:	f7ff ffd1 	bl	8009b48 <__hexdig_fun>
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	d138      	bne.n	8009c1e <__gethex+0xaa>
 8009bac:	49a7      	ldr	r1, [pc, #668]	; (8009e4c <__gethex+0x2d8>)
 8009bae:	2201      	movs	r2, #1
 8009bb0:	4640      	mov	r0, r8
 8009bb2:	f7ff f811 	bl	8008bd8 <strncmp>
 8009bb6:	4606      	mov	r6, r0
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d169      	bne.n	8009c90 <__gethex+0x11c>
 8009bbc:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009bc0:	465d      	mov	r5, fp
 8009bc2:	f7ff ffc1 	bl	8009b48 <__hexdig_fun>
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d064      	beq.n	8009c94 <__gethex+0x120>
 8009bca:	465a      	mov	r2, fp
 8009bcc:	7810      	ldrb	r0, [r2, #0]
 8009bce:	2830      	cmp	r0, #48	; 0x30
 8009bd0:	4690      	mov	r8, r2
 8009bd2:	f102 0201 	add.w	r2, r2, #1
 8009bd6:	d0f9      	beq.n	8009bcc <__gethex+0x58>
 8009bd8:	f7ff ffb6 	bl	8009b48 <__hexdig_fun>
 8009bdc:	2301      	movs	r3, #1
 8009bde:	fab0 f480 	clz	r4, r0
 8009be2:	0964      	lsrs	r4, r4, #5
 8009be4:	465e      	mov	r6, fp
 8009be6:	9301      	str	r3, [sp, #4]
 8009be8:	4642      	mov	r2, r8
 8009bea:	4615      	mov	r5, r2
 8009bec:	3201      	adds	r2, #1
 8009bee:	7828      	ldrb	r0, [r5, #0]
 8009bf0:	f7ff ffaa 	bl	8009b48 <__hexdig_fun>
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	d1f8      	bne.n	8009bea <__gethex+0x76>
 8009bf8:	4994      	ldr	r1, [pc, #592]	; (8009e4c <__gethex+0x2d8>)
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	4628      	mov	r0, r5
 8009bfe:	f7fe ffeb 	bl	8008bd8 <strncmp>
 8009c02:	b978      	cbnz	r0, 8009c24 <__gethex+0xb0>
 8009c04:	b946      	cbnz	r6, 8009c18 <__gethex+0xa4>
 8009c06:	1c6e      	adds	r6, r5, #1
 8009c08:	4632      	mov	r2, r6
 8009c0a:	4615      	mov	r5, r2
 8009c0c:	3201      	adds	r2, #1
 8009c0e:	7828      	ldrb	r0, [r5, #0]
 8009c10:	f7ff ff9a 	bl	8009b48 <__hexdig_fun>
 8009c14:	2800      	cmp	r0, #0
 8009c16:	d1f8      	bne.n	8009c0a <__gethex+0x96>
 8009c18:	1b73      	subs	r3, r6, r5
 8009c1a:	009e      	lsls	r6, r3, #2
 8009c1c:	e004      	b.n	8009c28 <__gethex+0xb4>
 8009c1e:	2400      	movs	r4, #0
 8009c20:	4626      	mov	r6, r4
 8009c22:	e7e1      	b.n	8009be8 <__gethex+0x74>
 8009c24:	2e00      	cmp	r6, #0
 8009c26:	d1f7      	bne.n	8009c18 <__gethex+0xa4>
 8009c28:	782b      	ldrb	r3, [r5, #0]
 8009c2a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009c2e:	2b50      	cmp	r3, #80	; 0x50
 8009c30:	d13d      	bne.n	8009cae <__gethex+0x13a>
 8009c32:	786b      	ldrb	r3, [r5, #1]
 8009c34:	2b2b      	cmp	r3, #43	; 0x2b
 8009c36:	d02f      	beq.n	8009c98 <__gethex+0x124>
 8009c38:	2b2d      	cmp	r3, #45	; 0x2d
 8009c3a:	d031      	beq.n	8009ca0 <__gethex+0x12c>
 8009c3c:	1c69      	adds	r1, r5, #1
 8009c3e:	f04f 0b00 	mov.w	fp, #0
 8009c42:	7808      	ldrb	r0, [r1, #0]
 8009c44:	f7ff ff80 	bl	8009b48 <__hexdig_fun>
 8009c48:	1e42      	subs	r2, r0, #1
 8009c4a:	b2d2      	uxtb	r2, r2
 8009c4c:	2a18      	cmp	r2, #24
 8009c4e:	d82e      	bhi.n	8009cae <__gethex+0x13a>
 8009c50:	f1a0 0210 	sub.w	r2, r0, #16
 8009c54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c58:	f7ff ff76 	bl	8009b48 <__hexdig_fun>
 8009c5c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009c60:	fa5f fc8c 	uxtb.w	ip, ip
 8009c64:	f1bc 0f18 	cmp.w	ip, #24
 8009c68:	d91d      	bls.n	8009ca6 <__gethex+0x132>
 8009c6a:	f1bb 0f00 	cmp.w	fp, #0
 8009c6e:	d000      	beq.n	8009c72 <__gethex+0xfe>
 8009c70:	4252      	negs	r2, r2
 8009c72:	4416      	add	r6, r2
 8009c74:	f8ca 1000 	str.w	r1, [sl]
 8009c78:	b1dc      	cbz	r4, 8009cb2 <__gethex+0x13e>
 8009c7a:	9b01      	ldr	r3, [sp, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	bf14      	ite	ne
 8009c80:	f04f 0800 	movne.w	r8, #0
 8009c84:	f04f 0806 	moveq.w	r8, #6
 8009c88:	4640      	mov	r0, r8
 8009c8a:	b005      	add	sp, #20
 8009c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c90:	4645      	mov	r5, r8
 8009c92:	4626      	mov	r6, r4
 8009c94:	2401      	movs	r4, #1
 8009c96:	e7c7      	b.n	8009c28 <__gethex+0xb4>
 8009c98:	f04f 0b00 	mov.w	fp, #0
 8009c9c:	1ca9      	adds	r1, r5, #2
 8009c9e:	e7d0      	b.n	8009c42 <__gethex+0xce>
 8009ca0:	f04f 0b01 	mov.w	fp, #1
 8009ca4:	e7fa      	b.n	8009c9c <__gethex+0x128>
 8009ca6:	230a      	movs	r3, #10
 8009ca8:	fb03 0002 	mla	r0, r3, r2, r0
 8009cac:	e7d0      	b.n	8009c50 <__gethex+0xdc>
 8009cae:	4629      	mov	r1, r5
 8009cb0:	e7e0      	b.n	8009c74 <__gethex+0x100>
 8009cb2:	eba5 0308 	sub.w	r3, r5, r8
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	4621      	mov	r1, r4
 8009cba:	2b07      	cmp	r3, #7
 8009cbc:	dc0a      	bgt.n	8009cd4 <__gethex+0x160>
 8009cbe:	4648      	mov	r0, r9
 8009cc0:	f000 fb0e 	bl	800a2e0 <_Balloc>
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	b940      	cbnz	r0, 8009cda <__gethex+0x166>
 8009cc8:	4b61      	ldr	r3, [pc, #388]	; (8009e50 <__gethex+0x2dc>)
 8009cca:	4602      	mov	r2, r0
 8009ccc:	21e4      	movs	r1, #228	; 0xe4
 8009cce:	4861      	ldr	r0, [pc, #388]	; (8009e54 <__gethex+0x2e0>)
 8009cd0:	f001 fe4e 	bl	800b970 <__assert_func>
 8009cd4:	3101      	adds	r1, #1
 8009cd6:	105b      	asrs	r3, r3, #1
 8009cd8:	e7ef      	b.n	8009cba <__gethex+0x146>
 8009cda:	f100 0a14 	add.w	sl, r0, #20
 8009cde:	2300      	movs	r3, #0
 8009ce0:	495a      	ldr	r1, [pc, #360]	; (8009e4c <__gethex+0x2d8>)
 8009ce2:	f8cd a004 	str.w	sl, [sp, #4]
 8009ce6:	469b      	mov	fp, r3
 8009ce8:	45a8      	cmp	r8, r5
 8009cea:	d342      	bcc.n	8009d72 <__gethex+0x1fe>
 8009cec:	9801      	ldr	r0, [sp, #4]
 8009cee:	f840 bb04 	str.w	fp, [r0], #4
 8009cf2:	eba0 000a 	sub.w	r0, r0, sl
 8009cf6:	1080      	asrs	r0, r0, #2
 8009cf8:	6120      	str	r0, [r4, #16]
 8009cfa:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8009cfe:	4658      	mov	r0, fp
 8009d00:	f000 fbe0 	bl	800a4c4 <__hi0bits>
 8009d04:	683d      	ldr	r5, [r7, #0]
 8009d06:	eba8 0000 	sub.w	r0, r8, r0
 8009d0a:	42a8      	cmp	r0, r5
 8009d0c:	dd59      	ble.n	8009dc2 <__gethex+0x24e>
 8009d0e:	eba0 0805 	sub.w	r8, r0, r5
 8009d12:	4641      	mov	r1, r8
 8009d14:	4620      	mov	r0, r4
 8009d16:	f000 ff6f 	bl	800abf8 <__any_on>
 8009d1a:	4683      	mov	fp, r0
 8009d1c:	b1b8      	cbz	r0, 8009d4e <__gethex+0x1da>
 8009d1e:	f108 33ff 	add.w	r3, r8, #4294967295
 8009d22:	1159      	asrs	r1, r3, #5
 8009d24:	f003 021f 	and.w	r2, r3, #31
 8009d28:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009d2c:	f04f 0b01 	mov.w	fp, #1
 8009d30:	fa0b f202 	lsl.w	r2, fp, r2
 8009d34:	420a      	tst	r2, r1
 8009d36:	d00a      	beq.n	8009d4e <__gethex+0x1da>
 8009d38:	455b      	cmp	r3, fp
 8009d3a:	dd06      	ble.n	8009d4a <__gethex+0x1d6>
 8009d3c:	f1a8 0102 	sub.w	r1, r8, #2
 8009d40:	4620      	mov	r0, r4
 8009d42:	f000 ff59 	bl	800abf8 <__any_on>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	d138      	bne.n	8009dbc <__gethex+0x248>
 8009d4a:	f04f 0b02 	mov.w	fp, #2
 8009d4e:	4641      	mov	r1, r8
 8009d50:	4620      	mov	r0, r4
 8009d52:	f7ff fea7 	bl	8009aa4 <rshift>
 8009d56:	4446      	add	r6, r8
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	42b3      	cmp	r3, r6
 8009d5c:	da41      	bge.n	8009de2 <__gethex+0x26e>
 8009d5e:	4621      	mov	r1, r4
 8009d60:	4648      	mov	r0, r9
 8009d62:	f000 fafd 	bl	800a360 <_Bfree>
 8009d66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d68:	2300      	movs	r3, #0
 8009d6a:	6013      	str	r3, [r2, #0]
 8009d6c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009d70:	e78a      	b.n	8009c88 <__gethex+0x114>
 8009d72:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009d76:	2a2e      	cmp	r2, #46	; 0x2e
 8009d78:	d014      	beq.n	8009da4 <__gethex+0x230>
 8009d7a:	2b20      	cmp	r3, #32
 8009d7c:	d106      	bne.n	8009d8c <__gethex+0x218>
 8009d7e:	9b01      	ldr	r3, [sp, #4]
 8009d80:	f843 bb04 	str.w	fp, [r3], #4
 8009d84:	f04f 0b00 	mov.w	fp, #0
 8009d88:	9301      	str	r3, [sp, #4]
 8009d8a:	465b      	mov	r3, fp
 8009d8c:	7828      	ldrb	r0, [r5, #0]
 8009d8e:	9303      	str	r3, [sp, #12]
 8009d90:	f7ff feda 	bl	8009b48 <__hexdig_fun>
 8009d94:	9b03      	ldr	r3, [sp, #12]
 8009d96:	f000 000f 	and.w	r0, r0, #15
 8009d9a:	4098      	lsls	r0, r3
 8009d9c:	ea4b 0b00 	orr.w	fp, fp, r0
 8009da0:	3304      	adds	r3, #4
 8009da2:	e7a1      	b.n	8009ce8 <__gethex+0x174>
 8009da4:	45a8      	cmp	r8, r5
 8009da6:	d8e8      	bhi.n	8009d7a <__gethex+0x206>
 8009da8:	2201      	movs	r2, #1
 8009daa:	4628      	mov	r0, r5
 8009dac:	9303      	str	r3, [sp, #12]
 8009dae:	f7fe ff13 	bl	8008bd8 <strncmp>
 8009db2:	4926      	ldr	r1, [pc, #152]	; (8009e4c <__gethex+0x2d8>)
 8009db4:	9b03      	ldr	r3, [sp, #12]
 8009db6:	2800      	cmp	r0, #0
 8009db8:	d1df      	bne.n	8009d7a <__gethex+0x206>
 8009dba:	e795      	b.n	8009ce8 <__gethex+0x174>
 8009dbc:	f04f 0b03 	mov.w	fp, #3
 8009dc0:	e7c5      	b.n	8009d4e <__gethex+0x1da>
 8009dc2:	da0b      	bge.n	8009ddc <__gethex+0x268>
 8009dc4:	eba5 0800 	sub.w	r8, r5, r0
 8009dc8:	4621      	mov	r1, r4
 8009dca:	4642      	mov	r2, r8
 8009dcc:	4648      	mov	r0, r9
 8009dce:	f000 fce1 	bl	800a794 <__lshift>
 8009dd2:	eba6 0608 	sub.w	r6, r6, r8
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	f100 0a14 	add.w	sl, r0, #20
 8009ddc:	f04f 0b00 	mov.w	fp, #0
 8009de0:	e7ba      	b.n	8009d58 <__gethex+0x1e4>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	42b3      	cmp	r3, r6
 8009de6:	dd73      	ble.n	8009ed0 <__gethex+0x35c>
 8009de8:	1b9e      	subs	r6, r3, r6
 8009dea:	42b5      	cmp	r5, r6
 8009dec:	dc34      	bgt.n	8009e58 <__gethex+0x2e4>
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	d023      	beq.n	8009e3c <__gethex+0x2c8>
 8009df4:	2b03      	cmp	r3, #3
 8009df6:	d025      	beq.n	8009e44 <__gethex+0x2d0>
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d115      	bne.n	8009e28 <__gethex+0x2b4>
 8009dfc:	42b5      	cmp	r5, r6
 8009dfe:	d113      	bne.n	8009e28 <__gethex+0x2b4>
 8009e00:	2d01      	cmp	r5, #1
 8009e02:	d10b      	bne.n	8009e1c <__gethex+0x2a8>
 8009e04:	9a02      	ldr	r2, [sp, #8]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6013      	str	r3, [r2, #0]
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	6123      	str	r3, [r4, #16]
 8009e0e:	f8ca 3000 	str.w	r3, [sl]
 8009e12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e14:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009e18:	601c      	str	r4, [r3, #0]
 8009e1a:	e735      	b.n	8009c88 <__gethex+0x114>
 8009e1c:	1e69      	subs	r1, r5, #1
 8009e1e:	4620      	mov	r0, r4
 8009e20:	f000 feea 	bl	800abf8 <__any_on>
 8009e24:	2800      	cmp	r0, #0
 8009e26:	d1ed      	bne.n	8009e04 <__gethex+0x290>
 8009e28:	4621      	mov	r1, r4
 8009e2a:	4648      	mov	r0, r9
 8009e2c:	f000 fa98 	bl	800a360 <_Bfree>
 8009e30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e32:	2300      	movs	r3, #0
 8009e34:	6013      	str	r3, [r2, #0]
 8009e36:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009e3a:	e725      	b.n	8009c88 <__gethex+0x114>
 8009e3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d1f2      	bne.n	8009e28 <__gethex+0x2b4>
 8009e42:	e7df      	b.n	8009e04 <__gethex+0x290>
 8009e44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1dc      	bne.n	8009e04 <__gethex+0x290>
 8009e4a:	e7ed      	b.n	8009e28 <__gethex+0x2b4>
 8009e4c:	0800d290 	.word	0x0800d290
 8009e50:	0800d39e 	.word	0x0800d39e
 8009e54:	0800d3af 	.word	0x0800d3af
 8009e58:	f106 38ff 	add.w	r8, r6, #4294967295
 8009e5c:	f1bb 0f00 	cmp.w	fp, #0
 8009e60:	d133      	bne.n	8009eca <__gethex+0x356>
 8009e62:	f1b8 0f00 	cmp.w	r8, #0
 8009e66:	d004      	beq.n	8009e72 <__gethex+0x2fe>
 8009e68:	4641      	mov	r1, r8
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f000 fec4 	bl	800abf8 <__any_on>
 8009e70:	4683      	mov	fp, r0
 8009e72:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009e76:	2301      	movs	r3, #1
 8009e78:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009e7c:	f008 081f 	and.w	r8, r8, #31
 8009e80:	fa03 f308 	lsl.w	r3, r3, r8
 8009e84:	4213      	tst	r3, r2
 8009e86:	4631      	mov	r1, r6
 8009e88:	4620      	mov	r0, r4
 8009e8a:	bf18      	it	ne
 8009e8c:	f04b 0b02 	orrne.w	fp, fp, #2
 8009e90:	1bad      	subs	r5, r5, r6
 8009e92:	f7ff fe07 	bl	8009aa4 <rshift>
 8009e96:	687e      	ldr	r6, [r7, #4]
 8009e98:	f04f 0802 	mov.w	r8, #2
 8009e9c:	f1bb 0f00 	cmp.w	fp, #0
 8009ea0:	d04a      	beq.n	8009f38 <__gethex+0x3c4>
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d016      	beq.n	8009ed6 <__gethex+0x362>
 8009ea8:	2b03      	cmp	r3, #3
 8009eaa:	d018      	beq.n	8009ede <__gethex+0x36a>
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d109      	bne.n	8009ec4 <__gethex+0x350>
 8009eb0:	f01b 0f02 	tst.w	fp, #2
 8009eb4:	d006      	beq.n	8009ec4 <__gethex+0x350>
 8009eb6:	f8da 3000 	ldr.w	r3, [sl]
 8009eba:	ea4b 0b03 	orr.w	fp, fp, r3
 8009ebe:	f01b 0f01 	tst.w	fp, #1
 8009ec2:	d10f      	bne.n	8009ee4 <__gethex+0x370>
 8009ec4:	f048 0810 	orr.w	r8, r8, #16
 8009ec8:	e036      	b.n	8009f38 <__gethex+0x3c4>
 8009eca:	f04f 0b01 	mov.w	fp, #1
 8009ece:	e7d0      	b.n	8009e72 <__gethex+0x2fe>
 8009ed0:	f04f 0801 	mov.w	r8, #1
 8009ed4:	e7e2      	b.n	8009e9c <__gethex+0x328>
 8009ed6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ed8:	f1c3 0301 	rsb	r3, r3, #1
 8009edc:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ede:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d0ef      	beq.n	8009ec4 <__gethex+0x350>
 8009ee4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ee8:	f104 0214 	add.w	r2, r4, #20
 8009eec:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009ef0:	9301      	str	r3, [sp, #4]
 8009ef2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	4694      	mov	ip, r2
 8009efa:	f852 1b04 	ldr.w	r1, [r2], #4
 8009efe:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009f02:	d01e      	beq.n	8009f42 <__gethex+0x3ce>
 8009f04:	3101      	adds	r1, #1
 8009f06:	f8cc 1000 	str.w	r1, [ip]
 8009f0a:	f1b8 0f02 	cmp.w	r8, #2
 8009f0e:	f104 0214 	add.w	r2, r4, #20
 8009f12:	d13d      	bne.n	8009f90 <__gethex+0x41c>
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	3b01      	subs	r3, #1
 8009f18:	42ab      	cmp	r3, r5
 8009f1a:	d10b      	bne.n	8009f34 <__gethex+0x3c0>
 8009f1c:	1169      	asrs	r1, r5, #5
 8009f1e:	2301      	movs	r3, #1
 8009f20:	f005 051f 	and.w	r5, r5, #31
 8009f24:	fa03 f505 	lsl.w	r5, r3, r5
 8009f28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f2c:	421d      	tst	r5, r3
 8009f2e:	bf18      	it	ne
 8009f30:	f04f 0801 	movne.w	r8, #1
 8009f34:	f048 0820 	orr.w	r8, r8, #32
 8009f38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f3a:	601c      	str	r4, [r3, #0]
 8009f3c:	9b02      	ldr	r3, [sp, #8]
 8009f3e:	601e      	str	r6, [r3, #0]
 8009f40:	e6a2      	b.n	8009c88 <__gethex+0x114>
 8009f42:	4290      	cmp	r0, r2
 8009f44:	f842 3c04 	str.w	r3, [r2, #-4]
 8009f48:	d8d6      	bhi.n	8009ef8 <__gethex+0x384>
 8009f4a:	68a2      	ldr	r2, [r4, #8]
 8009f4c:	4593      	cmp	fp, r2
 8009f4e:	db17      	blt.n	8009f80 <__gethex+0x40c>
 8009f50:	6861      	ldr	r1, [r4, #4]
 8009f52:	4648      	mov	r0, r9
 8009f54:	3101      	adds	r1, #1
 8009f56:	f000 f9c3 	bl	800a2e0 <_Balloc>
 8009f5a:	4682      	mov	sl, r0
 8009f5c:	b918      	cbnz	r0, 8009f66 <__gethex+0x3f2>
 8009f5e:	4b1b      	ldr	r3, [pc, #108]	; (8009fcc <__gethex+0x458>)
 8009f60:	4602      	mov	r2, r0
 8009f62:	2184      	movs	r1, #132	; 0x84
 8009f64:	e6b3      	b.n	8009cce <__gethex+0x15a>
 8009f66:	6922      	ldr	r2, [r4, #16]
 8009f68:	3202      	adds	r2, #2
 8009f6a:	f104 010c 	add.w	r1, r4, #12
 8009f6e:	0092      	lsls	r2, r2, #2
 8009f70:	300c      	adds	r0, #12
 8009f72:	f7fe feba 	bl	8008cea <memcpy>
 8009f76:	4621      	mov	r1, r4
 8009f78:	4648      	mov	r0, r9
 8009f7a:	f000 f9f1 	bl	800a360 <_Bfree>
 8009f7e:	4654      	mov	r4, sl
 8009f80:	6922      	ldr	r2, [r4, #16]
 8009f82:	1c51      	adds	r1, r2, #1
 8009f84:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009f88:	6121      	str	r1, [r4, #16]
 8009f8a:	2101      	movs	r1, #1
 8009f8c:	6151      	str	r1, [r2, #20]
 8009f8e:	e7bc      	b.n	8009f0a <__gethex+0x396>
 8009f90:	6921      	ldr	r1, [r4, #16]
 8009f92:	4559      	cmp	r1, fp
 8009f94:	dd0b      	ble.n	8009fae <__gethex+0x43a>
 8009f96:	2101      	movs	r1, #1
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f7ff fd83 	bl	8009aa4 <rshift>
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	3601      	adds	r6, #1
 8009fa2:	42b3      	cmp	r3, r6
 8009fa4:	f6ff aedb 	blt.w	8009d5e <__gethex+0x1ea>
 8009fa8:	f04f 0801 	mov.w	r8, #1
 8009fac:	e7c2      	b.n	8009f34 <__gethex+0x3c0>
 8009fae:	f015 051f 	ands.w	r5, r5, #31
 8009fb2:	d0f9      	beq.n	8009fa8 <__gethex+0x434>
 8009fb4:	9b01      	ldr	r3, [sp, #4]
 8009fb6:	441a      	add	r2, r3
 8009fb8:	f1c5 0520 	rsb	r5, r5, #32
 8009fbc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009fc0:	f000 fa80 	bl	800a4c4 <__hi0bits>
 8009fc4:	42a8      	cmp	r0, r5
 8009fc6:	dbe6      	blt.n	8009f96 <__gethex+0x422>
 8009fc8:	e7ee      	b.n	8009fa8 <__gethex+0x434>
 8009fca:	bf00      	nop
 8009fcc:	0800d39e 	.word	0x0800d39e

08009fd0 <L_shift>:
 8009fd0:	f1c2 0208 	rsb	r2, r2, #8
 8009fd4:	0092      	lsls	r2, r2, #2
 8009fd6:	b570      	push	{r4, r5, r6, lr}
 8009fd8:	f1c2 0620 	rsb	r6, r2, #32
 8009fdc:	6843      	ldr	r3, [r0, #4]
 8009fde:	6804      	ldr	r4, [r0, #0]
 8009fe0:	fa03 f506 	lsl.w	r5, r3, r6
 8009fe4:	432c      	orrs	r4, r5
 8009fe6:	40d3      	lsrs	r3, r2
 8009fe8:	6004      	str	r4, [r0, #0]
 8009fea:	f840 3f04 	str.w	r3, [r0, #4]!
 8009fee:	4288      	cmp	r0, r1
 8009ff0:	d3f4      	bcc.n	8009fdc <L_shift+0xc>
 8009ff2:	bd70      	pop	{r4, r5, r6, pc}

08009ff4 <__match>:
 8009ff4:	b530      	push	{r4, r5, lr}
 8009ff6:	6803      	ldr	r3, [r0, #0]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ffe:	b914      	cbnz	r4, 800a006 <__match+0x12>
 800a000:	6003      	str	r3, [r0, #0]
 800a002:	2001      	movs	r0, #1
 800a004:	bd30      	pop	{r4, r5, pc}
 800a006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a00a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a00e:	2d19      	cmp	r5, #25
 800a010:	bf98      	it	ls
 800a012:	3220      	addls	r2, #32
 800a014:	42a2      	cmp	r2, r4
 800a016:	d0f0      	beq.n	8009ffa <__match+0x6>
 800a018:	2000      	movs	r0, #0
 800a01a:	e7f3      	b.n	800a004 <__match+0x10>

0800a01c <__hexnan>:
 800a01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a020:	680b      	ldr	r3, [r1, #0]
 800a022:	6801      	ldr	r1, [r0, #0]
 800a024:	115e      	asrs	r6, r3, #5
 800a026:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a02a:	f013 031f 	ands.w	r3, r3, #31
 800a02e:	b087      	sub	sp, #28
 800a030:	bf18      	it	ne
 800a032:	3604      	addne	r6, #4
 800a034:	2500      	movs	r5, #0
 800a036:	1f37      	subs	r7, r6, #4
 800a038:	4682      	mov	sl, r0
 800a03a:	4690      	mov	r8, r2
 800a03c:	9301      	str	r3, [sp, #4]
 800a03e:	f846 5c04 	str.w	r5, [r6, #-4]
 800a042:	46b9      	mov	r9, r7
 800a044:	463c      	mov	r4, r7
 800a046:	9502      	str	r5, [sp, #8]
 800a048:	46ab      	mov	fp, r5
 800a04a:	784a      	ldrb	r2, [r1, #1]
 800a04c:	1c4b      	adds	r3, r1, #1
 800a04e:	9303      	str	r3, [sp, #12]
 800a050:	b342      	cbz	r2, 800a0a4 <__hexnan+0x88>
 800a052:	4610      	mov	r0, r2
 800a054:	9105      	str	r1, [sp, #20]
 800a056:	9204      	str	r2, [sp, #16]
 800a058:	f7ff fd76 	bl	8009b48 <__hexdig_fun>
 800a05c:	2800      	cmp	r0, #0
 800a05e:	d14f      	bne.n	800a100 <__hexnan+0xe4>
 800a060:	9a04      	ldr	r2, [sp, #16]
 800a062:	9905      	ldr	r1, [sp, #20]
 800a064:	2a20      	cmp	r2, #32
 800a066:	d818      	bhi.n	800a09a <__hexnan+0x7e>
 800a068:	9b02      	ldr	r3, [sp, #8]
 800a06a:	459b      	cmp	fp, r3
 800a06c:	dd13      	ble.n	800a096 <__hexnan+0x7a>
 800a06e:	454c      	cmp	r4, r9
 800a070:	d206      	bcs.n	800a080 <__hexnan+0x64>
 800a072:	2d07      	cmp	r5, #7
 800a074:	dc04      	bgt.n	800a080 <__hexnan+0x64>
 800a076:	462a      	mov	r2, r5
 800a078:	4649      	mov	r1, r9
 800a07a:	4620      	mov	r0, r4
 800a07c:	f7ff ffa8 	bl	8009fd0 <L_shift>
 800a080:	4544      	cmp	r4, r8
 800a082:	d950      	bls.n	800a126 <__hexnan+0x10a>
 800a084:	2300      	movs	r3, #0
 800a086:	f1a4 0904 	sub.w	r9, r4, #4
 800a08a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a08e:	f8cd b008 	str.w	fp, [sp, #8]
 800a092:	464c      	mov	r4, r9
 800a094:	461d      	mov	r5, r3
 800a096:	9903      	ldr	r1, [sp, #12]
 800a098:	e7d7      	b.n	800a04a <__hexnan+0x2e>
 800a09a:	2a29      	cmp	r2, #41	; 0x29
 800a09c:	d155      	bne.n	800a14a <__hexnan+0x12e>
 800a09e:	3102      	adds	r1, #2
 800a0a0:	f8ca 1000 	str.w	r1, [sl]
 800a0a4:	f1bb 0f00 	cmp.w	fp, #0
 800a0a8:	d04f      	beq.n	800a14a <__hexnan+0x12e>
 800a0aa:	454c      	cmp	r4, r9
 800a0ac:	d206      	bcs.n	800a0bc <__hexnan+0xa0>
 800a0ae:	2d07      	cmp	r5, #7
 800a0b0:	dc04      	bgt.n	800a0bc <__hexnan+0xa0>
 800a0b2:	462a      	mov	r2, r5
 800a0b4:	4649      	mov	r1, r9
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	f7ff ff8a 	bl	8009fd0 <L_shift>
 800a0bc:	4544      	cmp	r4, r8
 800a0be:	d934      	bls.n	800a12a <__hexnan+0x10e>
 800a0c0:	f1a8 0204 	sub.w	r2, r8, #4
 800a0c4:	4623      	mov	r3, r4
 800a0c6:	f853 1b04 	ldr.w	r1, [r3], #4
 800a0ca:	f842 1f04 	str.w	r1, [r2, #4]!
 800a0ce:	429f      	cmp	r7, r3
 800a0d0:	d2f9      	bcs.n	800a0c6 <__hexnan+0xaa>
 800a0d2:	1b3b      	subs	r3, r7, r4
 800a0d4:	f023 0303 	bic.w	r3, r3, #3
 800a0d8:	3304      	adds	r3, #4
 800a0da:	3e03      	subs	r6, #3
 800a0dc:	3401      	adds	r4, #1
 800a0de:	42a6      	cmp	r6, r4
 800a0e0:	bf38      	it	cc
 800a0e2:	2304      	movcc	r3, #4
 800a0e4:	4443      	add	r3, r8
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f843 2b04 	str.w	r2, [r3], #4
 800a0ec:	429f      	cmp	r7, r3
 800a0ee:	d2fb      	bcs.n	800a0e8 <__hexnan+0xcc>
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	b91b      	cbnz	r3, 800a0fc <__hexnan+0xe0>
 800a0f4:	4547      	cmp	r7, r8
 800a0f6:	d126      	bne.n	800a146 <__hexnan+0x12a>
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	603b      	str	r3, [r7, #0]
 800a0fc:	2005      	movs	r0, #5
 800a0fe:	e025      	b.n	800a14c <__hexnan+0x130>
 800a100:	3501      	adds	r5, #1
 800a102:	2d08      	cmp	r5, #8
 800a104:	f10b 0b01 	add.w	fp, fp, #1
 800a108:	dd06      	ble.n	800a118 <__hexnan+0xfc>
 800a10a:	4544      	cmp	r4, r8
 800a10c:	d9c3      	bls.n	800a096 <__hexnan+0x7a>
 800a10e:	2300      	movs	r3, #0
 800a110:	f844 3c04 	str.w	r3, [r4, #-4]
 800a114:	2501      	movs	r5, #1
 800a116:	3c04      	subs	r4, #4
 800a118:	6822      	ldr	r2, [r4, #0]
 800a11a:	f000 000f 	and.w	r0, r0, #15
 800a11e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a122:	6020      	str	r0, [r4, #0]
 800a124:	e7b7      	b.n	800a096 <__hexnan+0x7a>
 800a126:	2508      	movs	r5, #8
 800a128:	e7b5      	b.n	800a096 <__hexnan+0x7a>
 800a12a:	9b01      	ldr	r3, [sp, #4]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d0df      	beq.n	800a0f0 <__hexnan+0xd4>
 800a130:	f1c3 0320 	rsb	r3, r3, #32
 800a134:	f04f 32ff 	mov.w	r2, #4294967295
 800a138:	40da      	lsrs	r2, r3
 800a13a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a13e:	4013      	ands	r3, r2
 800a140:	f846 3c04 	str.w	r3, [r6, #-4]
 800a144:	e7d4      	b.n	800a0f0 <__hexnan+0xd4>
 800a146:	3f04      	subs	r7, #4
 800a148:	e7d2      	b.n	800a0f0 <__hexnan+0xd4>
 800a14a:	2004      	movs	r0, #4
 800a14c:	b007      	add	sp, #28
 800a14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800a154 <malloc>:
 800a154:	4b02      	ldr	r3, [pc, #8]	; (800a160 <malloc+0xc>)
 800a156:	4601      	mov	r1, r0
 800a158:	6818      	ldr	r0, [r3, #0]
 800a15a:	f000 b823 	b.w	800a1a4 <_malloc_r>
 800a15e:	bf00      	nop
 800a160:	200001f8 	.word	0x200001f8

0800a164 <sbrk_aligned>:
 800a164:	b570      	push	{r4, r5, r6, lr}
 800a166:	4e0e      	ldr	r6, [pc, #56]	; (800a1a0 <sbrk_aligned+0x3c>)
 800a168:	460c      	mov	r4, r1
 800a16a:	6831      	ldr	r1, [r6, #0]
 800a16c:	4605      	mov	r5, r0
 800a16e:	b911      	cbnz	r1, 800a176 <sbrk_aligned+0x12>
 800a170:	f001 fbee 	bl	800b950 <_sbrk_r>
 800a174:	6030      	str	r0, [r6, #0]
 800a176:	4621      	mov	r1, r4
 800a178:	4628      	mov	r0, r5
 800a17a:	f001 fbe9 	bl	800b950 <_sbrk_r>
 800a17e:	1c43      	adds	r3, r0, #1
 800a180:	d00a      	beq.n	800a198 <sbrk_aligned+0x34>
 800a182:	1cc4      	adds	r4, r0, #3
 800a184:	f024 0403 	bic.w	r4, r4, #3
 800a188:	42a0      	cmp	r0, r4
 800a18a:	d007      	beq.n	800a19c <sbrk_aligned+0x38>
 800a18c:	1a21      	subs	r1, r4, r0
 800a18e:	4628      	mov	r0, r5
 800a190:	f001 fbde 	bl	800b950 <_sbrk_r>
 800a194:	3001      	adds	r0, #1
 800a196:	d101      	bne.n	800a19c <sbrk_aligned+0x38>
 800a198:	f04f 34ff 	mov.w	r4, #4294967295
 800a19c:	4620      	mov	r0, r4
 800a19e:	bd70      	pop	{r4, r5, r6, pc}
 800a1a0:	20002c60 	.word	0x20002c60

0800a1a4 <_malloc_r>:
 800a1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1a8:	1ccd      	adds	r5, r1, #3
 800a1aa:	f025 0503 	bic.w	r5, r5, #3
 800a1ae:	3508      	adds	r5, #8
 800a1b0:	2d0c      	cmp	r5, #12
 800a1b2:	bf38      	it	cc
 800a1b4:	250c      	movcc	r5, #12
 800a1b6:	2d00      	cmp	r5, #0
 800a1b8:	4607      	mov	r7, r0
 800a1ba:	db01      	blt.n	800a1c0 <_malloc_r+0x1c>
 800a1bc:	42a9      	cmp	r1, r5
 800a1be:	d905      	bls.n	800a1cc <_malloc_r+0x28>
 800a1c0:	230c      	movs	r3, #12
 800a1c2:	603b      	str	r3, [r7, #0]
 800a1c4:	2600      	movs	r6, #0
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a2a0 <_malloc_r+0xfc>
 800a1d0:	f000 f87a 	bl	800a2c8 <__malloc_lock>
 800a1d4:	f8d8 3000 	ldr.w	r3, [r8]
 800a1d8:	461c      	mov	r4, r3
 800a1da:	bb5c      	cbnz	r4, 800a234 <_malloc_r+0x90>
 800a1dc:	4629      	mov	r1, r5
 800a1de:	4638      	mov	r0, r7
 800a1e0:	f7ff ffc0 	bl	800a164 <sbrk_aligned>
 800a1e4:	1c43      	adds	r3, r0, #1
 800a1e6:	4604      	mov	r4, r0
 800a1e8:	d155      	bne.n	800a296 <_malloc_r+0xf2>
 800a1ea:	f8d8 4000 	ldr.w	r4, [r8]
 800a1ee:	4626      	mov	r6, r4
 800a1f0:	2e00      	cmp	r6, #0
 800a1f2:	d145      	bne.n	800a280 <_malloc_r+0xdc>
 800a1f4:	2c00      	cmp	r4, #0
 800a1f6:	d048      	beq.n	800a28a <_malloc_r+0xe6>
 800a1f8:	6823      	ldr	r3, [r4, #0]
 800a1fa:	4631      	mov	r1, r6
 800a1fc:	4638      	mov	r0, r7
 800a1fe:	eb04 0903 	add.w	r9, r4, r3
 800a202:	f001 fba5 	bl	800b950 <_sbrk_r>
 800a206:	4581      	cmp	r9, r0
 800a208:	d13f      	bne.n	800a28a <_malloc_r+0xe6>
 800a20a:	6821      	ldr	r1, [r4, #0]
 800a20c:	1a6d      	subs	r5, r5, r1
 800a20e:	4629      	mov	r1, r5
 800a210:	4638      	mov	r0, r7
 800a212:	f7ff ffa7 	bl	800a164 <sbrk_aligned>
 800a216:	3001      	adds	r0, #1
 800a218:	d037      	beq.n	800a28a <_malloc_r+0xe6>
 800a21a:	6823      	ldr	r3, [r4, #0]
 800a21c:	442b      	add	r3, r5
 800a21e:	6023      	str	r3, [r4, #0]
 800a220:	f8d8 3000 	ldr.w	r3, [r8]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d038      	beq.n	800a29a <_malloc_r+0xf6>
 800a228:	685a      	ldr	r2, [r3, #4]
 800a22a:	42a2      	cmp	r2, r4
 800a22c:	d12b      	bne.n	800a286 <_malloc_r+0xe2>
 800a22e:	2200      	movs	r2, #0
 800a230:	605a      	str	r2, [r3, #4]
 800a232:	e00f      	b.n	800a254 <_malloc_r+0xb0>
 800a234:	6822      	ldr	r2, [r4, #0]
 800a236:	1b52      	subs	r2, r2, r5
 800a238:	d41f      	bmi.n	800a27a <_malloc_r+0xd6>
 800a23a:	2a0b      	cmp	r2, #11
 800a23c:	d917      	bls.n	800a26e <_malloc_r+0xca>
 800a23e:	1961      	adds	r1, r4, r5
 800a240:	42a3      	cmp	r3, r4
 800a242:	6025      	str	r5, [r4, #0]
 800a244:	bf18      	it	ne
 800a246:	6059      	strne	r1, [r3, #4]
 800a248:	6863      	ldr	r3, [r4, #4]
 800a24a:	bf08      	it	eq
 800a24c:	f8c8 1000 	streq.w	r1, [r8]
 800a250:	5162      	str	r2, [r4, r5]
 800a252:	604b      	str	r3, [r1, #4]
 800a254:	4638      	mov	r0, r7
 800a256:	f104 060b 	add.w	r6, r4, #11
 800a25a:	f000 f83b 	bl	800a2d4 <__malloc_unlock>
 800a25e:	f026 0607 	bic.w	r6, r6, #7
 800a262:	1d23      	adds	r3, r4, #4
 800a264:	1af2      	subs	r2, r6, r3
 800a266:	d0ae      	beq.n	800a1c6 <_malloc_r+0x22>
 800a268:	1b9b      	subs	r3, r3, r6
 800a26a:	50a3      	str	r3, [r4, r2]
 800a26c:	e7ab      	b.n	800a1c6 <_malloc_r+0x22>
 800a26e:	42a3      	cmp	r3, r4
 800a270:	6862      	ldr	r2, [r4, #4]
 800a272:	d1dd      	bne.n	800a230 <_malloc_r+0x8c>
 800a274:	f8c8 2000 	str.w	r2, [r8]
 800a278:	e7ec      	b.n	800a254 <_malloc_r+0xb0>
 800a27a:	4623      	mov	r3, r4
 800a27c:	6864      	ldr	r4, [r4, #4]
 800a27e:	e7ac      	b.n	800a1da <_malloc_r+0x36>
 800a280:	4634      	mov	r4, r6
 800a282:	6876      	ldr	r6, [r6, #4]
 800a284:	e7b4      	b.n	800a1f0 <_malloc_r+0x4c>
 800a286:	4613      	mov	r3, r2
 800a288:	e7cc      	b.n	800a224 <_malloc_r+0x80>
 800a28a:	230c      	movs	r3, #12
 800a28c:	603b      	str	r3, [r7, #0]
 800a28e:	4638      	mov	r0, r7
 800a290:	f000 f820 	bl	800a2d4 <__malloc_unlock>
 800a294:	e797      	b.n	800a1c6 <_malloc_r+0x22>
 800a296:	6025      	str	r5, [r4, #0]
 800a298:	e7dc      	b.n	800a254 <_malloc_r+0xb0>
 800a29a:	605b      	str	r3, [r3, #4]
 800a29c:	deff      	udf	#255	; 0xff
 800a29e:	bf00      	nop
 800a2a0:	20002c5c 	.word	0x20002c5c

0800a2a4 <__ascii_mbtowc>:
 800a2a4:	b082      	sub	sp, #8
 800a2a6:	b901      	cbnz	r1, 800a2aa <__ascii_mbtowc+0x6>
 800a2a8:	a901      	add	r1, sp, #4
 800a2aa:	b142      	cbz	r2, 800a2be <__ascii_mbtowc+0x1a>
 800a2ac:	b14b      	cbz	r3, 800a2c2 <__ascii_mbtowc+0x1e>
 800a2ae:	7813      	ldrb	r3, [r2, #0]
 800a2b0:	600b      	str	r3, [r1, #0]
 800a2b2:	7812      	ldrb	r2, [r2, #0]
 800a2b4:	1e10      	subs	r0, r2, #0
 800a2b6:	bf18      	it	ne
 800a2b8:	2001      	movne	r0, #1
 800a2ba:	b002      	add	sp, #8
 800a2bc:	4770      	bx	lr
 800a2be:	4610      	mov	r0, r2
 800a2c0:	e7fb      	b.n	800a2ba <__ascii_mbtowc+0x16>
 800a2c2:	f06f 0001 	mvn.w	r0, #1
 800a2c6:	e7f8      	b.n	800a2ba <__ascii_mbtowc+0x16>

0800a2c8 <__malloc_lock>:
 800a2c8:	4801      	ldr	r0, [pc, #4]	; (800a2d0 <__malloc_lock+0x8>)
 800a2ca:	f7fe bd0c 	b.w	8008ce6 <__retarget_lock_acquire_recursive>
 800a2ce:	bf00      	nop
 800a2d0:	20002c58 	.word	0x20002c58

0800a2d4 <__malloc_unlock>:
 800a2d4:	4801      	ldr	r0, [pc, #4]	; (800a2dc <__malloc_unlock+0x8>)
 800a2d6:	f7fe bd07 	b.w	8008ce8 <__retarget_lock_release_recursive>
 800a2da:	bf00      	nop
 800a2dc:	20002c58 	.word	0x20002c58

0800a2e0 <_Balloc>:
 800a2e0:	b570      	push	{r4, r5, r6, lr}
 800a2e2:	69c6      	ldr	r6, [r0, #28]
 800a2e4:	4604      	mov	r4, r0
 800a2e6:	460d      	mov	r5, r1
 800a2e8:	b976      	cbnz	r6, 800a308 <_Balloc+0x28>
 800a2ea:	2010      	movs	r0, #16
 800a2ec:	f7ff ff32 	bl	800a154 <malloc>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	61e0      	str	r0, [r4, #28]
 800a2f4:	b920      	cbnz	r0, 800a300 <_Balloc+0x20>
 800a2f6:	4b18      	ldr	r3, [pc, #96]	; (800a358 <_Balloc+0x78>)
 800a2f8:	4818      	ldr	r0, [pc, #96]	; (800a35c <_Balloc+0x7c>)
 800a2fa:	216b      	movs	r1, #107	; 0x6b
 800a2fc:	f001 fb38 	bl	800b970 <__assert_func>
 800a300:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a304:	6006      	str	r6, [r0, #0]
 800a306:	60c6      	str	r6, [r0, #12]
 800a308:	69e6      	ldr	r6, [r4, #28]
 800a30a:	68f3      	ldr	r3, [r6, #12]
 800a30c:	b183      	cbz	r3, 800a330 <_Balloc+0x50>
 800a30e:	69e3      	ldr	r3, [r4, #28]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a316:	b9b8      	cbnz	r0, 800a348 <_Balloc+0x68>
 800a318:	2101      	movs	r1, #1
 800a31a:	fa01 f605 	lsl.w	r6, r1, r5
 800a31e:	1d72      	adds	r2, r6, #5
 800a320:	0092      	lsls	r2, r2, #2
 800a322:	4620      	mov	r0, r4
 800a324:	f001 fb42 	bl	800b9ac <_calloc_r>
 800a328:	b160      	cbz	r0, 800a344 <_Balloc+0x64>
 800a32a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a32e:	e00e      	b.n	800a34e <_Balloc+0x6e>
 800a330:	2221      	movs	r2, #33	; 0x21
 800a332:	2104      	movs	r1, #4
 800a334:	4620      	mov	r0, r4
 800a336:	f001 fb39 	bl	800b9ac <_calloc_r>
 800a33a:	69e3      	ldr	r3, [r4, #28]
 800a33c:	60f0      	str	r0, [r6, #12]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d1e4      	bne.n	800a30e <_Balloc+0x2e>
 800a344:	2000      	movs	r0, #0
 800a346:	bd70      	pop	{r4, r5, r6, pc}
 800a348:	6802      	ldr	r2, [r0, #0]
 800a34a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a34e:	2300      	movs	r3, #0
 800a350:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a354:	e7f7      	b.n	800a346 <_Balloc+0x66>
 800a356:	bf00      	nop
 800a358:	0800d32f 	.word	0x0800d32f
 800a35c:	0800d40f 	.word	0x0800d40f

0800a360 <_Bfree>:
 800a360:	b570      	push	{r4, r5, r6, lr}
 800a362:	69c6      	ldr	r6, [r0, #28]
 800a364:	4605      	mov	r5, r0
 800a366:	460c      	mov	r4, r1
 800a368:	b976      	cbnz	r6, 800a388 <_Bfree+0x28>
 800a36a:	2010      	movs	r0, #16
 800a36c:	f7ff fef2 	bl	800a154 <malloc>
 800a370:	4602      	mov	r2, r0
 800a372:	61e8      	str	r0, [r5, #28]
 800a374:	b920      	cbnz	r0, 800a380 <_Bfree+0x20>
 800a376:	4b09      	ldr	r3, [pc, #36]	; (800a39c <_Bfree+0x3c>)
 800a378:	4809      	ldr	r0, [pc, #36]	; (800a3a0 <_Bfree+0x40>)
 800a37a:	218f      	movs	r1, #143	; 0x8f
 800a37c:	f001 faf8 	bl	800b970 <__assert_func>
 800a380:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a384:	6006      	str	r6, [r0, #0]
 800a386:	60c6      	str	r6, [r0, #12]
 800a388:	b13c      	cbz	r4, 800a39a <_Bfree+0x3a>
 800a38a:	69eb      	ldr	r3, [r5, #28]
 800a38c:	6862      	ldr	r2, [r4, #4]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a394:	6021      	str	r1, [r4, #0]
 800a396:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a39a:	bd70      	pop	{r4, r5, r6, pc}
 800a39c:	0800d32f 	.word	0x0800d32f
 800a3a0:	0800d40f 	.word	0x0800d40f

0800a3a4 <__multadd>:
 800a3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a8:	690d      	ldr	r5, [r1, #16]
 800a3aa:	4607      	mov	r7, r0
 800a3ac:	460c      	mov	r4, r1
 800a3ae:	461e      	mov	r6, r3
 800a3b0:	f101 0c14 	add.w	ip, r1, #20
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	f8dc 3000 	ldr.w	r3, [ip]
 800a3ba:	b299      	uxth	r1, r3
 800a3bc:	fb02 6101 	mla	r1, r2, r1, r6
 800a3c0:	0c1e      	lsrs	r6, r3, #16
 800a3c2:	0c0b      	lsrs	r3, r1, #16
 800a3c4:	fb02 3306 	mla	r3, r2, r6, r3
 800a3c8:	b289      	uxth	r1, r1
 800a3ca:	3001      	adds	r0, #1
 800a3cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a3d0:	4285      	cmp	r5, r0
 800a3d2:	f84c 1b04 	str.w	r1, [ip], #4
 800a3d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a3da:	dcec      	bgt.n	800a3b6 <__multadd+0x12>
 800a3dc:	b30e      	cbz	r6, 800a422 <__multadd+0x7e>
 800a3de:	68a3      	ldr	r3, [r4, #8]
 800a3e0:	42ab      	cmp	r3, r5
 800a3e2:	dc19      	bgt.n	800a418 <__multadd+0x74>
 800a3e4:	6861      	ldr	r1, [r4, #4]
 800a3e6:	4638      	mov	r0, r7
 800a3e8:	3101      	adds	r1, #1
 800a3ea:	f7ff ff79 	bl	800a2e0 <_Balloc>
 800a3ee:	4680      	mov	r8, r0
 800a3f0:	b928      	cbnz	r0, 800a3fe <__multadd+0x5a>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	4b0c      	ldr	r3, [pc, #48]	; (800a428 <__multadd+0x84>)
 800a3f6:	480d      	ldr	r0, [pc, #52]	; (800a42c <__multadd+0x88>)
 800a3f8:	21ba      	movs	r1, #186	; 0xba
 800a3fa:	f001 fab9 	bl	800b970 <__assert_func>
 800a3fe:	6922      	ldr	r2, [r4, #16]
 800a400:	3202      	adds	r2, #2
 800a402:	f104 010c 	add.w	r1, r4, #12
 800a406:	0092      	lsls	r2, r2, #2
 800a408:	300c      	adds	r0, #12
 800a40a:	f7fe fc6e 	bl	8008cea <memcpy>
 800a40e:	4621      	mov	r1, r4
 800a410:	4638      	mov	r0, r7
 800a412:	f7ff ffa5 	bl	800a360 <_Bfree>
 800a416:	4644      	mov	r4, r8
 800a418:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a41c:	3501      	adds	r5, #1
 800a41e:	615e      	str	r6, [r3, #20]
 800a420:	6125      	str	r5, [r4, #16]
 800a422:	4620      	mov	r0, r4
 800a424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a428:	0800d39e 	.word	0x0800d39e
 800a42c:	0800d40f 	.word	0x0800d40f

0800a430 <__s2b>:
 800a430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a434:	460c      	mov	r4, r1
 800a436:	4615      	mov	r5, r2
 800a438:	461f      	mov	r7, r3
 800a43a:	2209      	movs	r2, #9
 800a43c:	3308      	adds	r3, #8
 800a43e:	4606      	mov	r6, r0
 800a440:	fb93 f3f2 	sdiv	r3, r3, r2
 800a444:	2100      	movs	r1, #0
 800a446:	2201      	movs	r2, #1
 800a448:	429a      	cmp	r2, r3
 800a44a:	db09      	blt.n	800a460 <__s2b+0x30>
 800a44c:	4630      	mov	r0, r6
 800a44e:	f7ff ff47 	bl	800a2e0 <_Balloc>
 800a452:	b940      	cbnz	r0, 800a466 <__s2b+0x36>
 800a454:	4602      	mov	r2, r0
 800a456:	4b19      	ldr	r3, [pc, #100]	; (800a4bc <__s2b+0x8c>)
 800a458:	4819      	ldr	r0, [pc, #100]	; (800a4c0 <__s2b+0x90>)
 800a45a:	21d3      	movs	r1, #211	; 0xd3
 800a45c:	f001 fa88 	bl	800b970 <__assert_func>
 800a460:	0052      	lsls	r2, r2, #1
 800a462:	3101      	adds	r1, #1
 800a464:	e7f0      	b.n	800a448 <__s2b+0x18>
 800a466:	9b08      	ldr	r3, [sp, #32]
 800a468:	6143      	str	r3, [r0, #20]
 800a46a:	2d09      	cmp	r5, #9
 800a46c:	f04f 0301 	mov.w	r3, #1
 800a470:	6103      	str	r3, [r0, #16]
 800a472:	dd16      	ble.n	800a4a2 <__s2b+0x72>
 800a474:	f104 0909 	add.w	r9, r4, #9
 800a478:	46c8      	mov	r8, r9
 800a47a:	442c      	add	r4, r5
 800a47c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a480:	4601      	mov	r1, r0
 800a482:	3b30      	subs	r3, #48	; 0x30
 800a484:	220a      	movs	r2, #10
 800a486:	4630      	mov	r0, r6
 800a488:	f7ff ff8c 	bl	800a3a4 <__multadd>
 800a48c:	45a0      	cmp	r8, r4
 800a48e:	d1f5      	bne.n	800a47c <__s2b+0x4c>
 800a490:	f1a5 0408 	sub.w	r4, r5, #8
 800a494:	444c      	add	r4, r9
 800a496:	1b2d      	subs	r5, r5, r4
 800a498:	1963      	adds	r3, r4, r5
 800a49a:	42bb      	cmp	r3, r7
 800a49c:	db04      	blt.n	800a4a8 <__s2b+0x78>
 800a49e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4a2:	340a      	adds	r4, #10
 800a4a4:	2509      	movs	r5, #9
 800a4a6:	e7f6      	b.n	800a496 <__s2b+0x66>
 800a4a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a4ac:	4601      	mov	r1, r0
 800a4ae:	3b30      	subs	r3, #48	; 0x30
 800a4b0:	220a      	movs	r2, #10
 800a4b2:	4630      	mov	r0, r6
 800a4b4:	f7ff ff76 	bl	800a3a4 <__multadd>
 800a4b8:	e7ee      	b.n	800a498 <__s2b+0x68>
 800a4ba:	bf00      	nop
 800a4bc:	0800d39e 	.word	0x0800d39e
 800a4c0:	0800d40f 	.word	0x0800d40f

0800a4c4 <__hi0bits>:
 800a4c4:	0c03      	lsrs	r3, r0, #16
 800a4c6:	041b      	lsls	r3, r3, #16
 800a4c8:	b9d3      	cbnz	r3, 800a500 <__hi0bits+0x3c>
 800a4ca:	0400      	lsls	r0, r0, #16
 800a4cc:	2310      	movs	r3, #16
 800a4ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a4d2:	bf04      	itt	eq
 800a4d4:	0200      	lsleq	r0, r0, #8
 800a4d6:	3308      	addeq	r3, #8
 800a4d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a4dc:	bf04      	itt	eq
 800a4de:	0100      	lsleq	r0, r0, #4
 800a4e0:	3304      	addeq	r3, #4
 800a4e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a4e6:	bf04      	itt	eq
 800a4e8:	0080      	lsleq	r0, r0, #2
 800a4ea:	3302      	addeq	r3, #2
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	db05      	blt.n	800a4fc <__hi0bits+0x38>
 800a4f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a4f4:	f103 0301 	add.w	r3, r3, #1
 800a4f8:	bf08      	it	eq
 800a4fa:	2320      	moveq	r3, #32
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	4770      	bx	lr
 800a500:	2300      	movs	r3, #0
 800a502:	e7e4      	b.n	800a4ce <__hi0bits+0xa>

0800a504 <__lo0bits>:
 800a504:	6803      	ldr	r3, [r0, #0]
 800a506:	f013 0207 	ands.w	r2, r3, #7
 800a50a:	d00c      	beq.n	800a526 <__lo0bits+0x22>
 800a50c:	07d9      	lsls	r1, r3, #31
 800a50e:	d422      	bmi.n	800a556 <__lo0bits+0x52>
 800a510:	079a      	lsls	r2, r3, #30
 800a512:	bf49      	itett	mi
 800a514:	085b      	lsrmi	r3, r3, #1
 800a516:	089b      	lsrpl	r3, r3, #2
 800a518:	6003      	strmi	r3, [r0, #0]
 800a51a:	2201      	movmi	r2, #1
 800a51c:	bf5c      	itt	pl
 800a51e:	6003      	strpl	r3, [r0, #0]
 800a520:	2202      	movpl	r2, #2
 800a522:	4610      	mov	r0, r2
 800a524:	4770      	bx	lr
 800a526:	b299      	uxth	r1, r3
 800a528:	b909      	cbnz	r1, 800a52e <__lo0bits+0x2a>
 800a52a:	0c1b      	lsrs	r3, r3, #16
 800a52c:	2210      	movs	r2, #16
 800a52e:	b2d9      	uxtb	r1, r3
 800a530:	b909      	cbnz	r1, 800a536 <__lo0bits+0x32>
 800a532:	3208      	adds	r2, #8
 800a534:	0a1b      	lsrs	r3, r3, #8
 800a536:	0719      	lsls	r1, r3, #28
 800a538:	bf04      	itt	eq
 800a53a:	091b      	lsreq	r3, r3, #4
 800a53c:	3204      	addeq	r2, #4
 800a53e:	0799      	lsls	r1, r3, #30
 800a540:	bf04      	itt	eq
 800a542:	089b      	lsreq	r3, r3, #2
 800a544:	3202      	addeq	r2, #2
 800a546:	07d9      	lsls	r1, r3, #31
 800a548:	d403      	bmi.n	800a552 <__lo0bits+0x4e>
 800a54a:	085b      	lsrs	r3, r3, #1
 800a54c:	f102 0201 	add.w	r2, r2, #1
 800a550:	d003      	beq.n	800a55a <__lo0bits+0x56>
 800a552:	6003      	str	r3, [r0, #0]
 800a554:	e7e5      	b.n	800a522 <__lo0bits+0x1e>
 800a556:	2200      	movs	r2, #0
 800a558:	e7e3      	b.n	800a522 <__lo0bits+0x1e>
 800a55a:	2220      	movs	r2, #32
 800a55c:	e7e1      	b.n	800a522 <__lo0bits+0x1e>
	...

0800a560 <__i2b>:
 800a560:	b510      	push	{r4, lr}
 800a562:	460c      	mov	r4, r1
 800a564:	2101      	movs	r1, #1
 800a566:	f7ff febb 	bl	800a2e0 <_Balloc>
 800a56a:	4602      	mov	r2, r0
 800a56c:	b928      	cbnz	r0, 800a57a <__i2b+0x1a>
 800a56e:	4b05      	ldr	r3, [pc, #20]	; (800a584 <__i2b+0x24>)
 800a570:	4805      	ldr	r0, [pc, #20]	; (800a588 <__i2b+0x28>)
 800a572:	f240 1145 	movw	r1, #325	; 0x145
 800a576:	f001 f9fb 	bl	800b970 <__assert_func>
 800a57a:	2301      	movs	r3, #1
 800a57c:	6144      	str	r4, [r0, #20]
 800a57e:	6103      	str	r3, [r0, #16]
 800a580:	bd10      	pop	{r4, pc}
 800a582:	bf00      	nop
 800a584:	0800d39e 	.word	0x0800d39e
 800a588:	0800d40f 	.word	0x0800d40f

0800a58c <__multiply>:
 800a58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a590:	4691      	mov	r9, r2
 800a592:	690a      	ldr	r2, [r1, #16]
 800a594:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a598:	429a      	cmp	r2, r3
 800a59a:	bfb8      	it	lt
 800a59c:	460b      	movlt	r3, r1
 800a59e:	460c      	mov	r4, r1
 800a5a0:	bfbc      	itt	lt
 800a5a2:	464c      	movlt	r4, r9
 800a5a4:	4699      	movlt	r9, r3
 800a5a6:	6927      	ldr	r7, [r4, #16]
 800a5a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a5ac:	68a3      	ldr	r3, [r4, #8]
 800a5ae:	6861      	ldr	r1, [r4, #4]
 800a5b0:	eb07 060a 	add.w	r6, r7, sl
 800a5b4:	42b3      	cmp	r3, r6
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	bfb8      	it	lt
 800a5ba:	3101      	addlt	r1, #1
 800a5bc:	f7ff fe90 	bl	800a2e0 <_Balloc>
 800a5c0:	b930      	cbnz	r0, 800a5d0 <__multiply+0x44>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	4b44      	ldr	r3, [pc, #272]	; (800a6d8 <__multiply+0x14c>)
 800a5c6:	4845      	ldr	r0, [pc, #276]	; (800a6dc <__multiply+0x150>)
 800a5c8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a5cc:	f001 f9d0 	bl	800b970 <__assert_func>
 800a5d0:	f100 0514 	add.w	r5, r0, #20
 800a5d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a5d8:	462b      	mov	r3, r5
 800a5da:	2200      	movs	r2, #0
 800a5dc:	4543      	cmp	r3, r8
 800a5de:	d321      	bcc.n	800a624 <__multiply+0x98>
 800a5e0:	f104 0314 	add.w	r3, r4, #20
 800a5e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a5e8:	f109 0314 	add.w	r3, r9, #20
 800a5ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a5f0:	9202      	str	r2, [sp, #8]
 800a5f2:	1b3a      	subs	r2, r7, r4
 800a5f4:	3a15      	subs	r2, #21
 800a5f6:	f022 0203 	bic.w	r2, r2, #3
 800a5fa:	3204      	adds	r2, #4
 800a5fc:	f104 0115 	add.w	r1, r4, #21
 800a600:	428f      	cmp	r7, r1
 800a602:	bf38      	it	cc
 800a604:	2204      	movcc	r2, #4
 800a606:	9201      	str	r2, [sp, #4]
 800a608:	9a02      	ldr	r2, [sp, #8]
 800a60a:	9303      	str	r3, [sp, #12]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d80c      	bhi.n	800a62a <__multiply+0x9e>
 800a610:	2e00      	cmp	r6, #0
 800a612:	dd03      	ble.n	800a61c <__multiply+0x90>
 800a614:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d05b      	beq.n	800a6d4 <__multiply+0x148>
 800a61c:	6106      	str	r6, [r0, #16]
 800a61e:	b005      	add	sp, #20
 800a620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a624:	f843 2b04 	str.w	r2, [r3], #4
 800a628:	e7d8      	b.n	800a5dc <__multiply+0x50>
 800a62a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a62e:	f1ba 0f00 	cmp.w	sl, #0
 800a632:	d024      	beq.n	800a67e <__multiply+0xf2>
 800a634:	f104 0e14 	add.w	lr, r4, #20
 800a638:	46a9      	mov	r9, r5
 800a63a:	f04f 0c00 	mov.w	ip, #0
 800a63e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a642:	f8d9 1000 	ldr.w	r1, [r9]
 800a646:	fa1f fb82 	uxth.w	fp, r2
 800a64a:	b289      	uxth	r1, r1
 800a64c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a650:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a654:	f8d9 2000 	ldr.w	r2, [r9]
 800a658:	4461      	add	r1, ip
 800a65a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a65e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a662:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a666:	b289      	uxth	r1, r1
 800a668:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a66c:	4577      	cmp	r7, lr
 800a66e:	f849 1b04 	str.w	r1, [r9], #4
 800a672:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a676:	d8e2      	bhi.n	800a63e <__multiply+0xb2>
 800a678:	9a01      	ldr	r2, [sp, #4]
 800a67a:	f845 c002 	str.w	ip, [r5, r2]
 800a67e:	9a03      	ldr	r2, [sp, #12]
 800a680:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a684:	3304      	adds	r3, #4
 800a686:	f1b9 0f00 	cmp.w	r9, #0
 800a68a:	d021      	beq.n	800a6d0 <__multiply+0x144>
 800a68c:	6829      	ldr	r1, [r5, #0]
 800a68e:	f104 0c14 	add.w	ip, r4, #20
 800a692:	46ae      	mov	lr, r5
 800a694:	f04f 0a00 	mov.w	sl, #0
 800a698:	f8bc b000 	ldrh.w	fp, [ip]
 800a69c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a6a0:	fb09 220b 	mla	r2, r9, fp, r2
 800a6a4:	4452      	add	r2, sl
 800a6a6:	b289      	uxth	r1, r1
 800a6a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a6ac:	f84e 1b04 	str.w	r1, [lr], #4
 800a6b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a6b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a6b8:	f8be 1000 	ldrh.w	r1, [lr]
 800a6bc:	fb09 110a 	mla	r1, r9, sl, r1
 800a6c0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a6c4:	4567      	cmp	r7, ip
 800a6c6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a6ca:	d8e5      	bhi.n	800a698 <__multiply+0x10c>
 800a6cc:	9a01      	ldr	r2, [sp, #4]
 800a6ce:	50a9      	str	r1, [r5, r2]
 800a6d0:	3504      	adds	r5, #4
 800a6d2:	e799      	b.n	800a608 <__multiply+0x7c>
 800a6d4:	3e01      	subs	r6, #1
 800a6d6:	e79b      	b.n	800a610 <__multiply+0x84>
 800a6d8:	0800d39e 	.word	0x0800d39e
 800a6dc:	0800d40f 	.word	0x0800d40f

0800a6e0 <__pow5mult>:
 800a6e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6e4:	4615      	mov	r5, r2
 800a6e6:	f012 0203 	ands.w	r2, r2, #3
 800a6ea:	4606      	mov	r6, r0
 800a6ec:	460f      	mov	r7, r1
 800a6ee:	d007      	beq.n	800a700 <__pow5mult+0x20>
 800a6f0:	4c25      	ldr	r4, [pc, #148]	; (800a788 <__pow5mult+0xa8>)
 800a6f2:	3a01      	subs	r2, #1
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a6fa:	f7ff fe53 	bl	800a3a4 <__multadd>
 800a6fe:	4607      	mov	r7, r0
 800a700:	10ad      	asrs	r5, r5, #2
 800a702:	d03d      	beq.n	800a780 <__pow5mult+0xa0>
 800a704:	69f4      	ldr	r4, [r6, #28]
 800a706:	b97c      	cbnz	r4, 800a728 <__pow5mult+0x48>
 800a708:	2010      	movs	r0, #16
 800a70a:	f7ff fd23 	bl	800a154 <malloc>
 800a70e:	4602      	mov	r2, r0
 800a710:	61f0      	str	r0, [r6, #28]
 800a712:	b928      	cbnz	r0, 800a720 <__pow5mult+0x40>
 800a714:	4b1d      	ldr	r3, [pc, #116]	; (800a78c <__pow5mult+0xac>)
 800a716:	481e      	ldr	r0, [pc, #120]	; (800a790 <__pow5mult+0xb0>)
 800a718:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a71c:	f001 f928 	bl	800b970 <__assert_func>
 800a720:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a724:	6004      	str	r4, [r0, #0]
 800a726:	60c4      	str	r4, [r0, #12]
 800a728:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a72c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a730:	b94c      	cbnz	r4, 800a746 <__pow5mult+0x66>
 800a732:	f240 2171 	movw	r1, #625	; 0x271
 800a736:	4630      	mov	r0, r6
 800a738:	f7ff ff12 	bl	800a560 <__i2b>
 800a73c:	2300      	movs	r3, #0
 800a73e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a742:	4604      	mov	r4, r0
 800a744:	6003      	str	r3, [r0, #0]
 800a746:	f04f 0900 	mov.w	r9, #0
 800a74a:	07eb      	lsls	r3, r5, #31
 800a74c:	d50a      	bpl.n	800a764 <__pow5mult+0x84>
 800a74e:	4639      	mov	r1, r7
 800a750:	4622      	mov	r2, r4
 800a752:	4630      	mov	r0, r6
 800a754:	f7ff ff1a 	bl	800a58c <__multiply>
 800a758:	4639      	mov	r1, r7
 800a75a:	4680      	mov	r8, r0
 800a75c:	4630      	mov	r0, r6
 800a75e:	f7ff fdff 	bl	800a360 <_Bfree>
 800a762:	4647      	mov	r7, r8
 800a764:	106d      	asrs	r5, r5, #1
 800a766:	d00b      	beq.n	800a780 <__pow5mult+0xa0>
 800a768:	6820      	ldr	r0, [r4, #0]
 800a76a:	b938      	cbnz	r0, 800a77c <__pow5mult+0x9c>
 800a76c:	4622      	mov	r2, r4
 800a76e:	4621      	mov	r1, r4
 800a770:	4630      	mov	r0, r6
 800a772:	f7ff ff0b 	bl	800a58c <__multiply>
 800a776:	6020      	str	r0, [r4, #0]
 800a778:	f8c0 9000 	str.w	r9, [r0]
 800a77c:	4604      	mov	r4, r0
 800a77e:	e7e4      	b.n	800a74a <__pow5mult+0x6a>
 800a780:	4638      	mov	r0, r7
 800a782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a786:	bf00      	nop
 800a788:	0800d558 	.word	0x0800d558
 800a78c:	0800d32f 	.word	0x0800d32f
 800a790:	0800d40f 	.word	0x0800d40f

0800a794 <__lshift>:
 800a794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a798:	460c      	mov	r4, r1
 800a79a:	6849      	ldr	r1, [r1, #4]
 800a79c:	6923      	ldr	r3, [r4, #16]
 800a79e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7a2:	68a3      	ldr	r3, [r4, #8]
 800a7a4:	4607      	mov	r7, r0
 800a7a6:	4691      	mov	r9, r2
 800a7a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7ac:	f108 0601 	add.w	r6, r8, #1
 800a7b0:	42b3      	cmp	r3, r6
 800a7b2:	db0b      	blt.n	800a7cc <__lshift+0x38>
 800a7b4:	4638      	mov	r0, r7
 800a7b6:	f7ff fd93 	bl	800a2e0 <_Balloc>
 800a7ba:	4605      	mov	r5, r0
 800a7bc:	b948      	cbnz	r0, 800a7d2 <__lshift+0x3e>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	4b28      	ldr	r3, [pc, #160]	; (800a864 <__lshift+0xd0>)
 800a7c2:	4829      	ldr	r0, [pc, #164]	; (800a868 <__lshift+0xd4>)
 800a7c4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a7c8:	f001 f8d2 	bl	800b970 <__assert_func>
 800a7cc:	3101      	adds	r1, #1
 800a7ce:	005b      	lsls	r3, r3, #1
 800a7d0:	e7ee      	b.n	800a7b0 <__lshift+0x1c>
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	f100 0114 	add.w	r1, r0, #20
 800a7d8:	f100 0210 	add.w	r2, r0, #16
 800a7dc:	4618      	mov	r0, r3
 800a7de:	4553      	cmp	r3, sl
 800a7e0:	db33      	blt.n	800a84a <__lshift+0xb6>
 800a7e2:	6920      	ldr	r0, [r4, #16]
 800a7e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a7e8:	f104 0314 	add.w	r3, r4, #20
 800a7ec:	f019 091f 	ands.w	r9, r9, #31
 800a7f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a7f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a7f8:	d02b      	beq.n	800a852 <__lshift+0xbe>
 800a7fa:	f1c9 0e20 	rsb	lr, r9, #32
 800a7fe:	468a      	mov	sl, r1
 800a800:	2200      	movs	r2, #0
 800a802:	6818      	ldr	r0, [r3, #0]
 800a804:	fa00 f009 	lsl.w	r0, r0, r9
 800a808:	4310      	orrs	r0, r2
 800a80a:	f84a 0b04 	str.w	r0, [sl], #4
 800a80e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a812:	459c      	cmp	ip, r3
 800a814:	fa22 f20e 	lsr.w	r2, r2, lr
 800a818:	d8f3      	bhi.n	800a802 <__lshift+0x6e>
 800a81a:	ebac 0304 	sub.w	r3, ip, r4
 800a81e:	3b15      	subs	r3, #21
 800a820:	f023 0303 	bic.w	r3, r3, #3
 800a824:	3304      	adds	r3, #4
 800a826:	f104 0015 	add.w	r0, r4, #21
 800a82a:	4584      	cmp	ip, r0
 800a82c:	bf38      	it	cc
 800a82e:	2304      	movcc	r3, #4
 800a830:	50ca      	str	r2, [r1, r3]
 800a832:	b10a      	cbz	r2, 800a838 <__lshift+0xa4>
 800a834:	f108 0602 	add.w	r6, r8, #2
 800a838:	3e01      	subs	r6, #1
 800a83a:	4638      	mov	r0, r7
 800a83c:	612e      	str	r6, [r5, #16]
 800a83e:	4621      	mov	r1, r4
 800a840:	f7ff fd8e 	bl	800a360 <_Bfree>
 800a844:	4628      	mov	r0, r5
 800a846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a84a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a84e:	3301      	adds	r3, #1
 800a850:	e7c5      	b.n	800a7de <__lshift+0x4a>
 800a852:	3904      	subs	r1, #4
 800a854:	f853 2b04 	ldr.w	r2, [r3], #4
 800a858:	f841 2f04 	str.w	r2, [r1, #4]!
 800a85c:	459c      	cmp	ip, r3
 800a85e:	d8f9      	bhi.n	800a854 <__lshift+0xc0>
 800a860:	e7ea      	b.n	800a838 <__lshift+0xa4>
 800a862:	bf00      	nop
 800a864:	0800d39e 	.word	0x0800d39e
 800a868:	0800d40f 	.word	0x0800d40f

0800a86c <__mcmp>:
 800a86c:	b530      	push	{r4, r5, lr}
 800a86e:	6902      	ldr	r2, [r0, #16]
 800a870:	690c      	ldr	r4, [r1, #16]
 800a872:	1b12      	subs	r2, r2, r4
 800a874:	d10e      	bne.n	800a894 <__mcmp+0x28>
 800a876:	f100 0314 	add.w	r3, r0, #20
 800a87a:	3114      	adds	r1, #20
 800a87c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a880:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a884:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a888:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a88c:	42a5      	cmp	r5, r4
 800a88e:	d003      	beq.n	800a898 <__mcmp+0x2c>
 800a890:	d305      	bcc.n	800a89e <__mcmp+0x32>
 800a892:	2201      	movs	r2, #1
 800a894:	4610      	mov	r0, r2
 800a896:	bd30      	pop	{r4, r5, pc}
 800a898:	4283      	cmp	r3, r0
 800a89a:	d3f3      	bcc.n	800a884 <__mcmp+0x18>
 800a89c:	e7fa      	b.n	800a894 <__mcmp+0x28>
 800a89e:	f04f 32ff 	mov.w	r2, #4294967295
 800a8a2:	e7f7      	b.n	800a894 <__mcmp+0x28>

0800a8a4 <__mdiff>:
 800a8a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a8:	460c      	mov	r4, r1
 800a8aa:	4606      	mov	r6, r0
 800a8ac:	4611      	mov	r1, r2
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	4690      	mov	r8, r2
 800a8b2:	f7ff ffdb 	bl	800a86c <__mcmp>
 800a8b6:	1e05      	subs	r5, r0, #0
 800a8b8:	d110      	bne.n	800a8dc <__mdiff+0x38>
 800a8ba:	4629      	mov	r1, r5
 800a8bc:	4630      	mov	r0, r6
 800a8be:	f7ff fd0f 	bl	800a2e0 <_Balloc>
 800a8c2:	b930      	cbnz	r0, 800a8d2 <__mdiff+0x2e>
 800a8c4:	4b3a      	ldr	r3, [pc, #232]	; (800a9b0 <__mdiff+0x10c>)
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	f240 2137 	movw	r1, #567	; 0x237
 800a8cc:	4839      	ldr	r0, [pc, #228]	; (800a9b4 <__mdiff+0x110>)
 800a8ce:	f001 f84f 	bl	800b970 <__assert_func>
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a8d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8dc:	bfa4      	itt	ge
 800a8de:	4643      	movge	r3, r8
 800a8e0:	46a0      	movge	r8, r4
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a8e8:	bfa6      	itte	ge
 800a8ea:	461c      	movge	r4, r3
 800a8ec:	2500      	movge	r5, #0
 800a8ee:	2501      	movlt	r5, #1
 800a8f0:	f7ff fcf6 	bl	800a2e0 <_Balloc>
 800a8f4:	b920      	cbnz	r0, 800a900 <__mdiff+0x5c>
 800a8f6:	4b2e      	ldr	r3, [pc, #184]	; (800a9b0 <__mdiff+0x10c>)
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	f240 2145 	movw	r1, #581	; 0x245
 800a8fe:	e7e5      	b.n	800a8cc <__mdiff+0x28>
 800a900:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a904:	6926      	ldr	r6, [r4, #16]
 800a906:	60c5      	str	r5, [r0, #12]
 800a908:	f104 0914 	add.w	r9, r4, #20
 800a90c:	f108 0514 	add.w	r5, r8, #20
 800a910:	f100 0e14 	add.w	lr, r0, #20
 800a914:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a918:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a91c:	f108 0210 	add.w	r2, r8, #16
 800a920:	46f2      	mov	sl, lr
 800a922:	2100      	movs	r1, #0
 800a924:	f859 3b04 	ldr.w	r3, [r9], #4
 800a928:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a92c:	fa11 f88b 	uxtah	r8, r1, fp
 800a930:	b299      	uxth	r1, r3
 800a932:	0c1b      	lsrs	r3, r3, #16
 800a934:	eba8 0801 	sub.w	r8, r8, r1
 800a938:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a93c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a940:	fa1f f888 	uxth.w	r8, r8
 800a944:	1419      	asrs	r1, r3, #16
 800a946:	454e      	cmp	r6, r9
 800a948:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a94c:	f84a 3b04 	str.w	r3, [sl], #4
 800a950:	d8e8      	bhi.n	800a924 <__mdiff+0x80>
 800a952:	1b33      	subs	r3, r6, r4
 800a954:	3b15      	subs	r3, #21
 800a956:	f023 0303 	bic.w	r3, r3, #3
 800a95a:	3304      	adds	r3, #4
 800a95c:	3415      	adds	r4, #21
 800a95e:	42a6      	cmp	r6, r4
 800a960:	bf38      	it	cc
 800a962:	2304      	movcc	r3, #4
 800a964:	441d      	add	r5, r3
 800a966:	4473      	add	r3, lr
 800a968:	469e      	mov	lr, r3
 800a96a:	462e      	mov	r6, r5
 800a96c:	4566      	cmp	r6, ip
 800a96e:	d30e      	bcc.n	800a98e <__mdiff+0xea>
 800a970:	f10c 0203 	add.w	r2, ip, #3
 800a974:	1b52      	subs	r2, r2, r5
 800a976:	f022 0203 	bic.w	r2, r2, #3
 800a97a:	3d03      	subs	r5, #3
 800a97c:	45ac      	cmp	ip, r5
 800a97e:	bf38      	it	cc
 800a980:	2200      	movcc	r2, #0
 800a982:	4413      	add	r3, r2
 800a984:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a988:	b17a      	cbz	r2, 800a9aa <__mdiff+0x106>
 800a98a:	6107      	str	r7, [r0, #16]
 800a98c:	e7a4      	b.n	800a8d8 <__mdiff+0x34>
 800a98e:	f856 8b04 	ldr.w	r8, [r6], #4
 800a992:	fa11 f288 	uxtah	r2, r1, r8
 800a996:	1414      	asrs	r4, r2, #16
 800a998:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a99c:	b292      	uxth	r2, r2
 800a99e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a9a2:	f84e 2b04 	str.w	r2, [lr], #4
 800a9a6:	1421      	asrs	r1, r4, #16
 800a9a8:	e7e0      	b.n	800a96c <__mdiff+0xc8>
 800a9aa:	3f01      	subs	r7, #1
 800a9ac:	e7ea      	b.n	800a984 <__mdiff+0xe0>
 800a9ae:	bf00      	nop
 800a9b0:	0800d39e 	.word	0x0800d39e
 800a9b4:	0800d40f 	.word	0x0800d40f

0800a9b8 <__ulp>:
 800a9b8:	b082      	sub	sp, #8
 800a9ba:	ed8d 0b00 	vstr	d0, [sp]
 800a9be:	9a01      	ldr	r2, [sp, #4]
 800a9c0:	4b0f      	ldr	r3, [pc, #60]	; (800aa00 <__ulp+0x48>)
 800a9c2:	4013      	ands	r3, r2
 800a9c4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	dc08      	bgt.n	800a9de <__ulp+0x26>
 800a9cc:	425b      	negs	r3, r3
 800a9ce:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a9d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a9d6:	da04      	bge.n	800a9e2 <__ulp+0x2a>
 800a9d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a9dc:	4113      	asrs	r3, r2
 800a9de:	2200      	movs	r2, #0
 800a9e0:	e008      	b.n	800a9f4 <__ulp+0x3c>
 800a9e2:	f1a2 0314 	sub.w	r3, r2, #20
 800a9e6:	2b1e      	cmp	r3, #30
 800a9e8:	bfda      	itte	le
 800a9ea:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a9ee:	40da      	lsrle	r2, r3
 800a9f0:	2201      	movgt	r2, #1
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	4610      	mov	r0, r2
 800a9f8:	ec41 0b10 	vmov	d0, r0, r1
 800a9fc:	b002      	add	sp, #8
 800a9fe:	4770      	bx	lr
 800aa00:	7ff00000 	.word	0x7ff00000

0800aa04 <__b2d>:
 800aa04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa08:	6906      	ldr	r6, [r0, #16]
 800aa0a:	f100 0814 	add.w	r8, r0, #20
 800aa0e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800aa12:	1f37      	subs	r7, r6, #4
 800aa14:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aa18:	4610      	mov	r0, r2
 800aa1a:	f7ff fd53 	bl	800a4c4 <__hi0bits>
 800aa1e:	f1c0 0320 	rsb	r3, r0, #32
 800aa22:	280a      	cmp	r0, #10
 800aa24:	600b      	str	r3, [r1, #0]
 800aa26:	491b      	ldr	r1, [pc, #108]	; (800aa94 <__b2d+0x90>)
 800aa28:	dc15      	bgt.n	800aa56 <__b2d+0x52>
 800aa2a:	f1c0 0c0b 	rsb	ip, r0, #11
 800aa2e:	fa22 f30c 	lsr.w	r3, r2, ip
 800aa32:	45b8      	cmp	r8, r7
 800aa34:	ea43 0501 	orr.w	r5, r3, r1
 800aa38:	bf34      	ite	cc
 800aa3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aa3e:	2300      	movcs	r3, #0
 800aa40:	3015      	adds	r0, #21
 800aa42:	fa02 f000 	lsl.w	r0, r2, r0
 800aa46:	fa23 f30c 	lsr.w	r3, r3, ip
 800aa4a:	4303      	orrs	r3, r0
 800aa4c:	461c      	mov	r4, r3
 800aa4e:	ec45 4b10 	vmov	d0, r4, r5
 800aa52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa56:	45b8      	cmp	r8, r7
 800aa58:	bf3a      	itte	cc
 800aa5a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aa5e:	f1a6 0708 	subcc.w	r7, r6, #8
 800aa62:	2300      	movcs	r3, #0
 800aa64:	380b      	subs	r0, #11
 800aa66:	d012      	beq.n	800aa8e <__b2d+0x8a>
 800aa68:	f1c0 0120 	rsb	r1, r0, #32
 800aa6c:	fa23 f401 	lsr.w	r4, r3, r1
 800aa70:	4082      	lsls	r2, r0
 800aa72:	4322      	orrs	r2, r4
 800aa74:	4547      	cmp	r7, r8
 800aa76:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800aa7a:	bf8c      	ite	hi
 800aa7c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800aa80:	2200      	movls	r2, #0
 800aa82:	4083      	lsls	r3, r0
 800aa84:	40ca      	lsrs	r2, r1
 800aa86:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	e7de      	b.n	800aa4c <__b2d+0x48>
 800aa8e:	ea42 0501 	orr.w	r5, r2, r1
 800aa92:	e7db      	b.n	800aa4c <__b2d+0x48>
 800aa94:	3ff00000 	.word	0x3ff00000

0800aa98 <__d2b>:
 800aa98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa9c:	460f      	mov	r7, r1
 800aa9e:	2101      	movs	r1, #1
 800aaa0:	ec59 8b10 	vmov	r8, r9, d0
 800aaa4:	4616      	mov	r6, r2
 800aaa6:	f7ff fc1b 	bl	800a2e0 <_Balloc>
 800aaaa:	4604      	mov	r4, r0
 800aaac:	b930      	cbnz	r0, 800aabc <__d2b+0x24>
 800aaae:	4602      	mov	r2, r0
 800aab0:	4b24      	ldr	r3, [pc, #144]	; (800ab44 <__d2b+0xac>)
 800aab2:	4825      	ldr	r0, [pc, #148]	; (800ab48 <__d2b+0xb0>)
 800aab4:	f240 310f 	movw	r1, #783	; 0x30f
 800aab8:	f000 ff5a 	bl	800b970 <__assert_func>
 800aabc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aac0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aac4:	bb2d      	cbnz	r5, 800ab12 <__d2b+0x7a>
 800aac6:	9301      	str	r3, [sp, #4]
 800aac8:	f1b8 0300 	subs.w	r3, r8, #0
 800aacc:	d026      	beq.n	800ab1c <__d2b+0x84>
 800aace:	4668      	mov	r0, sp
 800aad0:	9300      	str	r3, [sp, #0]
 800aad2:	f7ff fd17 	bl	800a504 <__lo0bits>
 800aad6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aada:	b1e8      	cbz	r0, 800ab18 <__d2b+0x80>
 800aadc:	f1c0 0320 	rsb	r3, r0, #32
 800aae0:	fa02 f303 	lsl.w	r3, r2, r3
 800aae4:	430b      	orrs	r3, r1
 800aae6:	40c2      	lsrs	r2, r0
 800aae8:	6163      	str	r3, [r4, #20]
 800aaea:	9201      	str	r2, [sp, #4]
 800aaec:	9b01      	ldr	r3, [sp, #4]
 800aaee:	61a3      	str	r3, [r4, #24]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	bf14      	ite	ne
 800aaf4:	2202      	movne	r2, #2
 800aaf6:	2201      	moveq	r2, #1
 800aaf8:	6122      	str	r2, [r4, #16]
 800aafa:	b1bd      	cbz	r5, 800ab2c <__d2b+0x94>
 800aafc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab00:	4405      	add	r5, r0
 800ab02:	603d      	str	r5, [r7, #0]
 800ab04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab08:	6030      	str	r0, [r6, #0]
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	b003      	add	sp, #12
 800ab0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab16:	e7d6      	b.n	800aac6 <__d2b+0x2e>
 800ab18:	6161      	str	r1, [r4, #20]
 800ab1a:	e7e7      	b.n	800aaec <__d2b+0x54>
 800ab1c:	a801      	add	r0, sp, #4
 800ab1e:	f7ff fcf1 	bl	800a504 <__lo0bits>
 800ab22:	9b01      	ldr	r3, [sp, #4]
 800ab24:	6163      	str	r3, [r4, #20]
 800ab26:	3020      	adds	r0, #32
 800ab28:	2201      	movs	r2, #1
 800ab2a:	e7e5      	b.n	800aaf8 <__d2b+0x60>
 800ab2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab34:	6038      	str	r0, [r7, #0]
 800ab36:	6918      	ldr	r0, [r3, #16]
 800ab38:	f7ff fcc4 	bl	800a4c4 <__hi0bits>
 800ab3c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab40:	e7e2      	b.n	800ab08 <__d2b+0x70>
 800ab42:	bf00      	nop
 800ab44:	0800d39e 	.word	0x0800d39e
 800ab48:	0800d40f 	.word	0x0800d40f

0800ab4c <__ratio>:
 800ab4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab50:	4688      	mov	r8, r1
 800ab52:	4669      	mov	r1, sp
 800ab54:	4681      	mov	r9, r0
 800ab56:	f7ff ff55 	bl	800aa04 <__b2d>
 800ab5a:	a901      	add	r1, sp, #4
 800ab5c:	4640      	mov	r0, r8
 800ab5e:	ec55 4b10 	vmov	r4, r5, d0
 800ab62:	f7ff ff4f 	bl	800aa04 <__b2d>
 800ab66:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab6a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ab6e:	eba3 0c02 	sub.w	ip, r3, r2
 800ab72:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ab76:	1a9b      	subs	r3, r3, r2
 800ab78:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ab7c:	ec51 0b10 	vmov	r0, r1, d0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	bfd6      	itet	le
 800ab84:	460a      	movle	r2, r1
 800ab86:	462a      	movgt	r2, r5
 800ab88:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab8c:	468b      	mov	fp, r1
 800ab8e:	462f      	mov	r7, r5
 800ab90:	bfd4      	ite	le
 800ab92:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ab96:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	ee10 2a10 	vmov	r2, s0
 800aba0:	465b      	mov	r3, fp
 800aba2:	4639      	mov	r1, r7
 800aba4:	f7f5 fe62 	bl	800086c <__aeabi_ddiv>
 800aba8:	ec41 0b10 	vmov	d0, r0, r1
 800abac:	b003      	add	sp, #12
 800abae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abb2 <__copybits>:
 800abb2:	3901      	subs	r1, #1
 800abb4:	b570      	push	{r4, r5, r6, lr}
 800abb6:	1149      	asrs	r1, r1, #5
 800abb8:	6914      	ldr	r4, [r2, #16]
 800abba:	3101      	adds	r1, #1
 800abbc:	f102 0314 	add.w	r3, r2, #20
 800abc0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800abc4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800abc8:	1f05      	subs	r5, r0, #4
 800abca:	42a3      	cmp	r3, r4
 800abcc:	d30c      	bcc.n	800abe8 <__copybits+0x36>
 800abce:	1aa3      	subs	r3, r4, r2
 800abd0:	3b11      	subs	r3, #17
 800abd2:	f023 0303 	bic.w	r3, r3, #3
 800abd6:	3211      	adds	r2, #17
 800abd8:	42a2      	cmp	r2, r4
 800abda:	bf88      	it	hi
 800abdc:	2300      	movhi	r3, #0
 800abde:	4418      	add	r0, r3
 800abe0:	2300      	movs	r3, #0
 800abe2:	4288      	cmp	r0, r1
 800abe4:	d305      	bcc.n	800abf2 <__copybits+0x40>
 800abe6:	bd70      	pop	{r4, r5, r6, pc}
 800abe8:	f853 6b04 	ldr.w	r6, [r3], #4
 800abec:	f845 6f04 	str.w	r6, [r5, #4]!
 800abf0:	e7eb      	b.n	800abca <__copybits+0x18>
 800abf2:	f840 3b04 	str.w	r3, [r0], #4
 800abf6:	e7f4      	b.n	800abe2 <__copybits+0x30>

0800abf8 <__any_on>:
 800abf8:	f100 0214 	add.w	r2, r0, #20
 800abfc:	6900      	ldr	r0, [r0, #16]
 800abfe:	114b      	asrs	r3, r1, #5
 800ac00:	4298      	cmp	r0, r3
 800ac02:	b510      	push	{r4, lr}
 800ac04:	db11      	blt.n	800ac2a <__any_on+0x32>
 800ac06:	dd0a      	ble.n	800ac1e <__any_on+0x26>
 800ac08:	f011 011f 	ands.w	r1, r1, #31
 800ac0c:	d007      	beq.n	800ac1e <__any_on+0x26>
 800ac0e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ac12:	fa24 f001 	lsr.w	r0, r4, r1
 800ac16:	fa00 f101 	lsl.w	r1, r0, r1
 800ac1a:	428c      	cmp	r4, r1
 800ac1c:	d10b      	bne.n	800ac36 <__any_on+0x3e>
 800ac1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d803      	bhi.n	800ac2e <__any_on+0x36>
 800ac26:	2000      	movs	r0, #0
 800ac28:	bd10      	pop	{r4, pc}
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	e7f7      	b.n	800ac1e <__any_on+0x26>
 800ac2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac32:	2900      	cmp	r1, #0
 800ac34:	d0f5      	beq.n	800ac22 <__any_on+0x2a>
 800ac36:	2001      	movs	r0, #1
 800ac38:	e7f6      	b.n	800ac28 <__any_on+0x30>

0800ac3a <__ascii_wctomb>:
 800ac3a:	b149      	cbz	r1, 800ac50 <__ascii_wctomb+0x16>
 800ac3c:	2aff      	cmp	r2, #255	; 0xff
 800ac3e:	bf85      	ittet	hi
 800ac40:	238a      	movhi	r3, #138	; 0x8a
 800ac42:	6003      	strhi	r3, [r0, #0]
 800ac44:	700a      	strbls	r2, [r1, #0]
 800ac46:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac4a:	bf98      	it	ls
 800ac4c:	2001      	movls	r0, #1
 800ac4e:	4770      	bx	lr
 800ac50:	4608      	mov	r0, r1
 800ac52:	4770      	bx	lr

0800ac54 <__sfputc_r>:
 800ac54:	6893      	ldr	r3, [r2, #8]
 800ac56:	3b01      	subs	r3, #1
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	b410      	push	{r4}
 800ac5c:	6093      	str	r3, [r2, #8]
 800ac5e:	da08      	bge.n	800ac72 <__sfputc_r+0x1e>
 800ac60:	6994      	ldr	r4, [r2, #24]
 800ac62:	42a3      	cmp	r3, r4
 800ac64:	db01      	blt.n	800ac6a <__sfputc_r+0x16>
 800ac66:	290a      	cmp	r1, #10
 800ac68:	d103      	bne.n	800ac72 <__sfputc_r+0x1e>
 800ac6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac6e:	f7fd bf16 	b.w	8008a9e <__swbuf_r>
 800ac72:	6813      	ldr	r3, [r2, #0]
 800ac74:	1c58      	adds	r0, r3, #1
 800ac76:	6010      	str	r0, [r2, #0]
 800ac78:	7019      	strb	r1, [r3, #0]
 800ac7a:	4608      	mov	r0, r1
 800ac7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac80:	4770      	bx	lr

0800ac82 <__sfputs_r>:
 800ac82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac84:	4606      	mov	r6, r0
 800ac86:	460f      	mov	r7, r1
 800ac88:	4614      	mov	r4, r2
 800ac8a:	18d5      	adds	r5, r2, r3
 800ac8c:	42ac      	cmp	r4, r5
 800ac8e:	d101      	bne.n	800ac94 <__sfputs_r+0x12>
 800ac90:	2000      	movs	r0, #0
 800ac92:	e007      	b.n	800aca4 <__sfputs_r+0x22>
 800ac94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac98:	463a      	mov	r2, r7
 800ac9a:	4630      	mov	r0, r6
 800ac9c:	f7ff ffda 	bl	800ac54 <__sfputc_r>
 800aca0:	1c43      	adds	r3, r0, #1
 800aca2:	d1f3      	bne.n	800ac8c <__sfputs_r+0xa>
 800aca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aca8 <_vfiprintf_r>:
 800aca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acac:	460d      	mov	r5, r1
 800acae:	b09d      	sub	sp, #116	; 0x74
 800acb0:	4614      	mov	r4, r2
 800acb2:	4698      	mov	r8, r3
 800acb4:	4606      	mov	r6, r0
 800acb6:	b118      	cbz	r0, 800acc0 <_vfiprintf_r+0x18>
 800acb8:	6a03      	ldr	r3, [r0, #32]
 800acba:	b90b      	cbnz	r3, 800acc0 <_vfiprintf_r+0x18>
 800acbc:	f7fd fd40 	bl	8008740 <__sinit>
 800acc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acc2:	07d9      	lsls	r1, r3, #31
 800acc4:	d405      	bmi.n	800acd2 <_vfiprintf_r+0x2a>
 800acc6:	89ab      	ldrh	r3, [r5, #12]
 800acc8:	059a      	lsls	r2, r3, #22
 800acca:	d402      	bmi.n	800acd2 <_vfiprintf_r+0x2a>
 800accc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acce:	f7fe f80a 	bl	8008ce6 <__retarget_lock_acquire_recursive>
 800acd2:	89ab      	ldrh	r3, [r5, #12]
 800acd4:	071b      	lsls	r3, r3, #28
 800acd6:	d501      	bpl.n	800acdc <_vfiprintf_r+0x34>
 800acd8:	692b      	ldr	r3, [r5, #16]
 800acda:	b99b      	cbnz	r3, 800ad04 <_vfiprintf_r+0x5c>
 800acdc:	4629      	mov	r1, r5
 800acde:	4630      	mov	r0, r6
 800ace0:	f7fd ff1a 	bl	8008b18 <__swsetup_r>
 800ace4:	b170      	cbz	r0, 800ad04 <_vfiprintf_r+0x5c>
 800ace6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ace8:	07dc      	lsls	r4, r3, #31
 800acea:	d504      	bpl.n	800acf6 <_vfiprintf_r+0x4e>
 800acec:	f04f 30ff 	mov.w	r0, #4294967295
 800acf0:	b01d      	add	sp, #116	; 0x74
 800acf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acf6:	89ab      	ldrh	r3, [r5, #12]
 800acf8:	0598      	lsls	r0, r3, #22
 800acfa:	d4f7      	bmi.n	800acec <_vfiprintf_r+0x44>
 800acfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acfe:	f7fd fff3 	bl	8008ce8 <__retarget_lock_release_recursive>
 800ad02:	e7f3      	b.n	800acec <_vfiprintf_r+0x44>
 800ad04:	2300      	movs	r3, #0
 800ad06:	9309      	str	r3, [sp, #36]	; 0x24
 800ad08:	2320      	movs	r3, #32
 800ad0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad12:	2330      	movs	r3, #48	; 0x30
 800ad14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800aec8 <_vfiprintf_r+0x220>
 800ad18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad1c:	f04f 0901 	mov.w	r9, #1
 800ad20:	4623      	mov	r3, r4
 800ad22:	469a      	mov	sl, r3
 800ad24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad28:	b10a      	cbz	r2, 800ad2e <_vfiprintf_r+0x86>
 800ad2a:	2a25      	cmp	r2, #37	; 0x25
 800ad2c:	d1f9      	bne.n	800ad22 <_vfiprintf_r+0x7a>
 800ad2e:	ebba 0b04 	subs.w	fp, sl, r4
 800ad32:	d00b      	beq.n	800ad4c <_vfiprintf_r+0xa4>
 800ad34:	465b      	mov	r3, fp
 800ad36:	4622      	mov	r2, r4
 800ad38:	4629      	mov	r1, r5
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	f7ff ffa1 	bl	800ac82 <__sfputs_r>
 800ad40:	3001      	adds	r0, #1
 800ad42:	f000 80a9 	beq.w	800ae98 <_vfiprintf_r+0x1f0>
 800ad46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad48:	445a      	add	r2, fp
 800ad4a:	9209      	str	r2, [sp, #36]	; 0x24
 800ad4c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	f000 80a1 	beq.w	800ae98 <_vfiprintf_r+0x1f0>
 800ad56:	2300      	movs	r3, #0
 800ad58:	f04f 32ff 	mov.w	r2, #4294967295
 800ad5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad60:	f10a 0a01 	add.w	sl, sl, #1
 800ad64:	9304      	str	r3, [sp, #16]
 800ad66:	9307      	str	r3, [sp, #28]
 800ad68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad6c:	931a      	str	r3, [sp, #104]	; 0x68
 800ad6e:	4654      	mov	r4, sl
 800ad70:	2205      	movs	r2, #5
 800ad72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad76:	4854      	ldr	r0, [pc, #336]	; (800aec8 <_vfiprintf_r+0x220>)
 800ad78:	f7f5 fa3a 	bl	80001f0 <memchr>
 800ad7c:	9a04      	ldr	r2, [sp, #16]
 800ad7e:	b9d8      	cbnz	r0, 800adb8 <_vfiprintf_r+0x110>
 800ad80:	06d1      	lsls	r1, r2, #27
 800ad82:	bf44      	itt	mi
 800ad84:	2320      	movmi	r3, #32
 800ad86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad8a:	0713      	lsls	r3, r2, #28
 800ad8c:	bf44      	itt	mi
 800ad8e:	232b      	movmi	r3, #43	; 0x2b
 800ad90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad94:	f89a 3000 	ldrb.w	r3, [sl]
 800ad98:	2b2a      	cmp	r3, #42	; 0x2a
 800ad9a:	d015      	beq.n	800adc8 <_vfiprintf_r+0x120>
 800ad9c:	9a07      	ldr	r2, [sp, #28]
 800ad9e:	4654      	mov	r4, sl
 800ada0:	2000      	movs	r0, #0
 800ada2:	f04f 0c0a 	mov.w	ip, #10
 800ada6:	4621      	mov	r1, r4
 800ada8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adac:	3b30      	subs	r3, #48	; 0x30
 800adae:	2b09      	cmp	r3, #9
 800adb0:	d94d      	bls.n	800ae4e <_vfiprintf_r+0x1a6>
 800adb2:	b1b0      	cbz	r0, 800ade2 <_vfiprintf_r+0x13a>
 800adb4:	9207      	str	r2, [sp, #28]
 800adb6:	e014      	b.n	800ade2 <_vfiprintf_r+0x13a>
 800adb8:	eba0 0308 	sub.w	r3, r0, r8
 800adbc:	fa09 f303 	lsl.w	r3, r9, r3
 800adc0:	4313      	orrs	r3, r2
 800adc2:	9304      	str	r3, [sp, #16]
 800adc4:	46a2      	mov	sl, r4
 800adc6:	e7d2      	b.n	800ad6e <_vfiprintf_r+0xc6>
 800adc8:	9b03      	ldr	r3, [sp, #12]
 800adca:	1d19      	adds	r1, r3, #4
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	9103      	str	r1, [sp, #12]
 800add0:	2b00      	cmp	r3, #0
 800add2:	bfbb      	ittet	lt
 800add4:	425b      	neglt	r3, r3
 800add6:	f042 0202 	orrlt.w	r2, r2, #2
 800adda:	9307      	strge	r3, [sp, #28]
 800addc:	9307      	strlt	r3, [sp, #28]
 800adde:	bfb8      	it	lt
 800ade0:	9204      	strlt	r2, [sp, #16]
 800ade2:	7823      	ldrb	r3, [r4, #0]
 800ade4:	2b2e      	cmp	r3, #46	; 0x2e
 800ade6:	d10c      	bne.n	800ae02 <_vfiprintf_r+0x15a>
 800ade8:	7863      	ldrb	r3, [r4, #1]
 800adea:	2b2a      	cmp	r3, #42	; 0x2a
 800adec:	d134      	bne.n	800ae58 <_vfiprintf_r+0x1b0>
 800adee:	9b03      	ldr	r3, [sp, #12]
 800adf0:	1d1a      	adds	r2, r3, #4
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	9203      	str	r2, [sp, #12]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	bfb8      	it	lt
 800adfa:	f04f 33ff 	movlt.w	r3, #4294967295
 800adfe:	3402      	adds	r4, #2
 800ae00:	9305      	str	r3, [sp, #20]
 800ae02:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800aed8 <_vfiprintf_r+0x230>
 800ae06:	7821      	ldrb	r1, [r4, #0]
 800ae08:	2203      	movs	r2, #3
 800ae0a:	4650      	mov	r0, sl
 800ae0c:	f7f5 f9f0 	bl	80001f0 <memchr>
 800ae10:	b138      	cbz	r0, 800ae22 <_vfiprintf_r+0x17a>
 800ae12:	9b04      	ldr	r3, [sp, #16]
 800ae14:	eba0 000a 	sub.w	r0, r0, sl
 800ae18:	2240      	movs	r2, #64	; 0x40
 800ae1a:	4082      	lsls	r2, r0
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	3401      	adds	r4, #1
 800ae20:	9304      	str	r3, [sp, #16]
 800ae22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae26:	4829      	ldr	r0, [pc, #164]	; (800aecc <_vfiprintf_r+0x224>)
 800ae28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae2c:	2206      	movs	r2, #6
 800ae2e:	f7f5 f9df 	bl	80001f0 <memchr>
 800ae32:	2800      	cmp	r0, #0
 800ae34:	d03f      	beq.n	800aeb6 <_vfiprintf_r+0x20e>
 800ae36:	4b26      	ldr	r3, [pc, #152]	; (800aed0 <_vfiprintf_r+0x228>)
 800ae38:	bb1b      	cbnz	r3, 800ae82 <_vfiprintf_r+0x1da>
 800ae3a:	9b03      	ldr	r3, [sp, #12]
 800ae3c:	3307      	adds	r3, #7
 800ae3e:	f023 0307 	bic.w	r3, r3, #7
 800ae42:	3308      	adds	r3, #8
 800ae44:	9303      	str	r3, [sp, #12]
 800ae46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae48:	443b      	add	r3, r7
 800ae4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae4c:	e768      	b.n	800ad20 <_vfiprintf_r+0x78>
 800ae4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae52:	460c      	mov	r4, r1
 800ae54:	2001      	movs	r0, #1
 800ae56:	e7a6      	b.n	800ada6 <_vfiprintf_r+0xfe>
 800ae58:	2300      	movs	r3, #0
 800ae5a:	3401      	adds	r4, #1
 800ae5c:	9305      	str	r3, [sp, #20]
 800ae5e:	4619      	mov	r1, r3
 800ae60:	f04f 0c0a 	mov.w	ip, #10
 800ae64:	4620      	mov	r0, r4
 800ae66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae6a:	3a30      	subs	r2, #48	; 0x30
 800ae6c:	2a09      	cmp	r2, #9
 800ae6e:	d903      	bls.n	800ae78 <_vfiprintf_r+0x1d0>
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d0c6      	beq.n	800ae02 <_vfiprintf_r+0x15a>
 800ae74:	9105      	str	r1, [sp, #20]
 800ae76:	e7c4      	b.n	800ae02 <_vfiprintf_r+0x15a>
 800ae78:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae7c:	4604      	mov	r4, r0
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e7f0      	b.n	800ae64 <_vfiprintf_r+0x1bc>
 800ae82:	ab03      	add	r3, sp, #12
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	462a      	mov	r2, r5
 800ae88:	4b12      	ldr	r3, [pc, #72]	; (800aed4 <_vfiprintf_r+0x22c>)
 800ae8a:	a904      	add	r1, sp, #16
 800ae8c:	4630      	mov	r0, r6
 800ae8e:	f7fc ff43 	bl	8007d18 <_printf_float>
 800ae92:	4607      	mov	r7, r0
 800ae94:	1c78      	adds	r0, r7, #1
 800ae96:	d1d6      	bne.n	800ae46 <_vfiprintf_r+0x19e>
 800ae98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae9a:	07d9      	lsls	r1, r3, #31
 800ae9c:	d405      	bmi.n	800aeaa <_vfiprintf_r+0x202>
 800ae9e:	89ab      	ldrh	r3, [r5, #12]
 800aea0:	059a      	lsls	r2, r3, #22
 800aea2:	d402      	bmi.n	800aeaa <_vfiprintf_r+0x202>
 800aea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aea6:	f7fd ff1f 	bl	8008ce8 <__retarget_lock_release_recursive>
 800aeaa:	89ab      	ldrh	r3, [r5, #12]
 800aeac:	065b      	lsls	r3, r3, #25
 800aeae:	f53f af1d 	bmi.w	800acec <_vfiprintf_r+0x44>
 800aeb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aeb4:	e71c      	b.n	800acf0 <_vfiprintf_r+0x48>
 800aeb6:	ab03      	add	r3, sp, #12
 800aeb8:	9300      	str	r3, [sp, #0]
 800aeba:	462a      	mov	r2, r5
 800aebc:	4b05      	ldr	r3, [pc, #20]	; (800aed4 <_vfiprintf_r+0x22c>)
 800aebe:	a904      	add	r1, sp, #16
 800aec0:	4630      	mov	r0, r6
 800aec2:	f7fd f9cd 	bl	8008260 <_printf_i>
 800aec6:	e7e4      	b.n	800ae92 <_vfiprintf_r+0x1ea>
 800aec8:	0800d665 	.word	0x0800d665
 800aecc:	0800d66f 	.word	0x0800d66f
 800aed0:	08007d19 	.word	0x08007d19
 800aed4:	0800ac83 	.word	0x0800ac83
 800aed8:	0800d66b 	.word	0x0800d66b

0800aedc <__svfiscanf_r>:
 800aedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aee0:	461d      	mov	r5, r3
 800aee2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800aee4:	07df      	lsls	r7, r3, #31
 800aee6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800aeea:	4606      	mov	r6, r0
 800aeec:	460c      	mov	r4, r1
 800aeee:	4692      	mov	sl, r2
 800aef0:	d405      	bmi.n	800aefe <__svfiscanf_r+0x22>
 800aef2:	898b      	ldrh	r3, [r1, #12]
 800aef4:	0598      	lsls	r0, r3, #22
 800aef6:	d402      	bmi.n	800aefe <__svfiscanf_r+0x22>
 800aef8:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800aefa:	f7fd fef4 	bl	8008ce6 <__retarget_lock_acquire_recursive>
 800aefe:	2300      	movs	r3, #0
 800af00:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800af04:	4baa      	ldr	r3, [pc, #680]	; (800b1b0 <__svfiscanf_r+0x2d4>)
 800af06:	93a0      	str	r3, [sp, #640]	; 0x280
 800af08:	f10d 0804 	add.w	r8, sp, #4
 800af0c:	4ba9      	ldr	r3, [pc, #676]	; (800b1b4 <__svfiscanf_r+0x2d8>)
 800af0e:	4faa      	ldr	r7, [pc, #680]	; (800b1b8 <__svfiscanf_r+0x2dc>)
 800af10:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 800b1bc <__svfiscanf_r+0x2e0>
 800af14:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800af18:	93a1      	str	r3, [sp, #644]	; 0x284
 800af1a:	9500      	str	r5, [sp, #0]
 800af1c:	f89a 3000 	ldrb.w	r3, [sl]
 800af20:	2b00      	cmp	r3, #0
 800af22:	f000 8170 	beq.w	800b206 <__svfiscanf_r+0x32a>
 800af26:	5cf9      	ldrb	r1, [r7, r3]
 800af28:	f011 0108 	ands.w	r1, r1, #8
 800af2c:	f10a 0501 	add.w	r5, sl, #1
 800af30:	d019      	beq.n	800af66 <__svfiscanf_r+0x8a>
 800af32:	6863      	ldr	r3, [r4, #4]
 800af34:	2b00      	cmp	r3, #0
 800af36:	dd0f      	ble.n	800af58 <__svfiscanf_r+0x7c>
 800af38:	6823      	ldr	r3, [r4, #0]
 800af3a:	781a      	ldrb	r2, [r3, #0]
 800af3c:	5cba      	ldrb	r2, [r7, r2]
 800af3e:	0711      	lsls	r1, r2, #28
 800af40:	d401      	bmi.n	800af46 <__svfiscanf_r+0x6a>
 800af42:	46aa      	mov	sl, r5
 800af44:	e7ea      	b.n	800af1c <__svfiscanf_r+0x40>
 800af46:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800af48:	3201      	adds	r2, #1
 800af4a:	9245      	str	r2, [sp, #276]	; 0x114
 800af4c:	6862      	ldr	r2, [r4, #4]
 800af4e:	3301      	adds	r3, #1
 800af50:	3a01      	subs	r2, #1
 800af52:	6062      	str	r2, [r4, #4]
 800af54:	6023      	str	r3, [r4, #0]
 800af56:	e7ec      	b.n	800af32 <__svfiscanf_r+0x56>
 800af58:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800af5a:	4621      	mov	r1, r4
 800af5c:	4630      	mov	r0, r6
 800af5e:	4798      	blx	r3
 800af60:	2800      	cmp	r0, #0
 800af62:	d0e9      	beq.n	800af38 <__svfiscanf_r+0x5c>
 800af64:	e7ed      	b.n	800af42 <__svfiscanf_r+0x66>
 800af66:	2b25      	cmp	r3, #37	; 0x25
 800af68:	d012      	beq.n	800af90 <__svfiscanf_r+0xb4>
 800af6a:	469a      	mov	sl, r3
 800af6c:	6863      	ldr	r3, [r4, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	f340 8093 	ble.w	800b09a <__svfiscanf_r+0x1be>
 800af74:	6822      	ldr	r2, [r4, #0]
 800af76:	7813      	ldrb	r3, [r2, #0]
 800af78:	4553      	cmp	r3, sl
 800af7a:	f040 8144 	bne.w	800b206 <__svfiscanf_r+0x32a>
 800af7e:	6863      	ldr	r3, [r4, #4]
 800af80:	3b01      	subs	r3, #1
 800af82:	6063      	str	r3, [r4, #4]
 800af84:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800af86:	3201      	adds	r2, #1
 800af88:	3301      	adds	r3, #1
 800af8a:	6022      	str	r2, [r4, #0]
 800af8c:	9345      	str	r3, [sp, #276]	; 0x114
 800af8e:	e7d8      	b.n	800af42 <__svfiscanf_r+0x66>
 800af90:	9141      	str	r1, [sp, #260]	; 0x104
 800af92:	9143      	str	r1, [sp, #268]	; 0x10c
 800af94:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800af98:	2b2a      	cmp	r3, #42	; 0x2a
 800af9a:	bf02      	ittt	eq
 800af9c:	2310      	moveq	r3, #16
 800af9e:	9341      	streq	r3, [sp, #260]	; 0x104
 800afa0:	f10a 0502 	addeq.w	r5, sl, #2
 800afa4:	220a      	movs	r2, #10
 800afa6:	46aa      	mov	sl, r5
 800afa8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800afac:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800afb0:	2b09      	cmp	r3, #9
 800afb2:	d91d      	bls.n	800aff0 <__svfiscanf_r+0x114>
 800afb4:	4881      	ldr	r0, [pc, #516]	; (800b1bc <__svfiscanf_r+0x2e0>)
 800afb6:	2203      	movs	r2, #3
 800afb8:	f7f5 f91a 	bl	80001f0 <memchr>
 800afbc:	b138      	cbz	r0, 800afce <__svfiscanf_r+0xf2>
 800afbe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800afc0:	eba0 0009 	sub.w	r0, r0, r9
 800afc4:	2301      	movs	r3, #1
 800afc6:	4083      	lsls	r3, r0
 800afc8:	4313      	orrs	r3, r2
 800afca:	9341      	str	r3, [sp, #260]	; 0x104
 800afcc:	4655      	mov	r5, sl
 800afce:	f815 3b01 	ldrb.w	r3, [r5], #1
 800afd2:	2b78      	cmp	r3, #120	; 0x78
 800afd4:	d807      	bhi.n	800afe6 <__svfiscanf_r+0x10a>
 800afd6:	2b57      	cmp	r3, #87	; 0x57
 800afd8:	d811      	bhi.n	800affe <__svfiscanf_r+0x122>
 800afda:	2b25      	cmp	r3, #37	; 0x25
 800afdc:	d0c5      	beq.n	800af6a <__svfiscanf_r+0x8e>
 800afde:	d857      	bhi.n	800b090 <__svfiscanf_r+0x1b4>
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f000 80c6 	beq.w	800b172 <__svfiscanf_r+0x296>
 800afe6:	2303      	movs	r3, #3
 800afe8:	9347      	str	r3, [sp, #284]	; 0x11c
 800afea:	230a      	movs	r3, #10
 800afec:	9342      	str	r3, [sp, #264]	; 0x108
 800afee:	e07f      	b.n	800b0f0 <__svfiscanf_r+0x214>
 800aff0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800aff2:	fb02 1103 	mla	r1, r2, r3, r1
 800aff6:	3930      	subs	r1, #48	; 0x30
 800aff8:	9143      	str	r1, [sp, #268]	; 0x10c
 800affa:	4655      	mov	r5, sl
 800affc:	e7d3      	b.n	800afa6 <__svfiscanf_r+0xca>
 800affe:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b002:	2a20      	cmp	r2, #32
 800b004:	d8ef      	bhi.n	800afe6 <__svfiscanf_r+0x10a>
 800b006:	a101      	add	r1, pc, #4	; (adr r1, 800b00c <__svfiscanf_r+0x130>)
 800b008:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b00c:	0800b0d3 	.word	0x0800b0d3
 800b010:	0800afe7 	.word	0x0800afe7
 800b014:	0800afe7 	.word	0x0800afe7
 800b018:	0800b131 	.word	0x0800b131
 800b01c:	0800afe7 	.word	0x0800afe7
 800b020:	0800afe7 	.word	0x0800afe7
 800b024:	0800afe7 	.word	0x0800afe7
 800b028:	0800afe7 	.word	0x0800afe7
 800b02c:	0800afe7 	.word	0x0800afe7
 800b030:	0800afe7 	.word	0x0800afe7
 800b034:	0800afe7 	.word	0x0800afe7
 800b038:	0800b147 	.word	0x0800b147
 800b03c:	0800b12d 	.word	0x0800b12d
 800b040:	0800b097 	.word	0x0800b097
 800b044:	0800b097 	.word	0x0800b097
 800b048:	0800b097 	.word	0x0800b097
 800b04c:	0800afe7 	.word	0x0800afe7
 800b050:	0800b0e9 	.word	0x0800b0e9
 800b054:	0800afe7 	.word	0x0800afe7
 800b058:	0800afe7 	.word	0x0800afe7
 800b05c:	0800afe7 	.word	0x0800afe7
 800b060:	0800afe7 	.word	0x0800afe7
 800b064:	0800b157 	.word	0x0800b157
 800b068:	0800b125 	.word	0x0800b125
 800b06c:	0800b0cb 	.word	0x0800b0cb
 800b070:	0800afe7 	.word	0x0800afe7
 800b074:	0800afe7 	.word	0x0800afe7
 800b078:	0800b153 	.word	0x0800b153
 800b07c:	0800afe7 	.word	0x0800afe7
 800b080:	0800b12d 	.word	0x0800b12d
 800b084:	0800afe7 	.word	0x0800afe7
 800b088:	0800afe7 	.word	0x0800afe7
 800b08c:	0800b0d3 	.word	0x0800b0d3
 800b090:	3b45      	subs	r3, #69	; 0x45
 800b092:	2b02      	cmp	r3, #2
 800b094:	d8a7      	bhi.n	800afe6 <__svfiscanf_r+0x10a>
 800b096:	2305      	movs	r3, #5
 800b098:	e029      	b.n	800b0ee <__svfiscanf_r+0x212>
 800b09a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b09c:	4621      	mov	r1, r4
 800b09e:	4630      	mov	r0, r6
 800b0a0:	4798      	blx	r3
 800b0a2:	2800      	cmp	r0, #0
 800b0a4:	f43f af66 	beq.w	800af74 <__svfiscanf_r+0x98>
 800b0a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0aa:	07da      	lsls	r2, r3, #31
 800b0ac:	f140 80a3 	bpl.w	800b1f6 <__svfiscanf_r+0x31a>
 800b0b0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b0b2:	2800      	cmp	r0, #0
 800b0b4:	d066      	beq.n	800b184 <__svfiscanf_r+0x2a8>
 800b0b6:	89a3      	ldrh	r3, [r4, #12]
 800b0b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b0bc:	bf18      	it	ne
 800b0be:	f04f 30ff 	movne.w	r0, #4294967295
 800b0c2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b0cc:	f042 0220 	orr.w	r2, r2, #32
 800b0d0:	9241      	str	r2, [sp, #260]	; 0x104
 800b0d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b0d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0d8:	9241      	str	r2, [sp, #260]	; 0x104
 800b0da:	2210      	movs	r2, #16
 800b0dc:	2b6f      	cmp	r3, #111	; 0x6f
 800b0de:	9242      	str	r2, [sp, #264]	; 0x108
 800b0e0:	bf34      	ite	cc
 800b0e2:	2303      	movcc	r3, #3
 800b0e4:	2304      	movcs	r3, #4
 800b0e6:	e002      	b.n	800b0ee <__svfiscanf_r+0x212>
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	9342      	str	r3, [sp, #264]	; 0x108
 800b0ec:	2303      	movs	r3, #3
 800b0ee:	9347      	str	r3, [sp, #284]	; 0x11c
 800b0f0:	6863      	ldr	r3, [r4, #4]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	dd49      	ble.n	800b18a <__svfiscanf_r+0x2ae>
 800b0f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b0f8:	065b      	lsls	r3, r3, #25
 800b0fa:	d404      	bmi.n	800b106 <__svfiscanf_r+0x22a>
 800b0fc:	6823      	ldr	r3, [r4, #0]
 800b0fe:	781a      	ldrb	r2, [r3, #0]
 800b100:	5cba      	ldrb	r2, [r7, r2]
 800b102:	0710      	lsls	r0, r2, #28
 800b104:	d448      	bmi.n	800b198 <__svfiscanf_r+0x2bc>
 800b106:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b108:	2b02      	cmp	r3, #2
 800b10a:	dc60      	bgt.n	800b1ce <__svfiscanf_r+0x2f2>
 800b10c:	466b      	mov	r3, sp
 800b10e:	4622      	mov	r2, r4
 800b110:	a941      	add	r1, sp, #260	; 0x104
 800b112:	4630      	mov	r0, r6
 800b114:	f000 f898 	bl	800b248 <_scanf_chars>
 800b118:	2801      	cmp	r0, #1
 800b11a:	d074      	beq.n	800b206 <__svfiscanf_r+0x32a>
 800b11c:	2802      	cmp	r0, #2
 800b11e:	f47f af10 	bne.w	800af42 <__svfiscanf_r+0x66>
 800b122:	e7c1      	b.n	800b0a8 <__svfiscanf_r+0x1cc>
 800b124:	2308      	movs	r3, #8
 800b126:	9342      	str	r3, [sp, #264]	; 0x108
 800b128:	2304      	movs	r3, #4
 800b12a:	e7e0      	b.n	800b0ee <__svfiscanf_r+0x212>
 800b12c:	220a      	movs	r2, #10
 800b12e:	e7d5      	b.n	800b0dc <__svfiscanf_r+0x200>
 800b130:	4629      	mov	r1, r5
 800b132:	4640      	mov	r0, r8
 800b134:	f000 faf2 	bl	800b71c <__sccl>
 800b138:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b13a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b13e:	9341      	str	r3, [sp, #260]	; 0x104
 800b140:	4605      	mov	r5, r0
 800b142:	2301      	movs	r3, #1
 800b144:	e7d3      	b.n	800b0ee <__svfiscanf_r+0x212>
 800b146:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b14c:	9341      	str	r3, [sp, #260]	; 0x104
 800b14e:	2300      	movs	r3, #0
 800b150:	e7cd      	b.n	800b0ee <__svfiscanf_r+0x212>
 800b152:	2302      	movs	r3, #2
 800b154:	e7cb      	b.n	800b0ee <__svfiscanf_r+0x212>
 800b156:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b158:	06c3      	lsls	r3, r0, #27
 800b15a:	f53f aef2 	bmi.w	800af42 <__svfiscanf_r+0x66>
 800b15e:	9b00      	ldr	r3, [sp, #0]
 800b160:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b162:	1d19      	adds	r1, r3, #4
 800b164:	9100      	str	r1, [sp, #0]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	07c0      	lsls	r0, r0, #31
 800b16a:	bf4c      	ite	mi
 800b16c:	801a      	strhmi	r2, [r3, #0]
 800b16e:	601a      	strpl	r2, [r3, #0]
 800b170:	e6e7      	b.n	800af42 <__svfiscanf_r+0x66>
 800b172:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b174:	07d8      	lsls	r0, r3, #31
 800b176:	d405      	bmi.n	800b184 <__svfiscanf_r+0x2a8>
 800b178:	89a3      	ldrh	r3, [r4, #12]
 800b17a:	0599      	lsls	r1, r3, #22
 800b17c:	d402      	bmi.n	800b184 <__svfiscanf_r+0x2a8>
 800b17e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b180:	f7fd fdb2 	bl	8008ce8 <__retarget_lock_release_recursive>
 800b184:	f04f 30ff 	mov.w	r0, #4294967295
 800b188:	e79b      	b.n	800b0c2 <__svfiscanf_r+0x1e6>
 800b18a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b18c:	4621      	mov	r1, r4
 800b18e:	4630      	mov	r0, r6
 800b190:	4798      	blx	r3
 800b192:	2800      	cmp	r0, #0
 800b194:	d0af      	beq.n	800b0f6 <__svfiscanf_r+0x21a>
 800b196:	e787      	b.n	800b0a8 <__svfiscanf_r+0x1cc>
 800b198:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b19a:	3201      	adds	r2, #1
 800b19c:	9245      	str	r2, [sp, #276]	; 0x114
 800b19e:	6862      	ldr	r2, [r4, #4]
 800b1a0:	3a01      	subs	r2, #1
 800b1a2:	2a00      	cmp	r2, #0
 800b1a4:	6062      	str	r2, [r4, #4]
 800b1a6:	dd0b      	ble.n	800b1c0 <__svfiscanf_r+0x2e4>
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	6023      	str	r3, [r4, #0]
 800b1ac:	e7a6      	b.n	800b0fc <__svfiscanf_r+0x220>
 800b1ae:	bf00      	nop
 800b1b0:	0800b803 	.word	0x0800b803
 800b1b4:	0800b62d 	.word	0x0800b62d
 800b1b8:	0800d565 	.word	0x0800d565
 800b1bc:	0800d66b 	.word	0x0800d66b
 800b1c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b1c2:	4621      	mov	r1, r4
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	4798      	blx	r3
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	d097      	beq.n	800b0fc <__svfiscanf_r+0x220>
 800b1cc:	e76c      	b.n	800b0a8 <__svfiscanf_r+0x1cc>
 800b1ce:	2b04      	cmp	r3, #4
 800b1d0:	dc06      	bgt.n	800b1e0 <__svfiscanf_r+0x304>
 800b1d2:	466b      	mov	r3, sp
 800b1d4:	4622      	mov	r2, r4
 800b1d6:	a941      	add	r1, sp, #260	; 0x104
 800b1d8:	4630      	mov	r0, r6
 800b1da:	f000 f88f 	bl	800b2fc <_scanf_i>
 800b1de:	e79b      	b.n	800b118 <__svfiscanf_r+0x23c>
 800b1e0:	4b0e      	ldr	r3, [pc, #56]	; (800b21c <__svfiscanf_r+0x340>)
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	f43f aead 	beq.w	800af42 <__svfiscanf_r+0x66>
 800b1e8:	466b      	mov	r3, sp
 800b1ea:	4622      	mov	r2, r4
 800b1ec:	a941      	add	r1, sp, #260	; 0x104
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	f3af 8000 	nop.w
 800b1f4:	e790      	b.n	800b118 <__svfiscanf_r+0x23c>
 800b1f6:	89a3      	ldrh	r3, [r4, #12]
 800b1f8:	0599      	lsls	r1, r3, #22
 800b1fa:	f53f af59 	bmi.w	800b0b0 <__svfiscanf_r+0x1d4>
 800b1fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b200:	f7fd fd72 	bl	8008ce8 <__retarget_lock_release_recursive>
 800b204:	e754      	b.n	800b0b0 <__svfiscanf_r+0x1d4>
 800b206:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b208:	07da      	lsls	r2, r3, #31
 800b20a:	d405      	bmi.n	800b218 <__svfiscanf_r+0x33c>
 800b20c:	89a3      	ldrh	r3, [r4, #12]
 800b20e:	059b      	lsls	r3, r3, #22
 800b210:	d402      	bmi.n	800b218 <__svfiscanf_r+0x33c>
 800b212:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b214:	f7fd fd68 	bl	8008ce8 <__retarget_lock_release_recursive>
 800b218:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b21a:	e752      	b.n	800b0c2 <__svfiscanf_r+0x1e6>
 800b21c:	00000000 	.word	0x00000000

0800b220 <_vfiscanf_r>:
 800b220:	b530      	push	{r4, r5, lr}
 800b222:	4604      	mov	r4, r0
 800b224:	b085      	sub	sp, #20
 800b226:	b148      	cbz	r0, 800b23c <_vfiscanf_r+0x1c>
 800b228:	6a05      	ldr	r5, [r0, #32]
 800b22a:	b93d      	cbnz	r5, 800b23c <_vfiscanf_r+0x1c>
 800b22c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b230:	9101      	str	r1, [sp, #4]
 800b232:	f7fd fa85 	bl	8008740 <__sinit>
 800b236:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b23a:	9901      	ldr	r1, [sp, #4]
 800b23c:	4620      	mov	r0, r4
 800b23e:	b005      	add	sp, #20
 800b240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b244:	f7ff be4a 	b.w	800aedc <__svfiscanf_r>

0800b248 <_scanf_chars>:
 800b248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b24c:	4615      	mov	r5, r2
 800b24e:	688a      	ldr	r2, [r1, #8]
 800b250:	4680      	mov	r8, r0
 800b252:	460c      	mov	r4, r1
 800b254:	b932      	cbnz	r2, 800b264 <_scanf_chars+0x1c>
 800b256:	698a      	ldr	r2, [r1, #24]
 800b258:	2a00      	cmp	r2, #0
 800b25a:	bf0c      	ite	eq
 800b25c:	2201      	moveq	r2, #1
 800b25e:	f04f 32ff 	movne.w	r2, #4294967295
 800b262:	608a      	str	r2, [r1, #8]
 800b264:	6822      	ldr	r2, [r4, #0]
 800b266:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b2f8 <_scanf_chars+0xb0>
 800b26a:	06d1      	lsls	r1, r2, #27
 800b26c:	bf5f      	itttt	pl
 800b26e:	681a      	ldrpl	r2, [r3, #0]
 800b270:	1d11      	addpl	r1, r2, #4
 800b272:	6019      	strpl	r1, [r3, #0]
 800b274:	6816      	ldrpl	r6, [r2, #0]
 800b276:	2700      	movs	r7, #0
 800b278:	69a0      	ldr	r0, [r4, #24]
 800b27a:	b188      	cbz	r0, 800b2a0 <_scanf_chars+0x58>
 800b27c:	2801      	cmp	r0, #1
 800b27e:	d107      	bne.n	800b290 <_scanf_chars+0x48>
 800b280:	682a      	ldr	r2, [r5, #0]
 800b282:	7811      	ldrb	r1, [r2, #0]
 800b284:	6962      	ldr	r2, [r4, #20]
 800b286:	5c52      	ldrb	r2, [r2, r1]
 800b288:	b952      	cbnz	r2, 800b2a0 <_scanf_chars+0x58>
 800b28a:	2f00      	cmp	r7, #0
 800b28c:	d031      	beq.n	800b2f2 <_scanf_chars+0xaa>
 800b28e:	e022      	b.n	800b2d6 <_scanf_chars+0x8e>
 800b290:	2802      	cmp	r0, #2
 800b292:	d120      	bne.n	800b2d6 <_scanf_chars+0x8e>
 800b294:	682b      	ldr	r3, [r5, #0]
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b29c:	071b      	lsls	r3, r3, #28
 800b29e:	d41a      	bmi.n	800b2d6 <_scanf_chars+0x8e>
 800b2a0:	6823      	ldr	r3, [r4, #0]
 800b2a2:	06da      	lsls	r2, r3, #27
 800b2a4:	bf5e      	ittt	pl
 800b2a6:	682b      	ldrpl	r3, [r5, #0]
 800b2a8:	781b      	ldrbpl	r3, [r3, #0]
 800b2aa:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b2ae:	682a      	ldr	r2, [r5, #0]
 800b2b0:	686b      	ldr	r3, [r5, #4]
 800b2b2:	3201      	adds	r2, #1
 800b2b4:	602a      	str	r2, [r5, #0]
 800b2b6:	68a2      	ldr	r2, [r4, #8]
 800b2b8:	3b01      	subs	r3, #1
 800b2ba:	3a01      	subs	r2, #1
 800b2bc:	606b      	str	r3, [r5, #4]
 800b2be:	3701      	adds	r7, #1
 800b2c0:	60a2      	str	r2, [r4, #8]
 800b2c2:	b142      	cbz	r2, 800b2d6 <_scanf_chars+0x8e>
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	dcd7      	bgt.n	800b278 <_scanf_chars+0x30>
 800b2c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b2cc:	4629      	mov	r1, r5
 800b2ce:	4640      	mov	r0, r8
 800b2d0:	4798      	blx	r3
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	d0d0      	beq.n	800b278 <_scanf_chars+0x30>
 800b2d6:	6823      	ldr	r3, [r4, #0]
 800b2d8:	f013 0310 	ands.w	r3, r3, #16
 800b2dc:	d105      	bne.n	800b2ea <_scanf_chars+0xa2>
 800b2de:	68e2      	ldr	r2, [r4, #12]
 800b2e0:	3201      	adds	r2, #1
 800b2e2:	60e2      	str	r2, [r4, #12]
 800b2e4:	69a2      	ldr	r2, [r4, #24]
 800b2e6:	b102      	cbz	r2, 800b2ea <_scanf_chars+0xa2>
 800b2e8:	7033      	strb	r3, [r6, #0]
 800b2ea:	6923      	ldr	r3, [r4, #16]
 800b2ec:	443b      	add	r3, r7
 800b2ee:	6123      	str	r3, [r4, #16]
 800b2f0:	2000      	movs	r0, #0
 800b2f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2f6:	bf00      	nop
 800b2f8:	0800d565 	.word	0x0800d565

0800b2fc <_scanf_i>:
 800b2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b300:	4698      	mov	r8, r3
 800b302:	4b74      	ldr	r3, [pc, #464]	; (800b4d4 <_scanf_i+0x1d8>)
 800b304:	460c      	mov	r4, r1
 800b306:	4682      	mov	sl, r0
 800b308:	4616      	mov	r6, r2
 800b30a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b30e:	b087      	sub	sp, #28
 800b310:	ab03      	add	r3, sp, #12
 800b312:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b316:	4b70      	ldr	r3, [pc, #448]	; (800b4d8 <_scanf_i+0x1dc>)
 800b318:	69a1      	ldr	r1, [r4, #24]
 800b31a:	4a70      	ldr	r2, [pc, #448]	; (800b4dc <_scanf_i+0x1e0>)
 800b31c:	2903      	cmp	r1, #3
 800b31e:	bf18      	it	ne
 800b320:	461a      	movne	r2, r3
 800b322:	68a3      	ldr	r3, [r4, #8]
 800b324:	9201      	str	r2, [sp, #4]
 800b326:	1e5a      	subs	r2, r3, #1
 800b328:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b32c:	bf88      	it	hi
 800b32e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b332:	4627      	mov	r7, r4
 800b334:	bf82      	ittt	hi
 800b336:	eb03 0905 	addhi.w	r9, r3, r5
 800b33a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b33e:	60a3      	strhi	r3, [r4, #8]
 800b340:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b344:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b348:	bf98      	it	ls
 800b34a:	f04f 0900 	movls.w	r9, #0
 800b34e:	6023      	str	r3, [r4, #0]
 800b350:	463d      	mov	r5, r7
 800b352:	f04f 0b00 	mov.w	fp, #0
 800b356:	6831      	ldr	r1, [r6, #0]
 800b358:	ab03      	add	r3, sp, #12
 800b35a:	7809      	ldrb	r1, [r1, #0]
 800b35c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b360:	2202      	movs	r2, #2
 800b362:	f7f4 ff45 	bl	80001f0 <memchr>
 800b366:	b328      	cbz	r0, 800b3b4 <_scanf_i+0xb8>
 800b368:	f1bb 0f01 	cmp.w	fp, #1
 800b36c:	d159      	bne.n	800b422 <_scanf_i+0x126>
 800b36e:	6862      	ldr	r2, [r4, #4]
 800b370:	b92a      	cbnz	r2, 800b37e <_scanf_i+0x82>
 800b372:	6822      	ldr	r2, [r4, #0]
 800b374:	2308      	movs	r3, #8
 800b376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b37a:	6063      	str	r3, [r4, #4]
 800b37c:	6022      	str	r2, [r4, #0]
 800b37e:	6822      	ldr	r2, [r4, #0]
 800b380:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b384:	6022      	str	r2, [r4, #0]
 800b386:	68a2      	ldr	r2, [r4, #8]
 800b388:	1e51      	subs	r1, r2, #1
 800b38a:	60a1      	str	r1, [r4, #8]
 800b38c:	b192      	cbz	r2, 800b3b4 <_scanf_i+0xb8>
 800b38e:	6832      	ldr	r2, [r6, #0]
 800b390:	1c51      	adds	r1, r2, #1
 800b392:	6031      	str	r1, [r6, #0]
 800b394:	7812      	ldrb	r2, [r2, #0]
 800b396:	f805 2b01 	strb.w	r2, [r5], #1
 800b39a:	6872      	ldr	r2, [r6, #4]
 800b39c:	3a01      	subs	r2, #1
 800b39e:	2a00      	cmp	r2, #0
 800b3a0:	6072      	str	r2, [r6, #4]
 800b3a2:	dc07      	bgt.n	800b3b4 <_scanf_i+0xb8>
 800b3a4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b3a8:	4631      	mov	r1, r6
 800b3aa:	4650      	mov	r0, sl
 800b3ac:	4790      	blx	r2
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	f040 8085 	bne.w	800b4be <_scanf_i+0x1c2>
 800b3b4:	f10b 0b01 	add.w	fp, fp, #1
 800b3b8:	f1bb 0f03 	cmp.w	fp, #3
 800b3bc:	d1cb      	bne.n	800b356 <_scanf_i+0x5a>
 800b3be:	6863      	ldr	r3, [r4, #4]
 800b3c0:	b90b      	cbnz	r3, 800b3c6 <_scanf_i+0xca>
 800b3c2:	230a      	movs	r3, #10
 800b3c4:	6063      	str	r3, [r4, #4]
 800b3c6:	6863      	ldr	r3, [r4, #4]
 800b3c8:	4945      	ldr	r1, [pc, #276]	; (800b4e0 <_scanf_i+0x1e4>)
 800b3ca:	6960      	ldr	r0, [r4, #20]
 800b3cc:	1ac9      	subs	r1, r1, r3
 800b3ce:	f000 f9a5 	bl	800b71c <__sccl>
 800b3d2:	f04f 0b00 	mov.w	fp, #0
 800b3d6:	68a3      	ldr	r3, [r4, #8]
 800b3d8:	6822      	ldr	r2, [r4, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d03d      	beq.n	800b45a <_scanf_i+0x15e>
 800b3de:	6831      	ldr	r1, [r6, #0]
 800b3e0:	6960      	ldr	r0, [r4, #20]
 800b3e2:	f891 c000 	ldrb.w	ip, [r1]
 800b3e6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	d035      	beq.n	800b45a <_scanf_i+0x15e>
 800b3ee:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b3f2:	d124      	bne.n	800b43e <_scanf_i+0x142>
 800b3f4:	0510      	lsls	r0, r2, #20
 800b3f6:	d522      	bpl.n	800b43e <_scanf_i+0x142>
 800b3f8:	f10b 0b01 	add.w	fp, fp, #1
 800b3fc:	f1b9 0f00 	cmp.w	r9, #0
 800b400:	d003      	beq.n	800b40a <_scanf_i+0x10e>
 800b402:	3301      	adds	r3, #1
 800b404:	f109 39ff 	add.w	r9, r9, #4294967295
 800b408:	60a3      	str	r3, [r4, #8]
 800b40a:	6873      	ldr	r3, [r6, #4]
 800b40c:	3b01      	subs	r3, #1
 800b40e:	2b00      	cmp	r3, #0
 800b410:	6073      	str	r3, [r6, #4]
 800b412:	dd1b      	ble.n	800b44c <_scanf_i+0x150>
 800b414:	6833      	ldr	r3, [r6, #0]
 800b416:	3301      	adds	r3, #1
 800b418:	6033      	str	r3, [r6, #0]
 800b41a:	68a3      	ldr	r3, [r4, #8]
 800b41c:	3b01      	subs	r3, #1
 800b41e:	60a3      	str	r3, [r4, #8]
 800b420:	e7d9      	b.n	800b3d6 <_scanf_i+0xda>
 800b422:	f1bb 0f02 	cmp.w	fp, #2
 800b426:	d1ae      	bne.n	800b386 <_scanf_i+0x8a>
 800b428:	6822      	ldr	r2, [r4, #0]
 800b42a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b42e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b432:	d1bf      	bne.n	800b3b4 <_scanf_i+0xb8>
 800b434:	2310      	movs	r3, #16
 800b436:	6063      	str	r3, [r4, #4]
 800b438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b43c:	e7a2      	b.n	800b384 <_scanf_i+0x88>
 800b43e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b442:	6022      	str	r2, [r4, #0]
 800b444:	780b      	ldrb	r3, [r1, #0]
 800b446:	f805 3b01 	strb.w	r3, [r5], #1
 800b44a:	e7de      	b.n	800b40a <_scanf_i+0x10e>
 800b44c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b450:	4631      	mov	r1, r6
 800b452:	4650      	mov	r0, sl
 800b454:	4798      	blx	r3
 800b456:	2800      	cmp	r0, #0
 800b458:	d0df      	beq.n	800b41a <_scanf_i+0x11e>
 800b45a:	6823      	ldr	r3, [r4, #0]
 800b45c:	05d9      	lsls	r1, r3, #23
 800b45e:	d50d      	bpl.n	800b47c <_scanf_i+0x180>
 800b460:	42bd      	cmp	r5, r7
 800b462:	d909      	bls.n	800b478 <_scanf_i+0x17c>
 800b464:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b468:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b46c:	4632      	mov	r2, r6
 800b46e:	4650      	mov	r0, sl
 800b470:	4798      	blx	r3
 800b472:	f105 39ff 	add.w	r9, r5, #4294967295
 800b476:	464d      	mov	r5, r9
 800b478:	42bd      	cmp	r5, r7
 800b47a:	d028      	beq.n	800b4ce <_scanf_i+0x1d2>
 800b47c:	6822      	ldr	r2, [r4, #0]
 800b47e:	f012 0210 	ands.w	r2, r2, #16
 800b482:	d113      	bne.n	800b4ac <_scanf_i+0x1b0>
 800b484:	702a      	strb	r2, [r5, #0]
 800b486:	6863      	ldr	r3, [r4, #4]
 800b488:	9e01      	ldr	r6, [sp, #4]
 800b48a:	4639      	mov	r1, r7
 800b48c:	4650      	mov	r0, sl
 800b48e:	47b0      	blx	r6
 800b490:	f8d8 3000 	ldr.w	r3, [r8]
 800b494:	6821      	ldr	r1, [r4, #0]
 800b496:	1d1a      	adds	r2, r3, #4
 800b498:	f8c8 2000 	str.w	r2, [r8]
 800b49c:	f011 0f20 	tst.w	r1, #32
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	d00f      	beq.n	800b4c4 <_scanf_i+0x1c8>
 800b4a4:	6018      	str	r0, [r3, #0]
 800b4a6:	68e3      	ldr	r3, [r4, #12]
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	60e3      	str	r3, [r4, #12]
 800b4ac:	6923      	ldr	r3, [r4, #16]
 800b4ae:	1bed      	subs	r5, r5, r7
 800b4b0:	445d      	add	r5, fp
 800b4b2:	442b      	add	r3, r5
 800b4b4:	6123      	str	r3, [r4, #16]
 800b4b6:	2000      	movs	r0, #0
 800b4b8:	b007      	add	sp, #28
 800b4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4be:	f04f 0b00 	mov.w	fp, #0
 800b4c2:	e7ca      	b.n	800b45a <_scanf_i+0x15e>
 800b4c4:	07ca      	lsls	r2, r1, #31
 800b4c6:	bf4c      	ite	mi
 800b4c8:	8018      	strhmi	r0, [r3, #0]
 800b4ca:	6018      	strpl	r0, [r3, #0]
 800b4cc:	e7eb      	b.n	800b4a6 <_scanf_i+0x1aa>
 800b4ce:	2001      	movs	r0, #1
 800b4d0:	e7f2      	b.n	800b4b8 <_scanf_i+0x1bc>
 800b4d2:	bf00      	nop
 800b4d4:	0800d23c 	.word	0x0800d23c
 800b4d8:	0800bc25 	.word	0x0800bc25
 800b4dc:	0800bb3d 	.word	0x0800bb3d
 800b4e0:	0800d686 	.word	0x0800d686

0800b4e4 <__swhatbuf_r>:
 800b4e4:	b570      	push	{r4, r5, r6, lr}
 800b4e6:	460c      	mov	r4, r1
 800b4e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ec:	2900      	cmp	r1, #0
 800b4ee:	b096      	sub	sp, #88	; 0x58
 800b4f0:	4615      	mov	r5, r2
 800b4f2:	461e      	mov	r6, r3
 800b4f4:	da0d      	bge.n	800b512 <__swhatbuf_r+0x2e>
 800b4f6:	89a3      	ldrh	r3, [r4, #12]
 800b4f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b4fc:	f04f 0100 	mov.w	r1, #0
 800b500:	bf0c      	ite	eq
 800b502:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b506:	2340      	movne	r3, #64	; 0x40
 800b508:	2000      	movs	r0, #0
 800b50a:	6031      	str	r1, [r6, #0]
 800b50c:	602b      	str	r3, [r5, #0]
 800b50e:	b016      	add	sp, #88	; 0x58
 800b510:	bd70      	pop	{r4, r5, r6, pc}
 800b512:	466a      	mov	r2, sp
 800b514:	f000 f9fa 	bl	800b90c <_fstat_r>
 800b518:	2800      	cmp	r0, #0
 800b51a:	dbec      	blt.n	800b4f6 <__swhatbuf_r+0x12>
 800b51c:	9901      	ldr	r1, [sp, #4]
 800b51e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b522:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b526:	4259      	negs	r1, r3
 800b528:	4159      	adcs	r1, r3
 800b52a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b52e:	e7eb      	b.n	800b508 <__swhatbuf_r+0x24>

0800b530 <__smakebuf_r>:
 800b530:	898b      	ldrh	r3, [r1, #12]
 800b532:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b534:	079d      	lsls	r5, r3, #30
 800b536:	4606      	mov	r6, r0
 800b538:	460c      	mov	r4, r1
 800b53a:	d507      	bpl.n	800b54c <__smakebuf_r+0x1c>
 800b53c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b540:	6023      	str	r3, [r4, #0]
 800b542:	6123      	str	r3, [r4, #16]
 800b544:	2301      	movs	r3, #1
 800b546:	6163      	str	r3, [r4, #20]
 800b548:	b002      	add	sp, #8
 800b54a:	bd70      	pop	{r4, r5, r6, pc}
 800b54c:	ab01      	add	r3, sp, #4
 800b54e:	466a      	mov	r2, sp
 800b550:	f7ff ffc8 	bl	800b4e4 <__swhatbuf_r>
 800b554:	9900      	ldr	r1, [sp, #0]
 800b556:	4605      	mov	r5, r0
 800b558:	4630      	mov	r0, r6
 800b55a:	f7fe fe23 	bl	800a1a4 <_malloc_r>
 800b55e:	b948      	cbnz	r0, 800b574 <__smakebuf_r+0x44>
 800b560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b564:	059a      	lsls	r2, r3, #22
 800b566:	d4ef      	bmi.n	800b548 <__smakebuf_r+0x18>
 800b568:	f023 0303 	bic.w	r3, r3, #3
 800b56c:	f043 0302 	orr.w	r3, r3, #2
 800b570:	81a3      	strh	r3, [r4, #12]
 800b572:	e7e3      	b.n	800b53c <__smakebuf_r+0xc>
 800b574:	89a3      	ldrh	r3, [r4, #12]
 800b576:	6020      	str	r0, [r4, #0]
 800b578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b57c:	81a3      	strh	r3, [r4, #12]
 800b57e:	9b00      	ldr	r3, [sp, #0]
 800b580:	6163      	str	r3, [r4, #20]
 800b582:	9b01      	ldr	r3, [sp, #4]
 800b584:	6120      	str	r0, [r4, #16]
 800b586:	b15b      	cbz	r3, 800b5a0 <__smakebuf_r+0x70>
 800b588:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b58c:	4630      	mov	r0, r6
 800b58e:	f000 f9cf 	bl	800b930 <_isatty_r>
 800b592:	b128      	cbz	r0, 800b5a0 <__smakebuf_r+0x70>
 800b594:	89a3      	ldrh	r3, [r4, #12]
 800b596:	f023 0303 	bic.w	r3, r3, #3
 800b59a:	f043 0301 	orr.w	r3, r3, #1
 800b59e:	81a3      	strh	r3, [r4, #12]
 800b5a0:	89a3      	ldrh	r3, [r4, #12]
 800b5a2:	431d      	orrs	r5, r3
 800b5a4:	81a5      	strh	r5, [r4, #12]
 800b5a6:	e7cf      	b.n	800b548 <__smakebuf_r+0x18>

0800b5a8 <_putc_r>:
 800b5a8:	b570      	push	{r4, r5, r6, lr}
 800b5aa:	460d      	mov	r5, r1
 800b5ac:	4614      	mov	r4, r2
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	b118      	cbz	r0, 800b5ba <_putc_r+0x12>
 800b5b2:	6a03      	ldr	r3, [r0, #32]
 800b5b4:	b90b      	cbnz	r3, 800b5ba <_putc_r+0x12>
 800b5b6:	f7fd f8c3 	bl	8008740 <__sinit>
 800b5ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5bc:	07d8      	lsls	r0, r3, #31
 800b5be:	d405      	bmi.n	800b5cc <_putc_r+0x24>
 800b5c0:	89a3      	ldrh	r3, [r4, #12]
 800b5c2:	0599      	lsls	r1, r3, #22
 800b5c4:	d402      	bmi.n	800b5cc <_putc_r+0x24>
 800b5c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5c8:	f7fd fb8d 	bl	8008ce6 <__retarget_lock_acquire_recursive>
 800b5cc:	68a3      	ldr	r3, [r4, #8]
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	60a3      	str	r3, [r4, #8]
 800b5d4:	da05      	bge.n	800b5e2 <_putc_r+0x3a>
 800b5d6:	69a2      	ldr	r2, [r4, #24]
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	db12      	blt.n	800b602 <_putc_r+0x5a>
 800b5dc:	b2eb      	uxtb	r3, r5
 800b5de:	2b0a      	cmp	r3, #10
 800b5e0:	d00f      	beq.n	800b602 <_putc_r+0x5a>
 800b5e2:	6823      	ldr	r3, [r4, #0]
 800b5e4:	1c5a      	adds	r2, r3, #1
 800b5e6:	6022      	str	r2, [r4, #0]
 800b5e8:	701d      	strb	r5, [r3, #0]
 800b5ea:	b2ed      	uxtb	r5, r5
 800b5ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5ee:	07da      	lsls	r2, r3, #31
 800b5f0:	d405      	bmi.n	800b5fe <_putc_r+0x56>
 800b5f2:	89a3      	ldrh	r3, [r4, #12]
 800b5f4:	059b      	lsls	r3, r3, #22
 800b5f6:	d402      	bmi.n	800b5fe <_putc_r+0x56>
 800b5f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5fa:	f7fd fb75 	bl	8008ce8 <__retarget_lock_release_recursive>
 800b5fe:	4628      	mov	r0, r5
 800b600:	bd70      	pop	{r4, r5, r6, pc}
 800b602:	4629      	mov	r1, r5
 800b604:	4622      	mov	r2, r4
 800b606:	4630      	mov	r0, r6
 800b608:	f7fd fa49 	bl	8008a9e <__swbuf_r>
 800b60c:	4605      	mov	r5, r0
 800b60e:	e7ed      	b.n	800b5ec <_putc_r+0x44>

0800b610 <lflush>:
 800b610:	898b      	ldrh	r3, [r1, #12]
 800b612:	f003 0309 	and.w	r3, r3, #9
 800b616:	2b09      	cmp	r3, #9
 800b618:	d103      	bne.n	800b622 <lflush+0x12>
 800b61a:	4b03      	ldr	r3, [pc, #12]	; (800b628 <lflush+0x18>)
 800b61c:	6818      	ldr	r0, [r3, #0]
 800b61e:	f7fc bfc7 	b.w	80085b0 <_fflush_r>
 800b622:	2000      	movs	r0, #0
 800b624:	4770      	bx	lr
 800b626:	bf00      	nop
 800b628:	200001f8 	.word	0x200001f8

0800b62c <__srefill_r>:
 800b62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b62e:	460c      	mov	r4, r1
 800b630:	4605      	mov	r5, r0
 800b632:	b118      	cbz	r0, 800b63c <__srefill_r+0x10>
 800b634:	6a03      	ldr	r3, [r0, #32]
 800b636:	b90b      	cbnz	r3, 800b63c <__srefill_r+0x10>
 800b638:	f7fd f882 	bl	8008740 <__sinit>
 800b63c:	2300      	movs	r3, #0
 800b63e:	6063      	str	r3, [r4, #4]
 800b640:	89a3      	ldrh	r3, [r4, #12]
 800b642:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b646:	069e      	lsls	r6, r3, #26
 800b648:	d502      	bpl.n	800b650 <__srefill_r+0x24>
 800b64a:	f04f 30ff 	mov.w	r0, #4294967295
 800b64e:	e05c      	b.n	800b70a <__srefill_r+0xde>
 800b650:	0758      	lsls	r0, r3, #29
 800b652:	d448      	bmi.n	800b6e6 <__srefill_r+0xba>
 800b654:	06d9      	lsls	r1, r3, #27
 800b656:	d405      	bmi.n	800b664 <__srefill_r+0x38>
 800b658:	2309      	movs	r3, #9
 800b65a:	602b      	str	r3, [r5, #0]
 800b65c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b660:	81a3      	strh	r3, [r4, #12]
 800b662:	e7f2      	b.n	800b64a <__srefill_r+0x1e>
 800b664:	071a      	lsls	r2, r3, #28
 800b666:	d50b      	bpl.n	800b680 <__srefill_r+0x54>
 800b668:	4621      	mov	r1, r4
 800b66a:	4628      	mov	r0, r5
 800b66c:	f7fc ffa0 	bl	80085b0 <_fflush_r>
 800b670:	2800      	cmp	r0, #0
 800b672:	d1ea      	bne.n	800b64a <__srefill_r+0x1e>
 800b674:	89a3      	ldrh	r3, [r4, #12]
 800b676:	60a0      	str	r0, [r4, #8]
 800b678:	f023 0308 	bic.w	r3, r3, #8
 800b67c:	81a3      	strh	r3, [r4, #12]
 800b67e:	61a0      	str	r0, [r4, #24]
 800b680:	89a3      	ldrh	r3, [r4, #12]
 800b682:	f043 0304 	orr.w	r3, r3, #4
 800b686:	81a3      	strh	r3, [r4, #12]
 800b688:	6923      	ldr	r3, [r4, #16]
 800b68a:	b91b      	cbnz	r3, 800b694 <__srefill_r+0x68>
 800b68c:	4621      	mov	r1, r4
 800b68e:	4628      	mov	r0, r5
 800b690:	f7ff ff4e 	bl	800b530 <__smakebuf_r>
 800b694:	89a6      	ldrh	r6, [r4, #12]
 800b696:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800b69a:	07b3      	lsls	r3, r6, #30
 800b69c:	d00f      	beq.n	800b6be <__srefill_r+0x92>
 800b69e:	2301      	movs	r3, #1
 800b6a0:	4a1b      	ldr	r2, [pc, #108]	; (800b710 <__srefill_r+0xe4>)
 800b6a2:	491c      	ldr	r1, [pc, #112]	; (800b714 <__srefill_r+0xe8>)
 800b6a4:	481c      	ldr	r0, [pc, #112]	; (800b718 <__srefill_r+0xec>)
 800b6a6:	81a3      	strh	r3, [r4, #12]
 800b6a8:	f006 0609 	and.w	r6, r6, #9
 800b6ac:	f7fd f860 	bl	8008770 <_fwalk_sglue>
 800b6b0:	2e09      	cmp	r6, #9
 800b6b2:	81a7      	strh	r7, [r4, #12]
 800b6b4:	d103      	bne.n	800b6be <__srefill_r+0x92>
 800b6b6:	4621      	mov	r1, r4
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	f7fc fef3 	bl	80084a4 <__sflush_r>
 800b6be:	6922      	ldr	r2, [r4, #16]
 800b6c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b6c2:	6963      	ldr	r3, [r4, #20]
 800b6c4:	6a21      	ldr	r1, [r4, #32]
 800b6c6:	6022      	str	r2, [r4, #0]
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	47b0      	blx	r6
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	6060      	str	r0, [r4, #4]
 800b6d0:	dc1c      	bgt.n	800b70c <__srefill_r+0xe0>
 800b6d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6d6:	bf17      	itett	ne
 800b6d8:	2200      	movne	r2, #0
 800b6da:	f043 0320 	orreq.w	r3, r3, #32
 800b6de:	6062      	strne	r2, [r4, #4]
 800b6e0:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800b6e4:	e7bc      	b.n	800b660 <__srefill_r+0x34>
 800b6e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6e8:	2900      	cmp	r1, #0
 800b6ea:	d0cd      	beq.n	800b688 <__srefill_r+0x5c>
 800b6ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6f0:	4299      	cmp	r1, r3
 800b6f2:	d002      	beq.n	800b6fa <__srefill_r+0xce>
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	f7fe f989 	bl	8009a0c <_free_r>
 800b6fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6fc:	6063      	str	r3, [r4, #4]
 800b6fe:	2000      	movs	r0, #0
 800b700:	6360      	str	r0, [r4, #52]	; 0x34
 800b702:	2b00      	cmp	r3, #0
 800b704:	d0c0      	beq.n	800b688 <__srefill_r+0x5c>
 800b706:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b708:	6023      	str	r3, [r4, #0]
 800b70a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b70c:	2000      	movs	r0, #0
 800b70e:	e7fc      	b.n	800b70a <__srefill_r+0xde>
 800b710:	20000034 	.word	0x20000034
 800b714:	0800b611 	.word	0x0800b611
 800b718:	200001ac 	.word	0x200001ac

0800b71c <__sccl>:
 800b71c:	b570      	push	{r4, r5, r6, lr}
 800b71e:	780b      	ldrb	r3, [r1, #0]
 800b720:	4604      	mov	r4, r0
 800b722:	2b5e      	cmp	r3, #94	; 0x5e
 800b724:	bf0b      	itete	eq
 800b726:	784b      	ldrbeq	r3, [r1, #1]
 800b728:	1c4a      	addne	r2, r1, #1
 800b72a:	1c8a      	addeq	r2, r1, #2
 800b72c:	2100      	movne	r1, #0
 800b72e:	bf08      	it	eq
 800b730:	2101      	moveq	r1, #1
 800b732:	3801      	subs	r0, #1
 800b734:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b738:	f800 1f01 	strb.w	r1, [r0, #1]!
 800b73c:	42a8      	cmp	r0, r5
 800b73e:	d1fb      	bne.n	800b738 <__sccl+0x1c>
 800b740:	b90b      	cbnz	r3, 800b746 <__sccl+0x2a>
 800b742:	1e50      	subs	r0, r2, #1
 800b744:	bd70      	pop	{r4, r5, r6, pc}
 800b746:	f081 0101 	eor.w	r1, r1, #1
 800b74a:	54e1      	strb	r1, [r4, r3]
 800b74c:	4610      	mov	r0, r2
 800b74e:	4602      	mov	r2, r0
 800b750:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b754:	2d2d      	cmp	r5, #45	; 0x2d
 800b756:	d005      	beq.n	800b764 <__sccl+0x48>
 800b758:	2d5d      	cmp	r5, #93	; 0x5d
 800b75a:	d016      	beq.n	800b78a <__sccl+0x6e>
 800b75c:	2d00      	cmp	r5, #0
 800b75e:	d0f1      	beq.n	800b744 <__sccl+0x28>
 800b760:	462b      	mov	r3, r5
 800b762:	e7f2      	b.n	800b74a <__sccl+0x2e>
 800b764:	7846      	ldrb	r6, [r0, #1]
 800b766:	2e5d      	cmp	r6, #93	; 0x5d
 800b768:	d0fa      	beq.n	800b760 <__sccl+0x44>
 800b76a:	42b3      	cmp	r3, r6
 800b76c:	dcf8      	bgt.n	800b760 <__sccl+0x44>
 800b76e:	3002      	adds	r0, #2
 800b770:	461a      	mov	r2, r3
 800b772:	3201      	adds	r2, #1
 800b774:	4296      	cmp	r6, r2
 800b776:	54a1      	strb	r1, [r4, r2]
 800b778:	dcfb      	bgt.n	800b772 <__sccl+0x56>
 800b77a:	1af2      	subs	r2, r6, r3
 800b77c:	3a01      	subs	r2, #1
 800b77e:	1c5d      	adds	r5, r3, #1
 800b780:	42b3      	cmp	r3, r6
 800b782:	bfa8      	it	ge
 800b784:	2200      	movge	r2, #0
 800b786:	18ab      	adds	r3, r5, r2
 800b788:	e7e1      	b.n	800b74e <__sccl+0x32>
 800b78a:	4610      	mov	r0, r2
 800b78c:	e7da      	b.n	800b744 <__sccl+0x28>

0800b78e <__submore>:
 800b78e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b792:	460c      	mov	r4, r1
 800b794:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b796:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b79a:	4299      	cmp	r1, r3
 800b79c:	d11d      	bne.n	800b7da <__submore+0x4c>
 800b79e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b7a2:	f7fe fcff 	bl	800a1a4 <_malloc_r>
 800b7a6:	b918      	cbnz	r0, 800b7b0 <__submore+0x22>
 800b7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7b4:	63a3      	str	r3, [r4, #56]	; 0x38
 800b7b6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b7ba:	6360      	str	r0, [r4, #52]	; 0x34
 800b7bc:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b7c0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b7c4:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b7c8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b7cc:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b7d0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b7d4:	6020      	str	r0, [r4, #0]
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	e7e8      	b.n	800b7ac <__submore+0x1e>
 800b7da:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b7dc:	0077      	lsls	r7, r6, #1
 800b7de:	463a      	mov	r2, r7
 800b7e0:	f000 f8fa 	bl	800b9d8 <_realloc_r>
 800b7e4:	4605      	mov	r5, r0
 800b7e6:	2800      	cmp	r0, #0
 800b7e8:	d0de      	beq.n	800b7a8 <__submore+0x1a>
 800b7ea:	eb00 0806 	add.w	r8, r0, r6
 800b7ee:	4601      	mov	r1, r0
 800b7f0:	4632      	mov	r2, r6
 800b7f2:	4640      	mov	r0, r8
 800b7f4:	f7fd fa79 	bl	8008cea <memcpy>
 800b7f8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b7fc:	f8c4 8000 	str.w	r8, [r4]
 800b800:	e7e9      	b.n	800b7d6 <__submore+0x48>

0800b802 <_ungetc_r>:
 800b802:	b570      	push	{r4, r5, r6, lr}
 800b804:	4614      	mov	r4, r2
 800b806:	1c4a      	adds	r2, r1, #1
 800b808:	4606      	mov	r6, r0
 800b80a:	460d      	mov	r5, r1
 800b80c:	d103      	bne.n	800b816 <_ungetc_r+0x14>
 800b80e:	f04f 35ff 	mov.w	r5, #4294967295
 800b812:	4628      	mov	r0, r5
 800b814:	bd70      	pop	{r4, r5, r6, pc}
 800b816:	b118      	cbz	r0, 800b820 <_ungetc_r+0x1e>
 800b818:	6a03      	ldr	r3, [r0, #32]
 800b81a:	b90b      	cbnz	r3, 800b820 <_ungetc_r+0x1e>
 800b81c:	f7fc ff90 	bl	8008740 <__sinit>
 800b820:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b822:	07db      	lsls	r3, r3, #31
 800b824:	d405      	bmi.n	800b832 <_ungetc_r+0x30>
 800b826:	89a3      	ldrh	r3, [r4, #12]
 800b828:	0598      	lsls	r0, r3, #22
 800b82a:	d402      	bmi.n	800b832 <_ungetc_r+0x30>
 800b82c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b82e:	f7fd fa5a 	bl	8008ce6 <__retarget_lock_acquire_recursive>
 800b832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b836:	f023 0320 	bic.w	r3, r3, #32
 800b83a:	0759      	lsls	r1, r3, #29
 800b83c:	81a3      	strh	r3, [r4, #12]
 800b83e:	b29a      	uxth	r2, r3
 800b840:	d423      	bmi.n	800b88a <_ungetc_r+0x88>
 800b842:	06d3      	lsls	r3, r2, #27
 800b844:	d409      	bmi.n	800b85a <_ungetc_r+0x58>
 800b846:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b848:	07dd      	lsls	r5, r3, #31
 800b84a:	d4e0      	bmi.n	800b80e <_ungetc_r+0xc>
 800b84c:	f412 7f00 	tst.w	r2, #512	; 0x200
 800b850:	d1dd      	bne.n	800b80e <_ungetc_r+0xc>
 800b852:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b854:	f7fd fa48 	bl	8008ce8 <__retarget_lock_release_recursive>
 800b858:	e7d9      	b.n	800b80e <_ungetc_r+0xc>
 800b85a:	0710      	lsls	r0, r2, #28
 800b85c:	d511      	bpl.n	800b882 <_ungetc_r+0x80>
 800b85e:	4621      	mov	r1, r4
 800b860:	4630      	mov	r0, r6
 800b862:	f7fc fea5 	bl	80085b0 <_fflush_r>
 800b866:	b130      	cbz	r0, 800b876 <_ungetc_r+0x74>
 800b868:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b86a:	07d9      	lsls	r1, r3, #31
 800b86c:	d4cf      	bmi.n	800b80e <_ungetc_r+0xc>
 800b86e:	89a3      	ldrh	r3, [r4, #12]
 800b870:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b874:	e7ec      	b.n	800b850 <_ungetc_r+0x4e>
 800b876:	89a3      	ldrh	r3, [r4, #12]
 800b878:	60a0      	str	r0, [r4, #8]
 800b87a:	f023 0308 	bic.w	r3, r3, #8
 800b87e:	81a3      	strh	r3, [r4, #12]
 800b880:	61a0      	str	r0, [r4, #24]
 800b882:	89a3      	ldrh	r3, [r4, #12]
 800b884:	f043 0304 	orr.w	r3, r3, #4
 800b888:	81a3      	strh	r3, [r4, #12]
 800b88a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b88c:	6862      	ldr	r2, [r4, #4]
 800b88e:	b2ed      	uxtb	r5, r5
 800b890:	b1d3      	cbz	r3, 800b8c8 <_ungetc_r+0xc6>
 800b892:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b894:	4293      	cmp	r3, r2
 800b896:	dc05      	bgt.n	800b8a4 <_ungetc_r+0xa2>
 800b898:	4621      	mov	r1, r4
 800b89a:	4630      	mov	r0, r6
 800b89c:	f7ff ff77 	bl	800b78e <__submore>
 800b8a0:	2800      	cmp	r0, #0
 800b8a2:	d1e1      	bne.n	800b868 <_ungetc_r+0x66>
 800b8a4:	6823      	ldr	r3, [r4, #0]
 800b8a6:	1e5a      	subs	r2, r3, #1
 800b8a8:	6022      	str	r2, [r4, #0]
 800b8aa:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b8ae:	6863      	ldr	r3, [r4, #4]
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	6063      	str	r3, [r4, #4]
 800b8b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8b6:	07da      	lsls	r2, r3, #31
 800b8b8:	d4ab      	bmi.n	800b812 <_ungetc_r+0x10>
 800b8ba:	89a3      	ldrh	r3, [r4, #12]
 800b8bc:	059b      	lsls	r3, r3, #22
 800b8be:	d4a8      	bmi.n	800b812 <_ungetc_r+0x10>
 800b8c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8c2:	f7fd fa11 	bl	8008ce8 <__retarget_lock_release_recursive>
 800b8c6:	e7a4      	b.n	800b812 <_ungetc_r+0x10>
 800b8c8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b8ca:	6920      	ldr	r0, [r4, #16]
 800b8cc:	6823      	ldr	r3, [r4, #0]
 800b8ce:	f001 0101 	and.w	r1, r1, #1
 800b8d2:	b160      	cbz	r0, 800b8ee <_ungetc_r+0xec>
 800b8d4:	4298      	cmp	r0, r3
 800b8d6:	d20a      	bcs.n	800b8ee <_ungetc_r+0xec>
 800b8d8:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800b8dc:	42a8      	cmp	r0, r5
 800b8de:	d106      	bne.n	800b8ee <_ungetc_r+0xec>
 800b8e0:	3b01      	subs	r3, #1
 800b8e2:	3201      	adds	r2, #1
 800b8e4:	6023      	str	r3, [r4, #0]
 800b8e6:	6062      	str	r2, [r4, #4]
 800b8e8:	2900      	cmp	r1, #0
 800b8ea:	d192      	bne.n	800b812 <_ungetc_r+0x10>
 800b8ec:	e7e5      	b.n	800b8ba <_ungetc_r+0xb8>
 800b8ee:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b8f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8f6:	6363      	str	r3, [r4, #52]	; 0x34
 800b8f8:	2303      	movs	r3, #3
 800b8fa:	63a3      	str	r3, [r4, #56]	; 0x38
 800b8fc:	4623      	mov	r3, r4
 800b8fe:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b902:	6023      	str	r3, [r4, #0]
 800b904:	2301      	movs	r3, #1
 800b906:	6063      	str	r3, [r4, #4]
 800b908:	e7ee      	b.n	800b8e8 <_ungetc_r+0xe6>
	...

0800b90c <_fstat_r>:
 800b90c:	b538      	push	{r3, r4, r5, lr}
 800b90e:	4d07      	ldr	r5, [pc, #28]	; (800b92c <_fstat_r+0x20>)
 800b910:	2300      	movs	r3, #0
 800b912:	4604      	mov	r4, r0
 800b914:	4608      	mov	r0, r1
 800b916:	4611      	mov	r1, r2
 800b918:	602b      	str	r3, [r5, #0]
 800b91a:	f7f8 f8fa 	bl	8003b12 <_fstat>
 800b91e:	1c43      	adds	r3, r0, #1
 800b920:	d102      	bne.n	800b928 <_fstat_r+0x1c>
 800b922:	682b      	ldr	r3, [r5, #0]
 800b924:	b103      	cbz	r3, 800b928 <_fstat_r+0x1c>
 800b926:	6023      	str	r3, [r4, #0]
 800b928:	bd38      	pop	{r3, r4, r5, pc}
 800b92a:	bf00      	nop
 800b92c:	20002c54 	.word	0x20002c54

0800b930 <_isatty_r>:
 800b930:	b538      	push	{r3, r4, r5, lr}
 800b932:	4d06      	ldr	r5, [pc, #24]	; (800b94c <_isatty_r+0x1c>)
 800b934:	2300      	movs	r3, #0
 800b936:	4604      	mov	r4, r0
 800b938:	4608      	mov	r0, r1
 800b93a:	602b      	str	r3, [r5, #0]
 800b93c:	f7f8 f8f9 	bl	8003b32 <_isatty>
 800b940:	1c43      	adds	r3, r0, #1
 800b942:	d102      	bne.n	800b94a <_isatty_r+0x1a>
 800b944:	682b      	ldr	r3, [r5, #0]
 800b946:	b103      	cbz	r3, 800b94a <_isatty_r+0x1a>
 800b948:	6023      	str	r3, [r4, #0]
 800b94a:	bd38      	pop	{r3, r4, r5, pc}
 800b94c:	20002c54 	.word	0x20002c54

0800b950 <_sbrk_r>:
 800b950:	b538      	push	{r3, r4, r5, lr}
 800b952:	4d06      	ldr	r5, [pc, #24]	; (800b96c <_sbrk_r+0x1c>)
 800b954:	2300      	movs	r3, #0
 800b956:	4604      	mov	r4, r0
 800b958:	4608      	mov	r0, r1
 800b95a:	602b      	str	r3, [r5, #0]
 800b95c:	f7f8 f902 	bl	8003b64 <_sbrk>
 800b960:	1c43      	adds	r3, r0, #1
 800b962:	d102      	bne.n	800b96a <_sbrk_r+0x1a>
 800b964:	682b      	ldr	r3, [r5, #0]
 800b966:	b103      	cbz	r3, 800b96a <_sbrk_r+0x1a>
 800b968:	6023      	str	r3, [r4, #0]
 800b96a:	bd38      	pop	{r3, r4, r5, pc}
 800b96c:	20002c54 	.word	0x20002c54

0800b970 <__assert_func>:
 800b970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b972:	4614      	mov	r4, r2
 800b974:	461a      	mov	r2, r3
 800b976:	4b09      	ldr	r3, [pc, #36]	; (800b99c <__assert_func+0x2c>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4605      	mov	r5, r0
 800b97c:	68d8      	ldr	r0, [r3, #12]
 800b97e:	b14c      	cbz	r4, 800b994 <__assert_func+0x24>
 800b980:	4b07      	ldr	r3, [pc, #28]	; (800b9a0 <__assert_func+0x30>)
 800b982:	9100      	str	r1, [sp, #0]
 800b984:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b988:	4906      	ldr	r1, [pc, #24]	; (800b9a4 <__assert_func+0x34>)
 800b98a:	462b      	mov	r3, r5
 800b98c:	f000 f94c 	bl	800bc28 <fiprintf>
 800b990:	f000 f95c 	bl	800bc4c <abort>
 800b994:	4b04      	ldr	r3, [pc, #16]	; (800b9a8 <__assert_func+0x38>)
 800b996:	461c      	mov	r4, r3
 800b998:	e7f3      	b.n	800b982 <__assert_func+0x12>
 800b99a:	bf00      	nop
 800b99c:	200001f8 	.word	0x200001f8
 800b9a0:	0800d691 	.word	0x0800d691
 800b9a4:	0800d69e 	.word	0x0800d69e
 800b9a8:	0800d6cc 	.word	0x0800d6cc

0800b9ac <_calloc_r>:
 800b9ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9ae:	fba1 2402 	umull	r2, r4, r1, r2
 800b9b2:	b94c      	cbnz	r4, 800b9c8 <_calloc_r+0x1c>
 800b9b4:	4611      	mov	r1, r2
 800b9b6:	9201      	str	r2, [sp, #4]
 800b9b8:	f7fe fbf4 	bl	800a1a4 <_malloc_r>
 800b9bc:	9a01      	ldr	r2, [sp, #4]
 800b9be:	4605      	mov	r5, r0
 800b9c0:	b930      	cbnz	r0, 800b9d0 <_calloc_r+0x24>
 800b9c2:	4628      	mov	r0, r5
 800b9c4:	b003      	add	sp, #12
 800b9c6:	bd30      	pop	{r4, r5, pc}
 800b9c8:	220c      	movs	r2, #12
 800b9ca:	6002      	str	r2, [r0, #0]
 800b9cc:	2500      	movs	r5, #0
 800b9ce:	e7f8      	b.n	800b9c2 <_calloc_r+0x16>
 800b9d0:	4621      	mov	r1, r4
 800b9d2:	f7fd f8f9 	bl	8008bc8 <memset>
 800b9d6:	e7f4      	b.n	800b9c2 <_calloc_r+0x16>

0800b9d8 <_realloc_r>:
 800b9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9dc:	4680      	mov	r8, r0
 800b9de:	4614      	mov	r4, r2
 800b9e0:	460e      	mov	r6, r1
 800b9e2:	b921      	cbnz	r1, 800b9ee <_realloc_r+0x16>
 800b9e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e8:	4611      	mov	r1, r2
 800b9ea:	f7fe bbdb 	b.w	800a1a4 <_malloc_r>
 800b9ee:	b92a      	cbnz	r2, 800b9fc <_realloc_r+0x24>
 800b9f0:	f7fe f80c 	bl	8009a0c <_free_r>
 800b9f4:	4625      	mov	r5, r4
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9fc:	f000 f92d 	bl	800bc5a <_malloc_usable_size_r>
 800ba00:	4284      	cmp	r4, r0
 800ba02:	4607      	mov	r7, r0
 800ba04:	d802      	bhi.n	800ba0c <_realloc_r+0x34>
 800ba06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba0a:	d812      	bhi.n	800ba32 <_realloc_r+0x5a>
 800ba0c:	4621      	mov	r1, r4
 800ba0e:	4640      	mov	r0, r8
 800ba10:	f7fe fbc8 	bl	800a1a4 <_malloc_r>
 800ba14:	4605      	mov	r5, r0
 800ba16:	2800      	cmp	r0, #0
 800ba18:	d0ed      	beq.n	800b9f6 <_realloc_r+0x1e>
 800ba1a:	42bc      	cmp	r4, r7
 800ba1c:	4622      	mov	r2, r4
 800ba1e:	4631      	mov	r1, r6
 800ba20:	bf28      	it	cs
 800ba22:	463a      	movcs	r2, r7
 800ba24:	f7fd f961 	bl	8008cea <memcpy>
 800ba28:	4631      	mov	r1, r6
 800ba2a:	4640      	mov	r0, r8
 800ba2c:	f7fd ffee 	bl	8009a0c <_free_r>
 800ba30:	e7e1      	b.n	800b9f6 <_realloc_r+0x1e>
 800ba32:	4635      	mov	r5, r6
 800ba34:	e7df      	b.n	800b9f6 <_realloc_r+0x1e>
	...

0800ba38 <_strtol_l.constprop.0>:
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba3e:	d001      	beq.n	800ba44 <_strtol_l.constprop.0+0xc>
 800ba40:	2b24      	cmp	r3, #36	; 0x24
 800ba42:	d906      	bls.n	800ba52 <_strtol_l.constprop.0+0x1a>
 800ba44:	f7fd f924 	bl	8008c90 <__errno>
 800ba48:	2316      	movs	r3, #22
 800ba4a:	6003      	str	r3, [r0, #0]
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba52:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bb38 <_strtol_l.constprop.0+0x100>
 800ba56:	460d      	mov	r5, r1
 800ba58:	462e      	mov	r6, r5
 800ba5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba5e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ba62:	f017 0708 	ands.w	r7, r7, #8
 800ba66:	d1f7      	bne.n	800ba58 <_strtol_l.constprop.0+0x20>
 800ba68:	2c2d      	cmp	r4, #45	; 0x2d
 800ba6a:	d132      	bne.n	800bad2 <_strtol_l.constprop.0+0x9a>
 800ba6c:	782c      	ldrb	r4, [r5, #0]
 800ba6e:	2701      	movs	r7, #1
 800ba70:	1cb5      	adds	r5, r6, #2
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d05b      	beq.n	800bb2e <_strtol_l.constprop.0+0xf6>
 800ba76:	2b10      	cmp	r3, #16
 800ba78:	d109      	bne.n	800ba8e <_strtol_l.constprop.0+0x56>
 800ba7a:	2c30      	cmp	r4, #48	; 0x30
 800ba7c:	d107      	bne.n	800ba8e <_strtol_l.constprop.0+0x56>
 800ba7e:	782c      	ldrb	r4, [r5, #0]
 800ba80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ba84:	2c58      	cmp	r4, #88	; 0x58
 800ba86:	d14d      	bne.n	800bb24 <_strtol_l.constprop.0+0xec>
 800ba88:	786c      	ldrb	r4, [r5, #1]
 800ba8a:	2310      	movs	r3, #16
 800ba8c:	3502      	adds	r5, #2
 800ba8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ba92:	f108 38ff 	add.w	r8, r8, #4294967295
 800ba96:	f04f 0e00 	mov.w	lr, #0
 800ba9a:	fbb8 f9f3 	udiv	r9, r8, r3
 800ba9e:	4676      	mov	r6, lr
 800baa0:	fb03 8a19 	mls	sl, r3, r9, r8
 800baa4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800baa8:	f1bc 0f09 	cmp.w	ip, #9
 800baac:	d816      	bhi.n	800badc <_strtol_l.constprop.0+0xa4>
 800baae:	4664      	mov	r4, ip
 800bab0:	42a3      	cmp	r3, r4
 800bab2:	dd24      	ble.n	800bafe <_strtol_l.constprop.0+0xc6>
 800bab4:	f1be 3fff 	cmp.w	lr, #4294967295
 800bab8:	d008      	beq.n	800bacc <_strtol_l.constprop.0+0x94>
 800baba:	45b1      	cmp	r9, r6
 800babc:	d31c      	bcc.n	800baf8 <_strtol_l.constprop.0+0xc0>
 800babe:	d101      	bne.n	800bac4 <_strtol_l.constprop.0+0x8c>
 800bac0:	45a2      	cmp	sl, r4
 800bac2:	db19      	blt.n	800baf8 <_strtol_l.constprop.0+0xc0>
 800bac4:	fb06 4603 	mla	r6, r6, r3, r4
 800bac8:	f04f 0e01 	mov.w	lr, #1
 800bacc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bad0:	e7e8      	b.n	800baa4 <_strtol_l.constprop.0+0x6c>
 800bad2:	2c2b      	cmp	r4, #43	; 0x2b
 800bad4:	bf04      	itt	eq
 800bad6:	782c      	ldrbeq	r4, [r5, #0]
 800bad8:	1cb5      	addeq	r5, r6, #2
 800bada:	e7ca      	b.n	800ba72 <_strtol_l.constprop.0+0x3a>
 800badc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bae0:	f1bc 0f19 	cmp.w	ip, #25
 800bae4:	d801      	bhi.n	800baea <_strtol_l.constprop.0+0xb2>
 800bae6:	3c37      	subs	r4, #55	; 0x37
 800bae8:	e7e2      	b.n	800bab0 <_strtol_l.constprop.0+0x78>
 800baea:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800baee:	f1bc 0f19 	cmp.w	ip, #25
 800baf2:	d804      	bhi.n	800bafe <_strtol_l.constprop.0+0xc6>
 800baf4:	3c57      	subs	r4, #87	; 0x57
 800baf6:	e7db      	b.n	800bab0 <_strtol_l.constprop.0+0x78>
 800baf8:	f04f 3eff 	mov.w	lr, #4294967295
 800bafc:	e7e6      	b.n	800bacc <_strtol_l.constprop.0+0x94>
 800bafe:	f1be 3fff 	cmp.w	lr, #4294967295
 800bb02:	d105      	bne.n	800bb10 <_strtol_l.constprop.0+0xd8>
 800bb04:	2322      	movs	r3, #34	; 0x22
 800bb06:	6003      	str	r3, [r0, #0]
 800bb08:	4646      	mov	r6, r8
 800bb0a:	b942      	cbnz	r2, 800bb1e <_strtol_l.constprop.0+0xe6>
 800bb0c:	4630      	mov	r0, r6
 800bb0e:	e79e      	b.n	800ba4e <_strtol_l.constprop.0+0x16>
 800bb10:	b107      	cbz	r7, 800bb14 <_strtol_l.constprop.0+0xdc>
 800bb12:	4276      	negs	r6, r6
 800bb14:	2a00      	cmp	r2, #0
 800bb16:	d0f9      	beq.n	800bb0c <_strtol_l.constprop.0+0xd4>
 800bb18:	f1be 0f00 	cmp.w	lr, #0
 800bb1c:	d000      	beq.n	800bb20 <_strtol_l.constprop.0+0xe8>
 800bb1e:	1e69      	subs	r1, r5, #1
 800bb20:	6011      	str	r1, [r2, #0]
 800bb22:	e7f3      	b.n	800bb0c <_strtol_l.constprop.0+0xd4>
 800bb24:	2430      	movs	r4, #48	; 0x30
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d1b1      	bne.n	800ba8e <_strtol_l.constprop.0+0x56>
 800bb2a:	2308      	movs	r3, #8
 800bb2c:	e7af      	b.n	800ba8e <_strtol_l.constprop.0+0x56>
 800bb2e:	2c30      	cmp	r4, #48	; 0x30
 800bb30:	d0a5      	beq.n	800ba7e <_strtol_l.constprop.0+0x46>
 800bb32:	230a      	movs	r3, #10
 800bb34:	e7ab      	b.n	800ba8e <_strtol_l.constprop.0+0x56>
 800bb36:	bf00      	nop
 800bb38:	0800d565 	.word	0x0800d565

0800bb3c <_strtol_r>:
 800bb3c:	f7ff bf7c 	b.w	800ba38 <_strtol_l.constprop.0>

0800bb40 <_strtoul_l.constprop.0>:
 800bb40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb44:	4f36      	ldr	r7, [pc, #216]	; (800bc20 <_strtoul_l.constprop.0+0xe0>)
 800bb46:	4686      	mov	lr, r0
 800bb48:	460d      	mov	r5, r1
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb50:	5d3e      	ldrb	r6, [r7, r4]
 800bb52:	f016 0608 	ands.w	r6, r6, #8
 800bb56:	d1f8      	bne.n	800bb4a <_strtoul_l.constprop.0+0xa>
 800bb58:	2c2d      	cmp	r4, #45	; 0x2d
 800bb5a:	d130      	bne.n	800bbbe <_strtoul_l.constprop.0+0x7e>
 800bb5c:	782c      	ldrb	r4, [r5, #0]
 800bb5e:	2601      	movs	r6, #1
 800bb60:	1c85      	adds	r5, r0, #2
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d057      	beq.n	800bc16 <_strtoul_l.constprop.0+0xd6>
 800bb66:	2b10      	cmp	r3, #16
 800bb68:	d109      	bne.n	800bb7e <_strtoul_l.constprop.0+0x3e>
 800bb6a:	2c30      	cmp	r4, #48	; 0x30
 800bb6c:	d107      	bne.n	800bb7e <_strtoul_l.constprop.0+0x3e>
 800bb6e:	7828      	ldrb	r0, [r5, #0]
 800bb70:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800bb74:	2858      	cmp	r0, #88	; 0x58
 800bb76:	d149      	bne.n	800bc0c <_strtoul_l.constprop.0+0xcc>
 800bb78:	786c      	ldrb	r4, [r5, #1]
 800bb7a:	2310      	movs	r3, #16
 800bb7c:	3502      	adds	r5, #2
 800bb7e:	f04f 38ff 	mov.w	r8, #4294967295
 800bb82:	2700      	movs	r7, #0
 800bb84:	fbb8 f8f3 	udiv	r8, r8, r3
 800bb88:	fb03 f908 	mul.w	r9, r3, r8
 800bb8c:	ea6f 0909 	mvn.w	r9, r9
 800bb90:	4638      	mov	r0, r7
 800bb92:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bb96:	f1bc 0f09 	cmp.w	ip, #9
 800bb9a:	d815      	bhi.n	800bbc8 <_strtoul_l.constprop.0+0x88>
 800bb9c:	4664      	mov	r4, ip
 800bb9e:	42a3      	cmp	r3, r4
 800bba0:	dd23      	ble.n	800bbea <_strtoul_l.constprop.0+0xaa>
 800bba2:	f1b7 3fff 	cmp.w	r7, #4294967295
 800bba6:	d007      	beq.n	800bbb8 <_strtoul_l.constprop.0+0x78>
 800bba8:	4580      	cmp	r8, r0
 800bbaa:	d31b      	bcc.n	800bbe4 <_strtoul_l.constprop.0+0xa4>
 800bbac:	d101      	bne.n	800bbb2 <_strtoul_l.constprop.0+0x72>
 800bbae:	45a1      	cmp	r9, r4
 800bbb0:	db18      	blt.n	800bbe4 <_strtoul_l.constprop.0+0xa4>
 800bbb2:	fb00 4003 	mla	r0, r0, r3, r4
 800bbb6:	2701      	movs	r7, #1
 800bbb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bbbc:	e7e9      	b.n	800bb92 <_strtoul_l.constprop.0+0x52>
 800bbbe:	2c2b      	cmp	r4, #43	; 0x2b
 800bbc0:	bf04      	itt	eq
 800bbc2:	782c      	ldrbeq	r4, [r5, #0]
 800bbc4:	1c85      	addeq	r5, r0, #2
 800bbc6:	e7cc      	b.n	800bb62 <_strtoul_l.constprop.0+0x22>
 800bbc8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bbcc:	f1bc 0f19 	cmp.w	ip, #25
 800bbd0:	d801      	bhi.n	800bbd6 <_strtoul_l.constprop.0+0x96>
 800bbd2:	3c37      	subs	r4, #55	; 0x37
 800bbd4:	e7e3      	b.n	800bb9e <_strtoul_l.constprop.0+0x5e>
 800bbd6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bbda:	f1bc 0f19 	cmp.w	ip, #25
 800bbde:	d804      	bhi.n	800bbea <_strtoul_l.constprop.0+0xaa>
 800bbe0:	3c57      	subs	r4, #87	; 0x57
 800bbe2:	e7dc      	b.n	800bb9e <_strtoul_l.constprop.0+0x5e>
 800bbe4:	f04f 37ff 	mov.w	r7, #4294967295
 800bbe8:	e7e6      	b.n	800bbb8 <_strtoul_l.constprop.0+0x78>
 800bbea:	1c7b      	adds	r3, r7, #1
 800bbec:	d106      	bne.n	800bbfc <_strtoul_l.constprop.0+0xbc>
 800bbee:	2322      	movs	r3, #34	; 0x22
 800bbf0:	f8ce 3000 	str.w	r3, [lr]
 800bbf4:	4638      	mov	r0, r7
 800bbf6:	b932      	cbnz	r2, 800bc06 <_strtoul_l.constprop.0+0xc6>
 800bbf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbfc:	b106      	cbz	r6, 800bc00 <_strtoul_l.constprop.0+0xc0>
 800bbfe:	4240      	negs	r0, r0
 800bc00:	2a00      	cmp	r2, #0
 800bc02:	d0f9      	beq.n	800bbf8 <_strtoul_l.constprop.0+0xb8>
 800bc04:	b107      	cbz	r7, 800bc08 <_strtoul_l.constprop.0+0xc8>
 800bc06:	1e69      	subs	r1, r5, #1
 800bc08:	6011      	str	r1, [r2, #0]
 800bc0a:	e7f5      	b.n	800bbf8 <_strtoul_l.constprop.0+0xb8>
 800bc0c:	2430      	movs	r4, #48	; 0x30
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d1b5      	bne.n	800bb7e <_strtoul_l.constprop.0+0x3e>
 800bc12:	2308      	movs	r3, #8
 800bc14:	e7b3      	b.n	800bb7e <_strtoul_l.constprop.0+0x3e>
 800bc16:	2c30      	cmp	r4, #48	; 0x30
 800bc18:	d0a9      	beq.n	800bb6e <_strtoul_l.constprop.0+0x2e>
 800bc1a:	230a      	movs	r3, #10
 800bc1c:	e7af      	b.n	800bb7e <_strtoul_l.constprop.0+0x3e>
 800bc1e:	bf00      	nop
 800bc20:	0800d565 	.word	0x0800d565

0800bc24 <_strtoul_r>:
 800bc24:	f7ff bf8c 	b.w	800bb40 <_strtoul_l.constprop.0>

0800bc28 <fiprintf>:
 800bc28:	b40e      	push	{r1, r2, r3}
 800bc2a:	b503      	push	{r0, r1, lr}
 800bc2c:	4601      	mov	r1, r0
 800bc2e:	ab03      	add	r3, sp, #12
 800bc30:	4805      	ldr	r0, [pc, #20]	; (800bc48 <fiprintf+0x20>)
 800bc32:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc36:	6800      	ldr	r0, [r0, #0]
 800bc38:	9301      	str	r3, [sp, #4]
 800bc3a:	f7ff f835 	bl	800aca8 <_vfiprintf_r>
 800bc3e:	b002      	add	sp, #8
 800bc40:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc44:	b003      	add	sp, #12
 800bc46:	4770      	bx	lr
 800bc48:	200001f8 	.word	0x200001f8

0800bc4c <abort>:
 800bc4c:	b508      	push	{r3, lr}
 800bc4e:	2006      	movs	r0, #6
 800bc50:	f000 f834 	bl	800bcbc <raise>
 800bc54:	2001      	movs	r0, #1
 800bc56:	f7f7 ff29 	bl	8003aac <_exit>

0800bc5a <_malloc_usable_size_r>:
 800bc5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc5e:	1f18      	subs	r0, r3, #4
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	bfbc      	itt	lt
 800bc64:	580b      	ldrlt	r3, [r1, r0]
 800bc66:	18c0      	addlt	r0, r0, r3
 800bc68:	4770      	bx	lr

0800bc6a <_raise_r>:
 800bc6a:	291f      	cmp	r1, #31
 800bc6c:	b538      	push	{r3, r4, r5, lr}
 800bc6e:	4604      	mov	r4, r0
 800bc70:	460d      	mov	r5, r1
 800bc72:	d904      	bls.n	800bc7e <_raise_r+0x14>
 800bc74:	2316      	movs	r3, #22
 800bc76:	6003      	str	r3, [r0, #0]
 800bc78:	f04f 30ff 	mov.w	r0, #4294967295
 800bc7c:	bd38      	pop	{r3, r4, r5, pc}
 800bc7e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bc80:	b112      	cbz	r2, 800bc88 <_raise_r+0x1e>
 800bc82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc86:	b94b      	cbnz	r3, 800bc9c <_raise_r+0x32>
 800bc88:	4620      	mov	r0, r4
 800bc8a:	f000 f831 	bl	800bcf0 <_getpid_r>
 800bc8e:	462a      	mov	r2, r5
 800bc90:	4601      	mov	r1, r0
 800bc92:	4620      	mov	r0, r4
 800bc94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc98:	f000 b818 	b.w	800bccc <_kill_r>
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d00a      	beq.n	800bcb6 <_raise_r+0x4c>
 800bca0:	1c59      	adds	r1, r3, #1
 800bca2:	d103      	bne.n	800bcac <_raise_r+0x42>
 800bca4:	2316      	movs	r3, #22
 800bca6:	6003      	str	r3, [r0, #0]
 800bca8:	2001      	movs	r0, #1
 800bcaa:	e7e7      	b.n	800bc7c <_raise_r+0x12>
 800bcac:	2400      	movs	r4, #0
 800bcae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bcb2:	4628      	mov	r0, r5
 800bcb4:	4798      	blx	r3
 800bcb6:	2000      	movs	r0, #0
 800bcb8:	e7e0      	b.n	800bc7c <_raise_r+0x12>
	...

0800bcbc <raise>:
 800bcbc:	4b02      	ldr	r3, [pc, #8]	; (800bcc8 <raise+0xc>)
 800bcbe:	4601      	mov	r1, r0
 800bcc0:	6818      	ldr	r0, [r3, #0]
 800bcc2:	f7ff bfd2 	b.w	800bc6a <_raise_r>
 800bcc6:	bf00      	nop
 800bcc8:	200001f8 	.word	0x200001f8

0800bccc <_kill_r>:
 800bccc:	b538      	push	{r3, r4, r5, lr}
 800bcce:	4d07      	ldr	r5, [pc, #28]	; (800bcec <_kill_r+0x20>)
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	4608      	mov	r0, r1
 800bcd6:	4611      	mov	r1, r2
 800bcd8:	602b      	str	r3, [r5, #0]
 800bcda:	f7f7 fed7 	bl	8003a8c <_kill>
 800bcde:	1c43      	adds	r3, r0, #1
 800bce0:	d102      	bne.n	800bce8 <_kill_r+0x1c>
 800bce2:	682b      	ldr	r3, [r5, #0]
 800bce4:	b103      	cbz	r3, 800bce8 <_kill_r+0x1c>
 800bce6:	6023      	str	r3, [r4, #0]
 800bce8:	bd38      	pop	{r3, r4, r5, pc}
 800bcea:	bf00      	nop
 800bcec:	20002c54 	.word	0x20002c54

0800bcf0 <_getpid_r>:
 800bcf0:	f7f7 bec4 	b.w	8003a7c <_getpid>

0800bcf4 <pow>:
 800bcf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcf6:	ed2d 8b02 	vpush	{d8}
 800bcfa:	eeb0 8a40 	vmov.f32	s16, s0
 800bcfe:	eef0 8a60 	vmov.f32	s17, s1
 800bd02:	ec55 4b11 	vmov	r4, r5, d1
 800bd06:	f000 fa1b 	bl	800c140 <__ieee754_pow>
 800bd0a:	4622      	mov	r2, r4
 800bd0c:	462b      	mov	r3, r5
 800bd0e:	4620      	mov	r0, r4
 800bd10:	4629      	mov	r1, r5
 800bd12:	ec57 6b10 	vmov	r6, r7, d0
 800bd16:	f7f4 ff19 	bl	8000b4c <__aeabi_dcmpun>
 800bd1a:	2800      	cmp	r0, #0
 800bd1c:	d13b      	bne.n	800bd96 <pow+0xa2>
 800bd1e:	ec51 0b18 	vmov	r0, r1, d8
 800bd22:	2200      	movs	r2, #0
 800bd24:	2300      	movs	r3, #0
 800bd26:	f7f4 fedf 	bl	8000ae8 <__aeabi_dcmpeq>
 800bd2a:	b1b8      	cbz	r0, 800bd5c <pow+0x68>
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	2300      	movs	r3, #0
 800bd30:	4620      	mov	r0, r4
 800bd32:	4629      	mov	r1, r5
 800bd34:	f7f4 fed8 	bl	8000ae8 <__aeabi_dcmpeq>
 800bd38:	2800      	cmp	r0, #0
 800bd3a:	d146      	bne.n	800bdca <pow+0xd6>
 800bd3c:	ec45 4b10 	vmov	d0, r4, r5
 800bd40:	f000 f9f3 	bl	800c12a <finite>
 800bd44:	b338      	cbz	r0, 800bd96 <pow+0xa2>
 800bd46:	2200      	movs	r2, #0
 800bd48:	2300      	movs	r3, #0
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	4629      	mov	r1, r5
 800bd4e:	f7f4 fed5 	bl	8000afc <__aeabi_dcmplt>
 800bd52:	b300      	cbz	r0, 800bd96 <pow+0xa2>
 800bd54:	f7fc ff9c 	bl	8008c90 <__errno>
 800bd58:	2322      	movs	r3, #34	; 0x22
 800bd5a:	e01b      	b.n	800bd94 <pow+0xa0>
 800bd5c:	ec47 6b10 	vmov	d0, r6, r7
 800bd60:	f000 f9e3 	bl	800c12a <finite>
 800bd64:	b9e0      	cbnz	r0, 800bda0 <pow+0xac>
 800bd66:	eeb0 0a48 	vmov.f32	s0, s16
 800bd6a:	eef0 0a68 	vmov.f32	s1, s17
 800bd6e:	f000 f9dc 	bl	800c12a <finite>
 800bd72:	b1a8      	cbz	r0, 800bda0 <pow+0xac>
 800bd74:	ec45 4b10 	vmov	d0, r4, r5
 800bd78:	f000 f9d7 	bl	800c12a <finite>
 800bd7c:	b180      	cbz	r0, 800bda0 <pow+0xac>
 800bd7e:	4632      	mov	r2, r6
 800bd80:	463b      	mov	r3, r7
 800bd82:	4630      	mov	r0, r6
 800bd84:	4639      	mov	r1, r7
 800bd86:	f7f4 fee1 	bl	8000b4c <__aeabi_dcmpun>
 800bd8a:	2800      	cmp	r0, #0
 800bd8c:	d0e2      	beq.n	800bd54 <pow+0x60>
 800bd8e:	f7fc ff7f 	bl	8008c90 <__errno>
 800bd92:	2321      	movs	r3, #33	; 0x21
 800bd94:	6003      	str	r3, [r0, #0]
 800bd96:	ecbd 8b02 	vpop	{d8}
 800bd9a:	ec47 6b10 	vmov	d0, r6, r7
 800bd9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bda0:	2200      	movs	r2, #0
 800bda2:	2300      	movs	r3, #0
 800bda4:	4630      	mov	r0, r6
 800bda6:	4639      	mov	r1, r7
 800bda8:	f7f4 fe9e 	bl	8000ae8 <__aeabi_dcmpeq>
 800bdac:	2800      	cmp	r0, #0
 800bdae:	d0f2      	beq.n	800bd96 <pow+0xa2>
 800bdb0:	eeb0 0a48 	vmov.f32	s0, s16
 800bdb4:	eef0 0a68 	vmov.f32	s1, s17
 800bdb8:	f000 f9b7 	bl	800c12a <finite>
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	d0ea      	beq.n	800bd96 <pow+0xa2>
 800bdc0:	ec45 4b10 	vmov	d0, r4, r5
 800bdc4:	f000 f9b1 	bl	800c12a <finite>
 800bdc8:	e7c3      	b.n	800bd52 <pow+0x5e>
 800bdca:	4f01      	ldr	r7, [pc, #4]	; (800bdd0 <pow+0xdc>)
 800bdcc:	2600      	movs	r6, #0
 800bdce:	e7e2      	b.n	800bd96 <pow+0xa2>
 800bdd0:	3ff00000 	.word	0x3ff00000
 800bdd4:	00000000 	.word	0x00000000

0800bdd8 <atan>:
 800bdd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bddc:	ec55 4b10 	vmov	r4, r5, d0
 800bde0:	4bc3      	ldr	r3, [pc, #780]	; (800c0f0 <atan+0x318>)
 800bde2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bde6:	429e      	cmp	r6, r3
 800bde8:	46ab      	mov	fp, r5
 800bdea:	dd18      	ble.n	800be1e <atan+0x46>
 800bdec:	4bc1      	ldr	r3, [pc, #772]	; (800c0f4 <atan+0x31c>)
 800bdee:	429e      	cmp	r6, r3
 800bdf0:	dc01      	bgt.n	800bdf6 <atan+0x1e>
 800bdf2:	d109      	bne.n	800be08 <atan+0x30>
 800bdf4:	b144      	cbz	r4, 800be08 <atan+0x30>
 800bdf6:	4622      	mov	r2, r4
 800bdf8:	462b      	mov	r3, r5
 800bdfa:	4620      	mov	r0, r4
 800bdfc:	4629      	mov	r1, r5
 800bdfe:	f7f4 fa55 	bl	80002ac <__adddf3>
 800be02:	4604      	mov	r4, r0
 800be04:	460d      	mov	r5, r1
 800be06:	e006      	b.n	800be16 <atan+0x3e>
 800be08:	f1bb 0f00 	cmp.w	fp, #0
 800be0c:	f300 8131 	bgt.w	800c072 <atan+0x29a>
 800be10:	a59b      	add	r5, pc, #620	; (adr r5, 800c080 <atan+0x2a8>)
 800be12:	e9d5 4500 	ldrd	r4, r5, [r5]
 800be16:	ec45 4b10 	vmov	d0, r4, r5
 800be1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be1e:	4bb6      	ldr	r3, [pc, #728]	; (800c0f8 <atan+0x320>)
 800be20:	429e      	cmp	r6, r3
 800be22:	dc14      	bgt.n	800be4e <atan+0x76>
 800be24:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800be28:	429e      	cmp	r6, r3
 800be2a:	dc0d      	bgt.n	800be48 <atan+0x70>
 800be2c:	a396      	add	r3, pc, #600	; (adr r3, 800c088 <atan+0x2b0>)
 800be2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be32:	ee10 0a10 	vmov	r0, s0
 800be36:	4629      	mov	r1, r5
 800be38:	f7f4 fa38 	bl	80002ac <__adddf3>
 800be3c:	4baf      	ldr	r3, [pc, #700]	; (800c0fc <atan+0x324>)
 800be3e:	2200      	movs	r2, #0
 800be40:	f7f4 fe7a 	bl	8000b38 <__aeabi_dcmpgt>
 800be44:	2800      	cmp	r0, #0
 800be46:	d1e6      	bne.n	800be16 <atan+0x3e>
 800be48:	f04f 3aff 	mov.w	sl, #4294967295
 800be4c:	e02b      	b.n	800bea6 <atan+0xce>
 800be4e:	f000 f963 	bl	800c118 <fabs>
 800be52:	4bab      	ldr	r3, [pc, #684]	; (800c100 <atan+0x328>)
 800be54:	429e      	cmp	r6, r3
 800be56:	ec55 4b10 	vmov	r4, r5, d0
 800be5a:	f300 80bf 	bgt.w	800bfdc <atan+0x204>
 800be5e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800be62:	429e      	cmp	r6, r3
 800be64:	f300 80a0 	bgt.w	800bfa8 <atan+0x1d0>
 800be68:	ee10 2a10 	vmov	r2, s0
 800be6c:	ee10 0a10 	vmov	r0, s0
 800be70:	462b      	mov	r3, r5
 800be72:	4629      	mov	r1, r5
 800be74:	f7f4 fa1a 	bl	80002ac <__adddf3>
 800be78:	4ba0      	ldr	r3, [pc, #640]	; (800c0fc <atan+0x324>)
 800be7a:	2200      	movs	r2, #0
 800be7c:	f7f4 fa14 	bl	80002a8 <__aeabi_dsub>
 800be80:	2200      	movs	r2, #0
 800be82:	4606      	mov	r6, r0
 800be84:	460f      	mov	r7, r1
 800be86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800be8a:	4620      	mov	r0, r4
 800be8c:	4629      	mov	r1, r5
 800be8e:	f7f4 fa0d 	bl	80002ac <__adddf3>
 800be92:	4602      	mov	r2, r0
 800be94:	460b      	mov	r3, r1
 800be96:	4630      	mov	r0, r6
 800be98:	4639      	mov	r1, r7
 800be9a:	f7f4 fce7 	bl	800086c <__aeabi_ddiv>
 800be9e:	f04f 0a00 	mov.w	sl, #0
 800bea2:	4604      	mov	r4, r0
 800bea4:	460d      	mov	r5, r1
 800bea6:	4622      	mov	r2, r4
 800bea8:	462b      	mov	r3, r5
 800beaa:	4620      	mov	r0, r4
 800beac:	4629      	mov	r1, r5
 800beae:	f7f4 fbb3 	bl	8000618 <__aeabi_dmul>
 800beb2:	4602      	mov	r2, r0
 800beb4:	460b      	mov	r3, r1
 800beb6:	4680      	mov	r8, r0
 800beb8:	4689      	mov	r9, r1
 800beba:	f7f4 fbad 	bl	8000618 <__aeabi_dmul>
 800bebe:	a374      	add	r3, pc, #464	; (adr r3, 800c090 <atan+0x2b8>)
 800bec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec4:	4606      	mov	r6, r0
 800bec6:	460f      	mov	r7, r1
 800bec8:	f7f4 fba6 	bl	8000618 <__aeabi_dmul>
 800becc:	a372      	add	r3, pc, #456	; (adr r3, 800c098 <atan+0x2c0>)
 800bece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed2:	f7f4 f9eb 	bl	80002ac <__adddf3>
 800bed6:	4632      	mov	r2, r6
 800bed8:	463b      	mov	r3, r7
 800beda:	f7f4 fb9d 	bl	8000618 <__aeabi_dmul>
 800bede:	a370      	add	r3, pc, #448	; (adr r3, 800c0a0 <atan+0x2c8>)
 800bee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee4:	f7f4 f9e2 	bl	80002ac <__adddf3>
 800bee8:	4632      	mov	r2, r6
 800beea:	463b      	mov	r3, r7
 800beec:	f7f4 fb94 	bl	8000618 <__aeabi_dmul>
 800bef0:	a36d      	add	r3, pc, #436	; (adr r3, 800c0a8 <atan+0x2d0>)
 800bef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef6:	f7f4 f9d9 	bl	80002ac <__adddf3>
 800befa:	4632      	mov	r2, r6
 800befc:	463b      	mov	r3, r7
 800befe:	f7f4 fb8b 	bl	8000618 <__aeabi_dmul>
 800bf02:	a36b      	add	r3, pc, #428	; (adr r3, 800c0b0 <atan+0x2d8>)
 800bf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf08:	f7f4 f9d0 	bl	80002ac <__adddf3>
 800bf0c:	4632      	mov	r2, r6
 800bf0e:	463b      	mov	r3, r7
 800bf10:	f7f4 fb82 	bl	8000618 <__aeabi_dmul>
 800bf14:	a368      	add	r3, pc, #416	; (adr r3, 800c0b8 <atan+0x2e0>)
 800bf16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1a:	f7f4 f9c7 	bl	80002ac <__adddf3>
 800bf1e:	4642      	mov	r2, r8
 800bf20:	464b      	mov	r3, r9
 800bf22:	f7f4 fb79 	bl	8000618 <__aeabi_dmul>
 800bf26:	a366      	add	r3, pc, #408	; (adr r3, 800c0c0 <atan+0x2e8>)
 800bf28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2c:	4680      	mov	r8, r0
 800bf2e:	4689      	mov	r9, r1
 800bf30:	4630      	mov	r0, r6
 800bf32:	4639      	mov	r1, r7
 800bf34:	f7f4 fb70 	bl	8000618 <__aeabi_dmul>
 800bf38:	a363      	add	r3, pc, #396	; (adr r3, 800c0c8 <atan+0x2f0>)
 800bf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3e:	f7f4 f9b3 	bl	80002a8 <__aeabi_dsub>
 800bf42:	4632      	mov	r2, r6
 800bf44:	463b      	mov	r3, r7
 800bf46:	f7f4 fb67 	bl	8000618 <__aeabi_dmul>
 800bf4a:	a361      	add	r3, pc, #388	; (adr r3, 800c0d0 <atan+0x2f8>)
 800bf4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf50:	f7f4 f9aa 	bl	80002a8 <__aeabi_dsub>
 800bf54:	4632      	mov	r2, r6
 800bf56:	463b      	mov	r3, r7
 800bf58:	f7f4 fb5e 	bl	8000618 <__aeabi_dmul>
 800bf5c:	a35e      	add	r3, pc, #376	; (adr r3, 800c0d8 <atan+0x300>)
 800bf5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf62:	f7f4 f9a1 	bl	80002a8 <__aeabi_dsub>
 800bf66:	4632      	mov	r2, r6
 800bf68:	463b      	mov	r3, r7
 800bf6a:	f7f4 fb55 	bl	8000618 <__aeabi_dmul>
 800bf6e:	a35c      	add	r3, pc, #368	; (adr r3, 800c0e0 <atan+0x308>)
 800bf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf74:	f7f4 f998 	bl	80002a8 <__aeabi_dsub>
 800bf78:	4632      	mov	r2, r6
 800bf7a:	463b      	mov	r3, r7
 800bf7c:	f7f4 fb4c 	bl	8000618 <__aeabi_dmul>
 800bf80:	4602      	mov	r2, r0
 800bf82:	460b      	mov	r3, r1
 800bf84:	4640      	mov	r0, r8
 800bf86:	4649      	mov	r1, r9
 800bf88:	f7f4 f990 	bl	80002ac <__adddf3>
 800bf8c:	4622      	mov	r2, r4
 800bf8e:	462b      	mov	r3, r5
 800bf90:	f7f4 fb42 	bl	8000618 <__aeabi_dmul>
 800bf94:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bf98:	4602      	mov	r2, r0
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	d14b      	bne.n	800c036 <atan+0x25e>
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	4629      	mov	r1, r5
 800bfa2:	f7f4 f981 	bl	80002a8 <__aeabi_dsub>
 800bfa6:	e72c      	b.n	800be02 <atan+0x2a>
 800bfa8:	ee10 0a10 	vmov	r0, s0
 800bfac:	4b53      	ldr	r3, [pc, #332]	; (800c0fc <atan+0x324>)
 800bfae:	2200      	movs	r2, #0
 800bfb0:	4629      	mov	r1, r5
 800bfb2:	f7f4 f979 	bl	80002a8 <__aeabi_dsub>
 800bfb6:	4b51      	ldr	r3, [pc, #324]	; (800c0fc <atan+0x324>)
 800bfb8:	4606      	mov	r6, r0
 800bfba:	460f      	mov	r7, r1
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	4629      	mov	r1, r5
 800bfc2:	f7f4 f973 	bl	80002ac <__adddf3>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	460b      	mov	r3, r1
 800bfca:	4630      	mov	r0, r6
 800bfcc:	4639      	mov	r1, r7
 800bfce:	f7f4 fc4d 	bl	800086c <__aeabi_ddiv>
 800bfd2:	f04f 0a01 	mov.w	sl, #1
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	460d      	mov	r5, r1
 800bfda:	e764      	b.n	800bea6 <atan+0xce>
 800bfdc:	4b49      	ldr	r3, [pc, #292]	; (800c104 <atan+0x32c>)
 800bfde:	429e      	cmp	r6, r3
 800bfe0:	da1d      	bge.n	800c01e <atan+0x246>
 800bfe2:	ee10 0a10 	vmov	r0, s0
 800bfe6:	4b48      	ldr	r3, [pc, #288]	; (800c108 <atan+0x330>)
 800bfe8:	2200      	movs	r2, #0
 800bfea:	4629      	mov	r1, r5
 800bfec:	f7f4 f95c 	bl	80002a8 <__aeabi_dsub>
 800bff0:	4b45      	ldr	r3, [pc, #276]	; (800c108 <atan+0x330>)
 800bff2:	4606      	mov	r6, r0
 800bff4:	460f      	mov	r7, r1
 800bff6:	2200      	movs	r2, #0
 800bff8:	4620      	mov	r0, r4
 800bffa:	4629      	mov	r1, r5
 800bffc:	f7f4 fb0c 	bl	8000618 <__aeabi_dmul>
 800c000:	4b3e      	ldr	r3, [pc, #248]	; (800c0fc <atan+0x324>)
 800c002:	2200      	movs	r2, #0
 800c004:	f7f4 f952 	bl	80002ac <__adddf3>
 800c008:	4602      	mov	r2, r0
 800c00a:	460b      	mov	r3, r1
 800c00c:	4630      	mov	r0, r6
 800c00e:	4639      	mov	r1, r7
 800c010:	f7f4 fc2c 	bl	800086c <__aeabi_ddiv>
 800c014:	f04f 0a02 	mov.w	sl, #2
 800c018:	4604      	mov	r4, r0
 800c01a:	460d      	mov	r5, r1
 800c01c:	e743      	b.n	800bea6 <atan+0xce>
 800c01e:	462b      	mov	r3, r5
 800c020:	ee10 2a10 	vmov	r2, s0
 800c024:	4939      	ldr	r1, [pc, #228]	; (800c10c <atan+0x334>)
 800c026:	2000      	movs	r0, #0
 800c028:	f7f4 fc20 	bl	800086c <__aeabi_ddiv>
 800c02c:	f04f 0a03 	mov.w	sl, #3
 800c030:	4604      	mov	r4, r0
 800c032:	460d      	mov	r5, r1
 800c034:	e737      	b.n	800bea6 <atan+0xce>
 800c036:	4b36      	ldr	r3, [pc, #216]	; (800c110 <atan+0x338>)
 800c038:	4e36      	ldr	r6, [pc, #216]	; (800c114 <atan+0x33c>)
 800c03a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c042:	f7f4 f931 	bl	80002a8 <__aeabi_dsub>
 800c046:	4622      	mov	r2, r4
 800c048:	462b      	mov	r3, r5
 800c04a:	f7f4 f92d 	bl	80002a8 <__aeabi_dsub>
 800c04e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c052:	4602      	mov	r2, r0
 800c054:	460b      	mov	r3, r1
 800c056:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c05a:	f7f4 f925 	bl	80002a8 <__aeabi_dsub>
 800c05e:	f1bb 0f00 	cmp.w	fp, #0
 800c062:	4604      	mov	r4, r0
 800c064:	460d      	mov	r5, r1
 800c066:	f6bf aed6 	bge.w	800be16 <atan+0x3e>
 800c06a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c06e:	461d      	mov	r5, r3
 800c070:	e6d1      	b.n	800be16 <atan+0x3e>
 800c072:	a51d      	add	r5, pc, #116	; (adr r5, 800c0e8 <atan+0x310>)
 800c074:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c078:	e6cd      	b.n	800be16 <atan+0x3e>
 800c07a:	bf00      	nop
 800c07c:	f3af 8000 	nop.w
 800c080:	54442d18 	.word	0x54442d18
 800c084:	bff921fb 	.word	0xbff921fb
 800c088:	8800759c 	.word	0x8800759c
 800c08c:	7e37e43c 	.word	0x7e37e43c
 800c090:	e322da11 	.word	0xe322da11
 800c094:	3f90ad3a 	.word	0x3f90ad3a
 800c098:	24760deb 	.word	0x24760deb
 800c09c:	3fa97b4b 	.word	0x3fa97b4b
 800c0a0:	a0d03d51 	.word	0xa0d03d51
 800c0a4:	3fb10d66 	.word	0x3fb10d66
 800c0a8:	c54c206e 	.word	0xc54c206e
 800c0ac:	3fb745cd 	.word	0x3fb745cd
 800c0b0:	920083ff 	.word	0x920083ff
 800c0b4:	3fc24924 	.word	0x3fc24924
 800c0b8:	5555550d 	.word	0x5555550d
 800c0bc:	3fd55555 	.word	0x3fd55555
 800c0c0:	2c6a6c2f 	.word	0x2c6a6c2f
 800c0c4:	bfa2b444 	.word	0xbfa2b444
 800c0c8:	52defd9a 	.word	0x52defd9a
 800c0cc:	3fadde2d 	.word	0x3fadde2d
 800c0d0:	af749a6d 	.word	0xaf749a6d
 800c0d4:	3fb3b0f2 	.word	0x3fb3b0f2
 800c0d8:	fe231671 	.word	0xfe231671
 800c0dc:	3fbc71c6 	.word	0x3fbc71c6
 800c0e0:	9998ebc4 	.word	0x9998ebc4
 800c0e4:	3fc99999 	.word	0x3fc99999
 800c0e8:	54442d18 	.word	0x54442d18
 800c0ec:	3ff921fb 	.word	0x3ff921fb
 800c0f0:	440fffff 	.word	0x440fffff
 800c0f4:	7ff00000 	.word	0x7ff00000
 800c0f8:	3fdbffff 	.word	0x3fdbffff
 800c0fc:	3ff00000 	.word	0x3ff00000
 800c100:	3ff2ffff 	.word	0x3ff2ffff
 800c104:	40038000 	.word	0x40038000
 800c108:	3ff80000 	.word	0x3ff80000
 800c10c:	bff00000 	.word	0xbff00000
 800c110:	0800d6f0 	.word	0x0800d6f0
 800c114:	0800d6d0 	.word	0x0800d6d0

0800c118 <fabs>:
 800c118:	ec51 0b10 	vmov	r0, r1, d0
 800c11c:	ee10 2a10 	vmov	r2, s0
 800c120:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c124:	ec43 2b10 	vmov	d0, r2, r3
 800c128:	4770      	bx	lr

0800c12a <finite>:
 800c12a:	b082      	sub	sp, #8
 800c12c:	ed8d 0b00 	vstr	d0, [sp]
 800c130:	9801      	ldr	r0, [sp, #4]
 800c132:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c136:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c13a:	0fc0      	lsrs	r0, r0, #31
 800c13c:	b002      	add	sp, #8
 800c13e:	4770      	bx	lr

0800c140 <__ieee754_pow>:
 800c140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c144:	ed2d 8b06 	vpush	{d8-d10}
 800c148:	b089      	sub	sp, #36	; 0x24
 800c14a:	ed8d 1b00 	vstr	d1, [sp]
 800c14e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c152:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c156:	ea58 0102 	orrs.w	r1, r8, r2
 800c15a:	ec57 6b10 	vmov	r6, r7, d0
 800c15e:	d115      	bne.n	800c18c <__ieee754_pow+0x4c>
 800c160:	19b3      	adds	r3, r6, r6
 800c162:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c166:	4152      	adcs	r2, r2
 800c168:	4299      	cmp	r1, r3
 800c16a:	4b89      	ldr	r3, [pc, #548]	; (800c390 <__ieee754_pow+0x250>)
 800c16c:	4193      	sbcs	r3, r2
 800c16e:	f080 84d1 	bcs.w	800cb14 <__ieee754_pow+0x9d4>
 800c172:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c176:	4630      	mov	r0, r6
 800c178:	4639      	mov	r1, r7
 800c17a:	f7f4 f897 	bl	80002ac <__adddf3>
 800c17e:	ec41 0b10 	vmov	d0, r0, r1
 800c182:	b009      	add	sp, #36	; 0x24
 800c184:	ecbd 8b06 	vpop	{d8-d10}
 800c188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c18c:	4b81      	ldr	r3, [pc, #516]	; (800c394 <__ieee754_pow+0x254>)
 800c18e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c192:	429c      	cmp	r4, r3
 800c194:	ee10 aa10 	vmov	sl, s0
 800c198:	463d      	mov	r5, r7
 800c19a:	dc06      	bgt.n	800c1aa <__ieee754_pow+0x6a>
 800c19c:	d101      	bne.n	800c1a2 <__ieee754_pow+0x62>
 800c19e:	2e00      	cmp	r6, #0
 800c1a0:	d1e7      	bne.n	800c172 <__ieee754_pow+0x32>
 800c1a2:	4598      	cmp	r8, r3
 800c1a4:	dc01      	bgt.n	800c1aa <__ieee754_pow+0x6a>
 800c1a6:	d10f      	bne.n	800c1c8 <__ieee754_pow+0x88>
 800c1a8:	b172      	cbz	r2, 800c1c8 <__ieee754_pow+0x88>
 800c1aa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c1ae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c1b2:	ea55 050a 	orrs.w	r5, r5, sl
 800c1b6:	d1dc      	bne.n	800c172 <__ieee754_pow+0x32>
 800c1b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c1bc:	18db      	adds	r3, r3, r3
 800c1be:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c1c2:	4152      	adcs	r2, r2
 800c1c4:	429d      	cmp	r5, r3
 800c1c6:	e7d0      	b.n	800c16a <__ieee754_pow+0x2a>
 800c1c8:	2d00      	cmp	r5, #0
 800c1ca:	da3b      	bge.n	800c244 <__ieee754_pow+0x104>
 800c1cc:	4b72      	ldr	r3, [pc, #456]	; (800c398 <__ieee754_pow+0x258>)
 800c1ce:	4598      	cmp	r8, r3
 800c1d0:	dc51      	bgt.n	800c276 <__ieee754_pow+0x136>
 800c1d2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c1d6:	4598      	cmp	r8, r3
 800c1d8:	f340 84ab 	ble.w	800cb32 <__ieee754_pow+0x9f2>
 800c1dc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c1e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c1e4:	2b14      	cmp	r3, #20
 800c1e6:	dd0f      	ble.n	800c208 <__ieee754_pow+0xc8>
 800c1e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c1ec:	fa22 f103 	lsr.w	r1, r2, r3
 800c1f0:	fa01 f303 	lsl.w	r3, r1, r3
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	f040 849c 	bne.w	800cb32 <__ieee754_pow+0x9f2>
 800c1fa:	f001 0101 	and.w	r1, r1, #1
 800c1fe:	f1c1 0302 	rsb	r3, r1, #2
 800c202:	9304      	str	r3, [sp, #16]
 800c204:	b182      	cbz	r2, 800c228 <__ieee754_pow+0xe8>
 800c206:	e05f      	b.n	800c2c8 <__ieee754_pow+0x188>
 800c208:	2a00      	cmp	r2, #0
 800c20a:	d15b      	bne.n	800c2c4 <__ieee754_pow+0x184>
 800c20c:	f1c3 0314 	rsb	r3, r3, #20
 800c210:	fa48 f103 	asr.w	r1, r8, r3
 800c214:	fa01 f303 	lsl.w	r3, r1, r3
 800c218:	4543      	cmp	r3, r8
 800c21a:	f040 8487 	bne.w	800cb2c <__ieee754_pow+0x9ec>
 800c21e:	f001 0101 	and.w	r1, r1, #1
 800c222:	f1c1 0302 	rsb	r3, r1, #2
 800c226:	9304      	str	r3, [sp, #16]
 800c228:	4b5c      	ldr	r3, [pc, #368]	; (800c39c <__ieee754_pow+0x25c>)
 800c22a:	4598      	cmp	r8, r3
 800c22c:	d132      	bne.n	800c294 <__ieee754_pow+0x154>
 800c22e:	f1b9 0f00 	cmp.w	r9, #0
 800c232:	f280 8477 	bge.w	800cb24 <__ieee754_pow+0x9e4>
 800c236:	4959      	ldr	r1, [pc, #356]	; (800c39c <__ieee754_pow+0x25c>)
 800c238:	4632      	mov	r2, r6
 800c23a:	463b      	mov	r3, r7
 800c23c:	2000      	movs	r0, #0
 800c23e:	f7f4 fb15 	bl	800086c <__aeabi_ddiv>
 800c242:	e79c      	b.n	800c17e <__ieee754_pow+0x3e>
 800c244:	2300      	movs	r3, #0
 800c246:	9304      	str	r3, [sp, #16]
 800c248:	2a00      	cmp	r2, #0
 800c24a:	d13d      	bne.n	800c2c8 <__ieee754_pow+0x188>
 800c24c:	4b51      	ldr	r3, [pc, #324]	; (800c394 <__ieee754_pow+0x254>)
 800c24e:	4598      	cmp	r8, r3
 800c250:	d1ea      	bne.n	800c228 <__ieee754_pow+0xe8>
 800c252:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c256:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c25a:	ea53 030a 	orrs.w	r3, r3, sl
 800c25e:	f000 8459 	beq.w	800cb14 <__ieee754_pow+0x9d4>
 800c262:	4b4f      	ldr	r3, [pc, #316]	; (800c3a0 <__ieee754_pow+0x260>)
 800c264:	429c      	cmp	r4, r3
 800c266:	dd08      	ble.n	800c27a <__ieee754_pow+0x13a>
 800c268:	f1b9 0f00 	cmp.w	r9, #0
 800c26c:	f2c0 8456 	blt.w	800cb1c <__ieee754_pow+0x9dc>
 800c270:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c274:	e783      	b.n	800c17e <__ieee754_pow+0x3e>
 800c276:	2302      	movs	r3, #2
 800c278:	e7e5      	b.n	800c246 <__ieee754_pow+0x106>
 800c27a:	f1b9 0f00 	cmp.w	r9, #0
 800c27e:	f04f 0000 	mov.w	r0, #0
 800c282:	f04f 0100 	mov.w	r1, #0
 800c286:	f6bf af7a 	bge.w	800c17e <__ieee754_pow+0x3e>
 800c28a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c28e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c292:	e774      	b.n	800c17e <__ieee754_pow+0x3e>
 800c294:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c298:	d106      	bne.n	800c2a8 <__ieee754_pow+0x168>
 800c29a:	4632      	mov	r2, r6
 800c29c:	463b      	mov	r3, r7
 800c29e:	4630      	mov	r0, r6
 800c2a0:	4639      	mov	r1, r7
 800c2a2:	f7f4 f9b9 	bl	8000618 <__aeabi_dmul>
 800c2a6:	e76a      	b.n	800c17e <__ieee754_pow+0x3e>
 800c2a8:	4b3e      	ldr	r3, [pc, #248]	; (800c3a4 <__ieee754_pow+0x264>)
 800c2aa:	4599      	cmp	r9, r3
 800c2ac:	d10c      	bne.n	800c2c8 <__ieee754_pow+0x188>
 800c2ae:	2d00      	cmp	r5, #0
 800c2b0:	db0a      	blt.n	800c2c8 <__ieee754_pow+0x188>
 800c2b2:	ec47 6b10 	vmov	d0, r6, r7
 800c2b6:	b009      	add	sp, #36	; 0x24
 800c2b8:	ecbd 8b06 	vpop	{d8-d10}
 800c2bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c0:	f000 bd18 	b.w	800ccf4 <__ieee754_sqrt>
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	9304      	str	r3, [sp, #16]
 800c2c8:	ec47 6b10 	vmov	d0, r6, r7
 800c2cc:	f7ff ff24 	bl	800c118 <fabs>
 800c2d0:	ec51 0b10 	vmov	r0, r1, d0
 800c2d4:	f1ba 0f00 	cmp.w	sl, #0
 800c2d8:	d129      	bne.n	800c32e <__ieee754_pow+0x1ee>
 800c2da:	b124      	cbz	r4, 800c2e6 <__ieee754_pow+0x1a6>
 800c2dc:	4b2f      	ldr	r3, [pc, #188]	; (800c39c <__ieee754_pow+0x25c>)
 800c2de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d123      	bne.n	800c32e <__ieee754_pow+0x1ee>
 800c2e6:	f1b9 0f00 	cmp.w	r9, #0
 800c2ea:	da05      	bge.n	800c2f8 <__ieee754_pow+0x1b8>
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	2000      	movs	r0, #0
 800c2f2:	492a      	ldr	r1, [pc, #168]	; (800c39c <__ieee754_pow+0x25c>)
 800c2f4:	f7f4 faba 	bl	800086c <__aeabi_ddiv>
 800c2f8:	2d00      	cmp	r5, #0
 800c2fa:	f6bf af40 	bge.w	800c17e <__ieee754_pow+0x3e>
 800c2fe:	9b04      	ldr	r3, [sp, #16]
 800c300:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c304:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c308:	431c      	orrs	r4, r3
 800c30a:	d108      	bne.n	800c31e <__ieee754_pow+0x1de>
 800c30c:	4602      	mov	r2, r0
 800c30e:	460b      	mov	r3, r1
 800c310:	4610      	mov	r0, r2
 800c312:	4619      	mov	r1, r3
 800c314:	f7f3 ffc8 	bl	80002a8 <__aeabi_dsub>
 800c318:	4602      	mov	r2, r0
 800c31a:	460b      	mov	r3, r1
 800c31c:	e78f      	b.n	800c23e <__ieee754_pow+0xfe>
 800c31e:	9b04      	ldr	r3, [sp, #16]
 800c320:	2b01      	cmp	r3, #1
 800c322:	f47f af2c 	bne.w	800c17e <__ieee754_pow+0x3e>
 800c326:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c32a:	4619      	mov	r1, r3
 800c32c:	e727      	b.n	800c17e <__ieee754_pow+0x3e>
 800c32e:	0feb      	lsrs	r3, r5, #31
 800c330:	3b01      	subs	r3, #1
 800c332:	9306      	str	r3, [sp, #24]
 800c334:	9a06      	ldr	r2, [sp, #24]
 800c336:	9b04      	ldr	r3, [sp, #16]
 800c338:	4313      	orrs	r3, r2
 800c33a:	d102      	bne.n	800c342 <__ieee754_pow+0x202>
 800c33c:	4632      	mov	r2, r6
 800c33e:	463b      	mov	r3, r7
 800c340:	e7e6      	b.n	800c310 <__ieee754_pow+0x1d0>
 800c342:	4b19      	ldr	r3, [pc, #100]	; (800c3a8 <__ieee754_pow+0x268>)
 800c344:	4598      	cmp	r8, r3
 800c346:	f340 80fb 	ble.w	800c540 <__ieee754_pow+0x400>
 800c34a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c34e:	4598      	cmp	r8, r3
 800c350:	4b13      	ldr	r3, [pc, #76]	; (800c3a0 <__ieee754_pow+0x260>)
 800c352:	dd0c      	ble.n	800c36e <__ieee754_pow+0x22e>
 800c354:	429c      	cmp	r4, r3
 800c356:	dc0f      	bgt.n	800c378 <__ieee754_pow+0x238>
 800c358:	f1b9 0f00 	cmp.w	r9, #0
 800c35c:	da0f      	bge.n	800c37e <__ieee754_pow+0x23e>
 800c35e:	2000      	movs	r0, #0
 800c360:	b009      	add	sp, #36	; 0x24
 800c362:	ecbd 8b06 	vpop	{d8-d10}
 800c366:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c36a:	f000 bcba 	b.w	800cce2 <__math_oflow>
 800c36e:	429c      	cmp	r4, r3
 800c370:	dbf2      	blt.n	800c358 <__ieee754_pow+0x218>
 800c372:	4b0a      	ldr	r3, [pc, #40]	; (800c39c <__ieee754_pow+0x25c>)
 800c374:	429c      	cmp	r4, r3
 800c376:	dd19      	ble.n	800c3ac <__ieee754_pow+0x26c>
 800c378:	f1b9 0f00 	cmp.w	r9, #0
 800c37c:	dcef      	bgt.n	800c35e <__ieee754_pow+0x21e>
 800c37e:	2000      	movs	r0, #0
 800c380:	b009      	add	sp, #36	; 0x24
 800c382:	ecbd 8b06 	vpop	{d8-d10}
 800c386:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c38a:	f000 bca1 	b.w	800ccd0 <__math_uflow>
 800c38e:	bf00      	nop
 800c390:	fff00000 	.word	0xfff00000
 800c394:	7ff00000 	.word	0x7ff00000
 800c398:	433fffff 	.word	0x433fffff
 800c39c:	3ff00000 	.word	0x3ff00000
 800c3a0:	3fefffff 	.word	0x3fefffff
 800c3a4:	3fe00000 	.word	0x3fe00000
 800c3a8:	41e00000 	.word	0x41e00000
 800c3ac:	4b60      	ldr	r3, [pc, #384]	; (800c530 <__ieee754_pow+0x3f0>)
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f7f3 ff7a 	bl	80002a8 <__aeabi_dsub>
 800c3b4:	a354      	add	r3, pc, #336	; (adr r3, 800c508 <__ieee754_pow+0x3c8>)
 800c3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ba:	4604      	mov	r4, r0
 800c3bc:	460d      	mov	r5, r1
 800c3be:	f7f4 f92b 	bl	8000618 <__aeabi_dmul>
 800c3c2:	a353      	add	r3, pc, #332	; (adr r3, 800c510 <__ieee754_pow+0x3d0>)
 800c3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c8:	4606      	mov	r6, r0
 800c3ca:	460f      	mov	r7, r1
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	4629      	mov	r1, r5
 800c3d0:	f7f4 f922 	bl	8000618 <__aeabi_dmul>
 800c3d4:	4b57      	ldr	r3, [pc, #348]	; (800c534 <__ieee754_pow+0x3f4>)
 800c3d6:	4682      	mov	sl, r0
 800c3d8:	468b      	mov	fp, r1
 800c3da:	2200      	movs	r2, #0
 800c3dc:	4620      	mov	r0, r4
 800c3de:	4629      	mov	r1, r5
 800c3e0:	f7f4 f91a 	bl	8000618 <__aeabi_dmul>
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	460b      	mov	r3, r1
 800c3e8:	a14b      	add	r1, pc, #300	; (adr r1, 800c518 <__ieee754_pow+0x3d8>)
 800c3ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3ee:	f7f3 ff5b 	bl	80002a8 <__aeabi_dsub>
 800c3f2:	4622      	mov	r2, r4
 800c3f4:	462b      	mov	r3, r5
 800c3f6:	f7f4 f90f 	bl	8000618 <__aeabi_dmul>
 800c3fa:	4602      	mov	r2, r0
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	2000      	movs	r0, #0
 800c400:	494d      	ldr	r1, [pc, #308]	; (800c538 <__ieee754_pow+0x3f8>)
 800c402:	f7f3 ff51 	bl	80002a8 <__aeabi_dsub>
 800c406:	4622      	mov	r2, r4
 800c408:	4680      	mov	r8, r0
 800c40a:	4689      	mov	r9, r1
 800c40c:	462b      	mov	r3, r5
 800c40e:	4620      	mov	r0, r4
 800c410:	4629      	mov	r1, r5
 800c412:	f7f4 f901 	bl	8000618 <__aeabi_dmul>
 800c416:	4602      	mov	r2, r0
 800c418:	460b      	mov	r3, r1
 800c41a:	4640      	mov	r0, r8
 800c41c:	4649      	mov	r1, r9
 800c41e:	f7f4 f8fb 	bl	8000618 <__aeabi_dmul>
 800c422:	a33f      	add	r3, pc, #252	; (adr r3, 800c520 <__ieee754_pow+0x3e0>)
 800c424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c428:	f7f4 f8f6 	bl	8000618 <__aeabi_dmul>
 800c42c:	4602      	mov	r2, r0
 800c42e:	460b      	mov	r3, r1
 800c430:	4650      	mov	r0, sl
 800c432:	4659      	mov	r1, fp
 800c434:	f7f3 ff38 	bl	80002a8 <__aeabi_dsub>
 800c438:	4602      	mov	r2, r0
 800c43a:	460b      	mov	r3, r1
 800c43c:	4680      	mov	r8, r0
 800c43e:	4689      	mov	r9, r1
 800c440:	4630      	mov	r0, r6
 800c442:	4639      	mov	r1, r7
 800c444:	f7f3 ff32 	bl	80002ac <__adddf3>
 800c448:	2000      	movs	r0, #0
 800c44a:	4632      	mov	r2, r6
 800c44c:	463b      	mov	r3, r7
 800c44e:	4604      	mov	r4, r0
 800c450:	460d      	mov	r5, r1
 800c452:	f7f3 ff29 	bl	80002a8 <__aeabi_dsub>
 800c456:	4602      	mov	r2, r0
 800c458:	460b      	mov	r3, r1
 800c45a:	4640      	mov	r0, r8
 800c45c:	4649      	mov	r1, r9
 800c45e:	f7f3 ff23 	bl	80002a8 <__aeabi_dsub>
 800c462:	9b04      	ldr	r3, [sp, #16]
 800c464:	9a06      	ldr	r2, [sp, #24]
 800c466:	3b01      	subs	r3, #1
 800c468:	4313      	orrs	r3, r2
 800c46a:	4682      	mov	sl, r0
 800c46c:	468b      	mov	fp, r1
 800c46e:	f040 81e7 	bne.w	800c840 <__ieee754_pow+0x700>
 800c472:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c528 <__ieee754_pow+0x3e8>
 800c476:	eeb0 8a47 	vmov.f32	s16, s14
 800c47a:	eef0 8a67 	vmov.f32	s17, s15
 800c47e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c482:	2600      	movs	r6, #0
 800c484:	4632      	mov	r2, r6
 800c486:	463b      	mov	r3, r7
 800c488:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c48c:	f7f3 ff0c 	bl	80002a8 <__aeabi_dsub>
 800c490:	4622      	mov	r2, r4
 800c492:	462b      	mov	r3, r5
 800c494:	f7f4 f8c0 	bl	8000618 <__aeabi_dmul>
 800c498:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c49c:	4680      	mov	r8, r0
 800c49e:	4689      	mov	r9, r1
 800c4a0:	4650      	mov	r0, sl
 800c4a2:	4659      	mov	r1, fp
 800c4a4:	f7f4 f8b8 	bl	8000618 <__aeabi_dmul>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	460b      	mov	r3, r1
 800c4ac:	4640      	mov	r0, r8
 800c4ae:	4649      	mov	r1, r9
 800c4b0:	f7f3 fefc 	bl	80002ac <__adddf3>
 800c4b4:	4632      	mov	r2, r6
 800c4b6:	463b      	mov	r3, r7
 800c4b8:	4680      	mov	r8, r0
 800c4ba:	4689      	mov	r9, r1
 800c4bc:	4620      	mov	r0, r4
 800c4be:	4629      	mov	r1, r5
 800c4c0:	f7f4 f8aa 	bl	8000618 <__aeabi_dmul>
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	4604      	mov	r4, r0
 800c4c8:	460d      	mov	r5, r1
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	4649      	mov	r1, r9
 800c4ce:	4640      	mov	r0, r8
 800c4d0:	f7f3 feec 	bl	80002ac <__adddf3>
 800c4d4:	4b19      	ldr	r3, [pc, #100]	; (800c53c <__ieee754_pow+0x3fc>)
 800c4d6:	4299      	cmp	r1, r3
 800c4d8:	ec45 4b19 	vmov	d9, r4, r5
 800c4dc:	4606      	mov	r6, r0
 800c4de:	460f      	mov	r7, r1
 800c4e0:	468b      	mov	fp, r1
 800c4e2:	f340 82f0 	ble.w	800cac6 <__ieee754_pow+0x986>
 800c4e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c4ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c4ee:	4303      	orrs	r3, r0
 800c4f0:	f000 81e4 	beq.w	800c8bc <__ieee754_pow+0x77c>
 800c4f4:	ec51 0b18 	vmov	r0, r1, d8
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	f7f4 fafe 	bl	8000afc <__aeabi_dcmplt>
 800c500:	3800      	subs	r0, #0
 800c502:	bf18      	it	ne
 800c504:	2001      	movne	r0, #1
 800c506:	e72b      	b.n	800c360 <__ieee754_pow+0x220>
 800c508:	60000000 	.word	0x60000000
 800c50c:	3ff71547 	.word	0x3ff71547
 800c510:	f85ddf44 	.word	0xf85ddf44
 800c514:	3e54ae0b 	.word	0x3e54ae0b
 800c518:	55555555 	.word	0x55555555
 800c51c:	3fd55555 	.word	0x3fd55555
 800c520:	652b82fe 	.word	0x652b82fe
 800c524:	3ff71547 	.word	0x3ff71547
 800c528:	00000000 	.word	0x00000000
 800c52c:	bff00000 	.word	0xbff00000
 800c530:	3ff00000 	.word	0x3ff00000
 800c534:	3fd00000 	.word	0x3fd00000
 800c538:	3fe00000 	.word	0x3fe00000
 800c53c:	408fffff 	.word	0x408fffff
 800c540:	4bd5      	ldr	r3, [pc, #852]	; (800c898 <__ieee754_pow+0x758>)
 800c542:	402b      	ands	r3, r5
 800c544:	2200      	movs	r2, #0
 800c546:	b92b      	cbnz	r3, 800c554 <__ieee754_pow+0x414>
 800c548:	4bd4      	ldr	r3, [pc, #848]	; (800c89c <__ieee754_pow+0x75c>)
 800c54a:	f7f4 f865 	bl	8000618 <__aeabi_dmul>
 800c54e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c552:	460c      	mov	r4, r1
 800c554:	1523      	asrs	r3, r4, #20
 800c556:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c55a:	4413      	add	r3, r2
 800c55c:	9305      	str	r3, [sp, #20]
 800c55e:	4bd0      	ldr	r3, [pc, #832]	; (800c8a0 <__ieee754_pow+0x760>)
 800c560:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c564:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c568:	429c      	cmp	r4, r3
 800c56a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c56e:	dd08      	ble.n	800c582 <__ieee754_pow+0x442>
 800c570:	4bcc      	ldr	r3, [pc, #816]	; (800c8a4 <__ieee754_pow+0x764>)
 800c572:	429c      	cmp	r4, r3
 800c574:	f340 8162 	ble.w	800c83c <__ieee754_pow+0x6fc>
 800c578:	9b05      	ldr	r3, [sp, #20]
 800c57a:	3301      	adds	r3, #1
 800c57c:	9305      	str	r3, [sp, #20]
 800c57e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c582:	2400      	movs	r4, #0
 800c584:	00e3      	lsls	r3, r4, #3
 800c586:	9307      	str	r3, [sp, #28]
 800c588:	4bc7      	ldr	r3, [pc, #796]	; (800c8a8 <__ieee754_pow+0x768>)
 800c58a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c58e:	ed93 7b00 	vldr	d7, [r3]
 800c592:	4629      	mov	r1, r5
 800c594:	ec53 2b17 	vmov	r2, r3, d7
 800c598:	eeb0 9a47 	vmov.f32	s18, s14
 800c59c:	eef0 9a67 	vmov.f32	s19, s15
 800c5a0:	4682      	mov	sl, r0
 800c5a2:	f7f3 fe81 	bl	80002a8 <__aeabi_dsub>
 800c5a6:	4652      	mov	r2, sl
 800c5a8:	4606      	mov	r6, r0
 800c5aa:	460f      	mov	r7, r1
 800c5ac:	462b      	mov	r3, r5
 800c5ae:	ec51 0b19 	vmov	r0, r1, d9
 800c5b2:	f7f3 fe7b 	bl	80002ac <__adddf3>
 800c5b6:	4602      	mov	r2, r0
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	2000      	movs	r0, #0
 800c5bc:	49bb      	ldr	r1, [pc, #748]	; (800c8ac <__ieee754_pow+0x76c>)
 800c5be:	f7f4 f955 	bl	800086c <__aeabi_ddiv>
 800c5c2:	ec41 0b1a 	vmov	d10, r0, r1
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	4639      	mov	r1, r7
 800c5ce:	f7f4 f823 	bl	8000618 <__aeabi_dmul>
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5d8:	9302      	str	r3, [sp, #8]
 800c5da:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c5de:	46ab      	mov	fp, r5
 800c5e0:	106d      	asrs	r5, r5, #1
 800c5e2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c5e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c5ea:	ec41 0b18 	vmov	d8, r0, r1
 800c5ee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	4640      	mov	r0, r8
 800c5f6:	4649      	mov	r1, r9
 800c5f8:	4614      	mov	r4, r2
 800c5fa:	461d      	mov	r5, r3
 800c5fc:	f7f4 f80c 	bl	8000618 <__aeabi_dmul>
 800c600:	4602      	mov	r2, r0
 800c602:	460b      	mov	r3, r1
 800c604:	4630      	mov	r0, r6
 800c606:	4639      	mov	r1, r7
 800c608:	f7f3 fe4e 	bl	80002a8 <__aeabi_dsub>
 800c60c:	ec53 2b19 	vmov	r2, r3, d9
 800c610:	4606      	mov	r6, r0
 800c612:	460f      	mov	r7, r1
 800c614:	4620      	mov	r0, r4
 800c616:	4629      	mov	r1, r5
 800c618:	f7f3 fe46 	bl	80002a8 <__aeabi_dsub>
 800c61c:	4602      	mov	r2, r0
 800c61e:	460b      	mov	r3, r1
 800c620:	4650      	mov	r0, sl
 800c622:	4659      	mov	r1, fp
 800c624:	f7f3 fe40 	bl	80002a8 <__aeabi_dsub>
 800c628:	4642      	mov	r2, r8
 800c62a:	464b      	mov	r3, r9
 800c62c:	f7f3 fff4 	bl	8000618 <__aeabi_dmul>
 800c630:	4602      	mov	r2, r0
 800c632:	460b      	mov	r3, r1
 800c634:	4630      	mov	r0, r6
 800c636:	4639      	mov	r1, r7
 800c638:	f7f3 fe36 	bl	80002a8 <__aeabi_dsub>
 800c63c:	ec53 2b1a 	vmov	r2, r3, d10
 800c640:	f7f3 ffea 	bl	8000618 <__aeabi_dmul>
 800c644:	ec53 2b18 	vmov	r2, r3, d8
 800c648:	ec41 0b19 	vmov	d9, r0, r1
 800c64c:	ec51 0b18 	vmov	r0, r1, d8
 800c650:	f7f3 ffe2 	bl	8000618 <__aeabi_dmul>
 800c654:	a37c      	add	r3, pc, #496	; (adr r3, 800c848 <__ieee754_pow+0x708>)
 800c656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65a:	4604      	mov	r4, r0
 800c65c:	460d      	mov	r5, r1
 800c65e:	f7f3 ffdb 	bl	8000618 <__aeabi_dmul>
 800c662:	a37b      	add	r3, pc, #492	; (adr r3, 800c850 <__ieee754_pow+0x710>)
 800c664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c668:	f7f3 fe20 	bl	80002ac <__adddf3>
 800c66c:	4622      	mov	r2, r4
 800c66e:	462b      	mov	r3, r5
 800c670:	f7f3 ffd2 	bl	8000618 <__aeabi_dmul>
 800c674:	a378      	add	r3, pc, #480	; (adr r3, 800c858 <__ieee754_pow+0x718>)
 800c676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67a:	f7f3 fe17 	bl	80002ac <__adddf3>
 800c67e:	4622      	mov	r2, r4
 800c680:	462b      	mov	r3, r5
 800c682:	f7f3 ffc9 	bl	8000618 <__aeabi_dmul>
 800c686:	a376      	add	r3, pc, #472	; (adr r3, 800c860 <__ieee754_pow+0x720>)
 800c688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68c:	f7f3 fe0e 	bl	80002ac <__adddf3>
 800c690:	4622      	mov	r2, r4
 800c692:	462b      	mov	r3, r5
 800c694:	f7f3 ffc0 	bl	8000618 <__aeabi_dmul>
 800c698:	a373      	add	r3, pc, #460	; (adr r3, 800c868 <__ieee754_pow+0x728>)
 800c69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69e:	f7f3 fe05 	bl	80002ac <__adddf3>
 800c6a2:	4622      	mov	r2, r4
 800c6a4:	462b      	mov	r3, r5
 800c6a6:	f7f3 ffb7 	bl	8000618 <__aeabi_dmul>
 800c6aa:	a371      	add	r3, pc, #452	; (adr r3, 800c870 <__ieee754_pow+0x730>)
 800c6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b0:	f7f3 fdfc 	bl	80002ac <__adddf3>
 800c6b4:	4622      	mov	r2, r4
 800c6b6:	4606      	mov	r6, r0
 800c6b8:	460f      	mov	r7, r1
 800c6ba:	462b      	mov	r3, r5
 800c6bc:	4620      	mov	r0, r4
 800c6be:	4629      	mov	r1, r5
 800c6c0:	f7f3 ffaa 	bl	8000618 <__aeabi_dmul>
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	4630      	mov	r0, r6
 800c6ca:	4639      	mov	r1, r7
 800c6cc:	f7f3 ffa4 	bl	8000618 <__aeabi_dmul>
 800c6d0:	4642      	mov	r2, r8
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	460d      	mov	r5, r1
 800c6d6:	464b      	mov	r3, r9
 800c6d8:	ec51 0b18 	vmov	r0, r1, d8
 800c6dc:	f7f3 fde6 	bl	80002ac <__adddf3>
 800c6e0:	ec53 2b19 	vmov	r2, r3, d9
 800c6e4:	f7f3 ff98 	bl	8000618 <__aeabi_dmul>
 800c6e8:	4622      	mov	r2, r4
 800c6ea:	462b      	mov	r3, r5
 800c6ec:	f7f3 fdde 	bl	80002ac <__adddf3>
 800c6f0:	4642      	mov	r2, r8
 800c6f2:	4682      	mov	sl, r0
 800c6f4:	468b      	mov	fp, r1
 800c6f6:	464b      	mov	r3, r9
 800c6f8:	4640      	mov	r0, r8
 800c6fa:	4649      	mov	r1, r9
 800c6fc:	f7f3 ff8c 	bl	8000618 <__aeabi_dmul>
 800c700:	4b6b      	ldr	r3, [pc, #428]	; (800c8b0 <__ieee754_pow+0x770>)
 800c702:	2200      	movs	r2, #0
 800c704:	4606      	mov	r6, r0
 800c706:	460f      	mov	r7, r1
 800c708:	f7f3 fdd0 	bl	80002ac <__adddf3>
 800c70c:	4652      	mov	r2, sl
 800c70e:	465b      	mov	r3, fp
 800c710:	f7f3 fdcc 	bl	80002ac <__adddf3>
 800c714:	2000      	movs	r0, #0
 800c716:	4604      	mov	r4, r0
 800c718:	460d      	mov	r5, r1
 800c71a:	4602      	mov	r2, r0
 800c71c:	460b      	mov	r3, r1
 800c71e:	4640      	mov	r0, r8
 800c720:	4649      	mov	r1, r9
 800c722:	f7f3 ff79 	bl	8000618 <__aeabi_dmul>
 800c726:	4b62      	ldr	r3, [pc, #392]	; (800c8b0 <__ieee754_pow+0x770>)
 800c728:	4680      	mov	r8, r0
 800c72a:	4689      	mov	r9, r1
 800c72c:	2200      	movs	r2, #0
 800c72e:	4620      	mov	r0, r4
 800c730:	4629      	mov	r1, r5
 800c732:	f7f3 fdb9 	bl	80002a8 <__aeabi_dsub>
 800c736:	4632      	mov	r2, r6
 800c738:	463b      	mov	r3, r7
 800c73a:	f7f3 fdb5 	bl	80002a8 <__aeabi_dsub>
 800c73e:	4602      	mov	r2, r0
 800c740:	460b      	mov	r3, r1
 800c742:	4650      	mov	r0, sl
 800c744:	4659      	mov	r1, fp
 800c746:	f7f3 fdaf 	bl	80002a8 <__aeabi_dsub>
 800c74a:	ec53 2b18 	vmov	r2, r3, d8
 800c74e:	f7f3 ff63 	bl	8000618 <__aeabi_dmul>
 800c752:	4622      	mov	r2, r4
 800c754:	4606      	mov	r6, r0
 800c756:	460f      	mov	r7, r1
 800c758:	462b      	mov	r3, r5
 800c75a:	ec51 0b19 	vmov	r0, r1, d9
 800c75e:	f7f3 ff5b 	bl	8000618 <__aeabi_dmul>
 800c762:	4602      	mov	r2, r0
 800c764:	460b      	mov	r3, r1
 800c766:	4630      	mov	r0, r6
 800c768:	4639      	mov	r1, r7
 800c76a:	f7f3 fd9f 	bl	80002ac <__adddf3>
 800c76e:	4606      	mov	r6, r0
 800c770:	460f      	mov	r7, r1
 800c772:	4602      	mov	r2, r0
 800c774:	460b      	mov	r3, r1
 800c776:	4640      	mov	r0, r8
 800c778:	4649      	mov	r1, r9
 800c77a:	f7f3 fd97 	bl	80002ac <__adddf3>
 800c77e:	a33e      	add	r3, pc, #248	; (adr r3, 800c878 <__ieee754_pow+0x738>)
 800c780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c784:	2000      	movs	r0, #0
 800c786:	4604      	mov	r4, r0
 800c788:	460d      	mov	r5, r1
 800c78a:	f7f3 ff45 	bl	8000618 <__aeabi_dmul>
 800c78e:	4642      	mov	r2, r8
 800c790:	ec41 0b18 	vmov	d8, r0, r1
 800c794:	464b      	mov	r3, r9
 800c796:	4620      	mov	r0, r4
 800c798:	4629      	mov	r1, r5
 800c79a:	f7f3 fd85 	bl	80002a8 <__aeabi_dsub>
 800c79e:	4602      	mov	r2, r0
 800c7a0:	460b      	mov	r3, r1
 800c7a2:	4630      	mov	r0, r6
 800c7a4:	4639      	mov	r1, r7
 800c7a6:	f7f3 fd7f 	bl	80002a8 <__aeabi_dsub>
 800c7aa:	a335      	add	r3, pc, #212	; (adr r3, 800c880 <__ieee754_pow+0x740>)
 800c7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b0:	f7f3 ff32 	bl	8000618 <__aeabi_dmul>
 800c7b4:	a334      	add	r3, pc, #208	; (adr r3, 800c888 <__ieee754_pow+0x748>)
 800c7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ba:	4606      	mov	r6, r0
 800c7bc:	460f      	mov	r7, r1
 800c7be:	4620      	mov	r0, r4
 800c7c0:	4629      	mov	r1, r5
 800c7c2:	f7f3 ff29 	bl	8000618 <__aeabi_dmul>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	4630      	mov	r0, r6
 800c7cc:	4639      	mov	r1, r7
 800c7ce:	f7f3 fd6d 	bl	80002ac <__adddf3>
 800c7d2:	9a07      	ldr	r2, [sp, #28]
 800c7d4:	4b37      	ldr	r3, [pc, #220]	; (800c8b4 <__ieee754_pow+0x774>)
 800c7d6:	4413      	add	r3, r2
 800c7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7dc:	f7f3 fd66 	bl	80002ac <__adddf3>
 800c7e0:	4682      	mov	sl, r0
 800c7e2:	9805      	ldr	r0, [sp, #20]
 800c7e4:	468b      	mov	fp, r1
 800c7e6:	f7f3 fead 	bl	8000544 <__aeabi_i2d>
 800c7ea:	9a07      	ldr	r2, [sp, #28]
 800c7ec:	4b32      	ldr	r3, [pc, #200]	; (800c8b8 <__ieee754_pow+0x778>)
 800c7ee:	4413      	add	r3, r2
 800c7f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c7f4:	4606      	mov	r6, r0
 800c7f6:	460f      	mov	r7, r1
 800c7f8:	4652      	mov	r2, sl
 800c7fa:	465b      	mov	r3, fp
 800c7fc:	ec51 0b18 	vmov	r0, r1, d8
 800c800:	f7f3 fd54 	bl	80002ac <__adddf3>
 800c804:	4642      	mov	r2, r8
 800c806:	464b      	mov	r3, r9
 800c808:	f7f3 fd50 	bl	80002ac <__adddf3>
 800c80c:	4632      	mov	r2, r6
 800c80e:	463b      	mov	r3, r7
 800c810:	f7f3 fd4c 	bl	80002ac <__adddf3>
 800c814:	2000      	movs	r0, #0
 800c816:	4632      	mov	r2, r6
 800c818:	463b      	mov	r3, r7
 800c81a:	4604      	mov	r4, r0
 800c81c:	460d      	mov	r5, r1
 800c81e:	f7f3 fd43 	bl	80002a8 <__aeabi_dsub>
 800c822:	4642      	mov	r2, r8
 800c824:	464b      	mov	r3, r9
 800c826:	f7f3 fd3f 	bl	80002a8 <__aeabi_dsub>
 800c82a:	ec53 2b18 	vmov	r2, r3, d8
 800c82e:	f7f3 fd3b 	bl	80002a8 <__aeabi_dsub>
 800c832:	4602      	mov	r2, r0
 800c834:	460b      	mov	r3, r1
 800c836:	4650      	mov	r0, sl
 800c838:	4659      	mov	r1, fp
 800c83a:	e610      	b.n	800c45e <__ieee754_pow+0x31e>
 800c83c:	2401      	movs	r4, #1
 800c83e:	e6a1      	b.n	800c584 <__ieee754_pow+0x444>
 800c840:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c890 <__ieee754_pow+0x750>
 800c844:	e617      	b.n	800c476 <__ieee754_pow+0x336>
 800c846:	bf00      	nop
 800c848:	4a454eef 	.word	0x4a454eef
 800c84c:	3fca7e28 	.word	0x3fca7e28
 800c850:	93c9db65 	.word	0x93c9db65
 800c854:	3fcd864a 	.word	0x3fcd864a
 800c858:	a91d4101 	.word	0xa91d4101
 800c85c:	3fd17460 	.word	0x3fd17460
 800c860:	518f264d 	.word	0x518f264d
 800c864:	3fd55555 	.word	0x3fd55555
 800c868:	db6fabff 	.word	0xdb6fabff
 800c86c:	3fdb6db6 	.word	0x3fdb6db6
 800c870:	33333303 	.word	0x33333303
 800c874:	3fe33333 	.word	0x3fe33333
 800c878:	e0000000 	.word	0xe0000000
 800c87c:	3feec709 	.word	0x3feec709
 800c880:	dc3a03fd 	.word	0xdc3a03fd
 800c884:	3feec709 	.word	0x3feec709
 800c888:	145b01f5 	.word	0x145b01f5
 800c88c:	be3e2fe0 	.word	0xbe3e2fe0
 800c890:	00000000 	.word	0x00000000
 800c894:	3ff00000 	.word	0x3ff00000
 800c898:	7ff00000 	.word	0x7ff00000
 800c89c:	43400000 	.word	0x43400000
 800c8a0:	0003988e 	.word	0x0003988e
 800c8a4:	000bb679 	.word	0x000bb679
 800c8a8:	0800d710 	.word	0x0800d710
 800c8ac:	3ff00000 	.word	0x3ff00000
 800c8b0:	40080000 	.word	0x40080000
 800c8b4:	0800d730 	.word	0x0800d730
 800c8b8:	0800d720 	.word	0x0800d720
 800c8bc:	a3b3      	add	r3, pc, #716	; (adr r3, 800cb8c <__ieee754_pow+0xa4c>)
 800c8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c2:	4640      	mov	r0, r8
 800c8c4:	4649      	mov	r1, r9
 800c8c6:	f7f3 fcf1 	bl	80002ac <__adddf3>
 800c8ca:	4622      	mov	r2, r4
 800c8cc:	ec41 0b1a 	vmov	d10, r0, r1
 800c8d0:	462b      	mov	r3, r5
 800c8d2:	4630      	mov	r0, r6
 800c8d4:	4639      	mov	r1, r7
 800c8d6:	f7f3 fce7 	bl	80002a8 <__aeabi_dsub>
 800c8da:	4602      	mov	r2, r0
 800c8dc:	460b      	mov	r3, r1
 800c8de:	ec51 0b1a 	vmov	r0, r1, d10
 800c8e2:	f7f4 f929 	bl	8000b38 <__aeabi_dcmpgt>
 800c8e6:	2800      	cmp	r0, #0
 800c8e8:	f47f ae04 	bne.w	800c4f4 <__ieee754_pow+0x3b4>
 800c8ec:	4aa2      	ldr	r2, [pc, #648]	; (800cb78 <__ieee754_pow+0xa38>)
 800c8ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	f340 8107 	ble.w	800cb06 <__ieee754_pow+0x9c6>
 800c8f8:	151b      	asrs	r3, r3, #20
 800c8fa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c8fe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c902:	fa4a fa03 	asr.w	sl, sl, r3
 800c906:	44da      	add	sl, fp
 800c908:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c90c:	489b      	ldr	r0, [pc, #620]	; (800cb7c <__ieee754_pow+0xa3c>)
 800c90e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c912:	4108      	asrs	r0, r1
 800c914:	ea00 030a 	and.w	r3, r0, sl
 800c918:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c91c:	f1c1 0114 	rsb	r1, r1, #20
 800c920:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c924:	fa4a fa01 	asr.w	sl, sl, r1
 800c928:	f1bb 0f00 	cmp.w	fp, #0
 800c92c:	f04f 0200 	mov.w	r2, #0
 800c930:	4620      	mov	r0, r4
 800c932:	4629      	mov	r1, r5
 800c934:	bfb8      	it	lt
 800c936:	f1ca 0a00 	rsblt	sl, sl, #0
 800c93a:	f7f3 fcb5 	bl	80002a8 <__aeabi_dsub>
 800c93e:	ec41 0b19 	vmov	d9, r0, r1
 800c942:	4642      	mov	r2, r8
 800c944:	464b      	mov	r3, r9
 800c946:	ec51 0b19 	vmov	r0, r1, d9
 800c94a:	f7f3 fcaf 	bl	80002ac <__adddf3>
 800c94e:	a37a      	add	r3, pc, #488	; (adr r3, 800cb38 <__ieee754_pow+0x9f8>)
 800c950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c954:	2000      	movs	r0, #0
 800c956:	4604      	mov	r4, r0
 800c958:	460d      	mov	r5, r1
 800c95a:	f7f3 fe5d 	bl	8000618 <__aeabi_dmul>
 800c95e:	ec53 2b19 	vmov	r2, r3, d9
 800c962:	4606      	mov	r6, r0
 800c964:	460f      	mov	r7, r1
 800c966:	4620      	mov	r0, r4
 800c968:	4629      	mov	r1, r5
 800c96a:	f7f3 fc9d 	bl	80002a8 <__aeabi_dsub>
 800c96e:	4602      	mov	r2, r0
 800c970:	460b      	mov	r3, r1
 800c972:	4640      	mov	r0, r8
 800c974:	4649      	mov	r1, r9
 800c976:	f7f3 fc97 	bl	80002a8 <__aeabi_dsub>
 800c97a:	a371      	add	r3, pc, #452	; (adr r3, 800cb40 <__ieee754_pow+0xa00>)
 800c97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c980:	f7f3 fe4a 	bl	8000618 <__aeabi_dmul>
 800c984:	a370      	add	r3, pc, #448	; (adr r3, 800cb48 <__ieee754_pow+0xa08>)
 800c986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c98a:	4680      	mov	r8, r0
 800c98c:	4689      	mov	r9, r1
 800c98e:	4620      	mov	r0, r4
 800c990:	4629      	mov	r1, r5
 800c992:	f7f3 fe41 	bl	8000618 <__aeabi_dmul>
 800c996:	4602      	mov	r2, r0
 800c998:	460b      	mov	r3, r1
 800c99a:	4640      	mov	r0, r8
 800c99c:	4649      	mov	r1, r9
 800c99e:	f7f3 fc85 	bl	80002ac <__adddf3>
 800c9a2:	4604      	mov	r4, r0
 800c9a4:	460d      	mov	r5, r1
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	4630      	mov	r0, r6
 800c9ac:	4639      	mov	r1, r7
 800c9ae:	f7f3 fc7d 	bl	80002ac <__adddf3>
 800c9b2:	4632      	mov	r2, r6
 800c9b4:	463b      	mov	r3, r7
 800c9b6:	4680      	mov	r8, r0
 800c9b8:	4689      	mov	r9, r1
 800c9ba:	f7f3 fc75 	bl	80002a8 <__aeabi_dsub>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	4629      	mov	r1, r5
 800c9c6:	f7f3 fc6f 	bl	80002a8 <__aeabi_dsub>
 800c9ca:	4642      	mov	r2, r8
 800c9cc:	4606      	mov	r6, r0
 800c9ce:	460f      	mov	r7, r1
 800c9d0:	464b      	mov	r3, r9
 800c9d2:	4640      	mov	r0, r8
 800c9d4:	4649      	mov	r1, r9
 800c9d6:	f7f3 fe1f 	bl	8000618 <__aeabi_dmul>
 800c9da:	a35d      	add	r3, pc, #372	; (adr r3, 800cb50 <__ieee754_pow+0xa10>)
 800c9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e0:	4604      	mov	r4, r0
 800c9e2:	460d      	mov	r5, r1
 800c9e4:	f7f3 fe18 	bl	8000618 <__aeabi_dmul>
 800c9e8:	a35b      	add	r3, pc, #364	; (adr r3, 800cb58 <__ieee754_pow+0xa18>)
 800c9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ee:	f7f3 fc5b 	bl	80002a8 <__aeabi_dsub>
 800c9f2:	4622      	mov	r2, r4
 800c9f4:	462b      	mov	r3, r5
 800c9f6:	f7f3 fe0f 	bl	8000618 <__aeabi_dmul>
 800c9fa:	a359      	add	r3, pc, #356	; (adr r3, 800cb60 <__ieee754_pow+0xa20>)
 800c9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca00:	f7f3 fc54 	bl	80002ac <__adddf3>
 800ca04:	4622      	mov	r2, r4
 800ca06:	462b      	mov	r3, r5
 800ca08:	f7f3 fe06 	bl	8000618 <__aeabi_dmul>
 800ca0c:	a356      	add	r3, pc, #344	; (adr r3, 800cb68 <__ieee754_pow+0xa28>)
 800ca0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca12:	f7f3 fc49 	bl	80002a8 <__aeabi_dsub>
 800ca16:	4622      	mov	r2, r4
 800ca18:	462b      	mov	r3, r5
 800ca1a:	f7f3 fdfd 	bl	8000618 <__aeabi_dmul>
 800ca1e:	a354      	add	r3, pc, #336	; (adr r3, 800cb70 <__ieee754_pow+0xa30>)
 800ca20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca24:	f7f3 fc42 	bl	80002ac <__adddf3>
 800ca28:	4622      	mov	r2, r4
 800ca2a:	462b      	mov	r3, r5
 800ca2c:	f7f3 fdf4 	bl	8000618 <__aeabi_dmul>
 800ca30:	4602      	mov	r2, r0
 800ca32:	460b      	mov	r3, r1
 800ca34:	4640      	mov	r0, r8
 800ca36:	4649      	mov	r1, r9
 800ca38:	f7f3 fc36 	bl	80002a8 <__aeabi_dsub>
 800ca3c:	4604      	mov	r4, r0
 800ca3e:	460d      	mov	r5, r1
 800ca40:	4602      	mov	r2, r0
 800ca42:	460b      	mov	r3, r1
 800ca44:	4640      	mov	r0, r8
 800ca46:	4649      	mov	r1, r9
 800ca48:	f7f3 fde6 	bl	8000618 <__aeabi_dmul>
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	ec41 0b19 	vmov	d9, r0, r1
 800ca52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ca56:	4620      	mov	r0, r4
 800ca58:	4629      	mov	r1, r5
 800ca5a:	f7f3 fc25 	bl	80002a8 <__aeabi_dsub>
 800ca5e:	4602      	mov	r2, r0
 800ca60:	460b      	mov	r3, r1
 800ca62:	ec51 0b19 	vmov	r0, r1, d9
 800ca66:	f7f3 ff01 	bl	800086c <__aeabi_ddiv>
 800ca6a:	4632      	mov	r2, r6
 800ca6c:	4604      	mov	r4, r0
 800ca6e:	460d      	mov	r5, r1
 800ca70:	463b      	mov	r3, r7
 800ca72:	4640      	mov	r0, r8
 800ca74:	4649      	mov	r1, r9
 800ca76:	f7f3 fdcf 	bl	8000618 <__aeabi_dmul>
 800ca7a:	4632      	mov	r2, r6
 800ca7c:	463b      	mov	r3, r7
 800ca7e:	f7f3 fc15 	bl	80002ac <__adddf3>
 800ca82:	4602      	mov	r2, r0
 800ca84:	460b      	mov	r3, r1
 800ca86:	4620      	mov	r0, r4
 800ca88:	4629      	mov	r1, r5
 800ca8a:	f7f3 fc0d 	bl	80002a8 <__aeabi_dsub>
 800ca8e:	4642      	mov	r2, r8
 800ca90:	464b      	mov	r3, r9
 800ca92:	f7f3 fc09 	bl	80002a8 <__aeabi_dsub>
 800ca96:	460b      	mov	r3, r1
 800ca98:	4602      	mov	r2, r0
 800ca9a:	4939      	ldr	r1, [pc, #228]	; (800cb80 <__ieee754_pow+0xa40>)
 800ca9c:	2000      	movs	r0, #0
 800ca9e:	f7f3 fc03 	bl	80002a8 <__aeabi_dsub>
 800caa2:	ec41 0b10 	vmov	d0, r0, r1
 800caa6:	ee10 3a90 	vmov	r3, s1
 800caaa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800caae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cab2:	da2b      	bge.n	800cb0c <__ieee754_pow+0x9cc>
 800cab4:	4650      	mov	r0, sl
 800cab6:	f000 f86f 	bl	800cb98 <scalbn>
 800caba:	ec51 0b10 	vmov	r0, r1, d0
 800cabe:	ec53 2b18 	vmov	r2, r3, d8
 800cac2:	f7ff bbee 	b.w	800c2a2 <__ieee754_pow+0x162>
 800cac6:	4b2f      	ldr	r3, [pc, #188]	; (800cb84 <__ieee754_pow+0xa44>)
 800cac8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cacc:	429e      	cmp	r6, r3
 800cace:	f77f af0d 	ble.w	800c8ec <__ieee754_pow+0x7ac>
 800cad2:	4b2d      	ldr	r3, [pc, #180]	; (800cb88 <__ieee754_pow+0xa48>)
 800cad4:	440b      	add	r3, r1
 800cad6:	4303      	orrs	r3, r0
 800cad8:	d009      	beq.n	800caee <__ieee754_pow+0x9ae>
 800cada:	ec51 0b18 	vmov	r0, r1, d8
 800cade:	2200      	movs	r2, #0
 800cae0:	2300      	movs	r3, #0
 800cae2:	f7f4 f80b 	bl	8000afc <__aeabi_dcmplt>
 800cae6:	3800      	subs	r0, #0
 800cae8:	bf18      	it	ne
 800caea:	2001      	movne	r0, #1
 800caec:	e448      	b.n	800c380 <__ieee754_pow+0x240>
 800caee:	4622      	mov	r2, r4
 800caf0:	462b      	mov	r3, r5
 800caf2:	f7f3 fbd9 	bl	80002a8 <__aeabi_dsub>
 800caf6:	4642      	mov	r2, r8
 800caf8:	464b      	mov	r3, r9
 800cafa:	f7f4 f813 	bl	8000b24 <__aeabi_dcmpge>
 800cafe:	2800      	cmp	r0, #0
 800cb00:	f43f aef4 	beq.w	800c8ec <__ieee754_pow+0x7ac>
 800cb04:	e7e9      	b.n	800cada <__ieee754_pow+0x99a>
 800cb06:	f04f 0a00 	mov.w	sl, #0
 800cb0a:	e71a      	b.n	800c942 <__ieee754_pow+0x802>
 800cb0c:	ec51 0b10 	vmov	r0, r1, d0
 800cb10:	4619      	mov	r1, r3
 800cb12:	e7d4      	b.n	800cabe <__ieee754_pow+0x97e>
 800cb14:	491a      	ldr	r1, [pc, #104]	; (800cb80 <__ieee754_pow+0xa40>)
 800cb16:	2000      	movs	r0, #0
 800cb18:	f7ff bb31 	b.w	800c17e <__ieee754_pow+0x3e>
 800cb1c:	2000      	movs	r0, #0
 800cb1e:	2100      	movs	r1, #0
 800cb20:	f7ff bb2d 	b.w	800c17e <__ieee754_pow+0x3e>
 800cb24:	4630      	mov	r0, r6
 800cb26:	4639      	mov	r1, r7
 800cb28:	f7ff bb29 	b.w	800c17e <__ieee754_pow+0x3e>
 800cb2c:	9204      	str	r2, [sp, #16]
 800cb2e:	f7ff bb7b 	b.w	800c228 <__ieee754_pow+0xe8>
 800cb32:	2300      	movs	r3, #0
 800cb34:	f7ff bb65 	b.w	800c202 <__ieee754_pow+0xc2>
 800cb38:	00000000 	.word	0x00000000
 800cb3c:	3fe62e43 	.word	0x3fe62e43
 800cb40:	fefa39ef 	.word	0xfefa39ef
 800cb44:	3fe62e42 	.word	0x3fe62e42
 800cb48:	0ca86c39 	.word	0x0ca86c39
 800cb4c:	be205c61 	.word	0xbe205c61
 800cb50:	72bea4d0 	.word	0x72bea4d0
 800cb54:	3e663769 	.word	0x3e663769
 800cb58:	c5d26bf1 	.word	0xc5d26bf1
 800cb5c:	3ebbbd41 	.word	0x3ebbbd41
 800cb60:	af25de2c 	.word	0xaf25de2c
 800cb64:	3f11566a 	.word	0x3f11566a
 800cb68:	16bebd93 	.word	0x16bebd93
 800cb6c:	3f66c16c 	.word	0x3f66c16c
 800cb70:	5555553e 	.word	0x5555553e
 800cb74:	3fc55555 	.word	0x3fc55555
 800cb78:	3fe00000 	.word	0x3fe00000
 800cb7c:	fff00000 	.word	0xfff00000
 800cb80:	3ff00000 	.word	0x3ff00000
 800cb84:	4090cbff 	.word	0x4090cbff
 800cb88:	3f6f3400 	.word	0x3f6f3400
 800cb8c:	652b82fe 	.word	0x652b82fe
 800cb90:	3c971547 	.word	0x3c971547
 800cb94:	00000000 	.word	0x00000000

0800cb98 <scalbn>:
 800cb98:	b570      	push	{r4, r5, r6, lr}
 800cb9a:	ec55 4b10 	vmov	r4, r5, d0
 800cb9e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800cba2:	4606      	mov	r6, r0
 800cba4:	462b      	mov	r3, r5
 800cba6:	b999      	cbnz	r1, 800cbd0 <scalbn+0x38>
 800cba8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cbac:	4323      	orrs	r3, r4
 800cbae:	d03f      	beq.n	800cc30 <scalbn+0x98>
 800cbb0:	4b35      	ldr	r3, [pc, #212]	; (800cc88 <scalbn+0xf0>)
 800cbb2:	4629      	mov	r1, r5
 800cbb4:	ee10 0a10 	vmov	r0, s0
 800cbb8:	2200      	movs	r2, #0
 800cbba:	f7f3 fd2d 	bl	8000618 <__aeabi_dmul>
 800cbbe:	4b33      	ldr	r3, [pc, #204]	; (800cc8c <scalbn+0xf4>)
 800cbc0:	429e      	cmp	r6, r3
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	460d      	mov	r5, r1
 800cbc6:	da10      	bge.n	800cbea <scalbn+0x52>
 800cbc8:	a327      	add	r3, pc, #156	; (adr r3, 800cc68 <scalbn+0xd0>)
 800cbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbce:	e01f      	b.n	800cc10 <scalbn+0x78>
 800cbd0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800cbd4:	4291      	cmp	r1, r2
 800cbd6:	d10c      	bne.n	800cbf2 <scalbn+0x5a>
 800cbd8:	ee10 2a10 	vmov	r2, s0
 800cbdc:	4620      	mov	r0, r4
 800cbde:	4629      	mov	r1, r5
 800cbe0:	f7f3 fb64 	bl	80002ac <__adddf3>
 800cbe4:	4604      	mov	r4, r0
 800cbe6:	460d      	mov	r5, r1
 800cbe8:	e022      	b.n	800cc30 <scalbn+0x98>
 800cbea:	460b      	mov	r3, r1
 800cbec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cbf0:	3936      	subs	r1, #54	; 0x36
 800cbf2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800cbf6:	4296      	cmp	r6, r2
 800cbf8:	dd0d      	ble.n	800cc16 <scalbn+0x7e>
 800cbfa:	2d00      	cmp	r5, #0
 800cbfc:	a11c      	add	r1, pc, #112	; (adr r1, 800cc70 <scalbn+0xd8>)
 800cbfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc02:	da02      	bge.n	800cc0a <scalbn+0x72>
 800cc04:	a11c      	add	r1, pc, #112	; (adr r1, 800cc78 <scalbn+0xe0>)
 800cc06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc0a:	a319      	add	r3, pc, #100	; (adr r3, 800cc70 <scalbn+0xd8>)
 800cc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc10:	f7f3 fd02 	bl	8000618 <__aeabi_dmul>
 800cc14:	e7e6      	b.n	800cbe4 <scalbn+0x4c>
 800cc16:	1872      	adds	r2, r6, r1
 800cc18:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cc1c:	428a      	cmp	r2, r1
 800cc1e:	dcec      	bgt.n	800cbfa <scalbn+0x62>
 800cc20:	2a00      	cmp	r2, #0
 800cc22:	dd08      	ble.n	800cc36 <scalbn+0x9e>
 800cc24:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cc28:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cc2c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cc30:	ec45 4b10 	vmov	d0, r4, r5
 800cc34:	bd70      	pop	{r4, r5, r6, pc}
 800cc36:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cc3a:	da08      	bge.n	800cc4e <scalbn+0xb6>
 800cc3c:	2d00      	cmp	r5, #0
 800cc3e:	a10a      	add	r1, pc, #40	; (adr r1, 800cc68 <scalbn+0xd0>)
 800cc40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc44:	dac0      	bge.n	800cbc8 <scalbn+0x30>
 800cc46:	a10e      	add	r1, pc, #56	; (adr r1, 800cc80 <scalbn+0xe8>)
 800cc48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc4c:	e7bc      	b.n	800cbc8 <scalbn+0x30>
 800cc4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cc52:	3236      	adds	r2, #54	; 0x36
 800cc54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cc58:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	4b0c      	ldr	r3, [pc, #48]	; (800cc90 <scalbn+0xf8>)
 800cc60:	2200      	movs	r2, #0
 800cc62:	e7d5      	b.n	800cc10 <scalbn+0x78>
 800cc64:	f3af 8000 	nop.w
 800cc68:	c2f8f359 	.word	0xc2f8f359
 800cc6c:	01a56e1f 	.word	0x01a56e1f
 800cc70:	8800759c 	.word	0x8800759c
 800cc74:	7e37e43c 	.word	0x7e37e43c
 800cc78:	8800759c 	.word	0x8800759c
 800cc7c:	fe37e43c 	.word	0xfe37e43c
 800cc80:	c2f8f359 	.word	0xc2f8f359
 800cc84:	81a56e1f 	.word	0x81a56e1f
 800cc88:	43500000 	.word	0x43500000
 800cc8c:	ffff3cb0 	.word	0xffff3cb0
 800cc90:	3c900000 	.word	0x3c900000

0800cc94 <with_errno>:
 800cc94:	b570      	push	{r4, r5, r6, lr}
 800cc96:	4604      	mov	r4, r0
 800cc98:	460d      	mov	r5, r1
 800cc9a:	4616      	mov	r6, r2
 800cc9c:	f7fb fff8 	bl	8008c90 <__errno>
 800cca0:	4629      	mov	r1, r5
 800cca2:	6006      	str	r6, [r0, #0]
 800cca4:	4620      	mov	r0, r4
 800cca6:	bd70      	pop	{r4, r5, r6, pc}

0800cca8 <xflow>:
 800cca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccaa:	4614      	mov	r4, r2
 800ccac:	461d      	mov	r5, r3
 800ccae:	b108      	cbz	r0, 800ccb4 <xflow+0xc>
 800ccb0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ccb4:	e9cd 2300 	strd	r2, r3, [sp]
 800ccb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	4629      	mov	r1, r5
 800ccc0:	f7f3 fcaa 	bl	8000618 <__aeabi_dmul>
 800ccc4:	2222      	movs	r2, #34	; 0x22
 800ccc6:	b003      	add	sp, #12
 800ccc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cccc:	f7ff bfe2 	b.w	800cc94 <with_errno>

0800ccd0 <__math_uflow>:
 800ccd0:	b508      	push	{r3, lr}
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ccd8:	f7ff ffe6 	bl	800cca8 <xflow>
 800ccdc:	ec41 0b10 	vmov	d0, r0, r1
 800cce0:	bd08      	pop	{r3, pc}

0800cce2 <__math_oflow>:
 800cce2:	b508      	push	{r3, lr}
 800cce4:	2200      	movs	r2, #0
 800cce6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ccea:	f7ff ffdd 	bl	800cca8 <xflow>
 800ccee:	ec41 0b10 	vmov	d0, r0, r1
 800ccf2:	bd08      	pop	{r3, pc}

0800ccf4 <__ieee754_sqrt>:
 800ccf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf8:	ec55 4b10 	vmov	r4, r5, d0
 800ccfc:	4e67      	ldr	r6, [pc, #412]	; (800ce9c <__ieee754_sqrt+0x1a8>)
 800ccfe:	43ae      	bics	r6, r5
 800cd00:	ee10 0a10 	vmov	r0, s0
 800cd04:	ee10 2a10 	vmov	r2, s0
 800cd08:	4629      	mov	r1, r5
 800cd0a:	462b      	mov	r3, r5
 800cd0c:	d10d      	bne.n	800cd2a <__ieee754_sqrt+0x36>
 800cd0e:	f7f3 fc83 	bl	8000618 <__aeabi_dmul>
 800cd12:	4602      	mov	r2, r0
 800cd14:	460b      	mov	r3, r1
 800cd16:	4620      	mov	r0, r4
 800cd18:	4629      	mov	r1, r5
 800cd1a:	f7f3 fac7 	bl	80002ac <__adddf3>
 800cd1e:	4604      	mov	r4, r0
 800cd20:	460d      	mov	r5, r1
 800cd22:	ec45 4b10 	vmov	d0, r4, r5
 800cd26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd2a:	2d00      	cmp	r5, #0
 800cd2c:	dc0b      	bgt.n	800cd46 <__ieee754_sqrt+0x52>
 800cd2e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cd32:	4326      	orrs	r6, r4
 800cd34:	d0f5      	beq.n	800cd22 <__ieee754_sqrt+0x2e>
 800cd36:	b135      	cbz	r5, 800cd46 <__ieee754_sqrt+0x52>
 800cd38:	f7f3 fab6 	bl	80002a8 <__aeabi_dsub>
 800cd3c:	4602      	mov	r2, r0
 800cd3e:	460b      	mov	r3, r1
 800cd40:	f7f3 fd94 	bl	800086c <__aeabi_ddiv>
 800cd44:	e7eb      	b.n	800cd1e <__ieee754_sqrt+0x2a>
 800cd46:	1509      	asrs	r1, r1, #20
 800cd48:	f000 808d 	beq.w	800ce66 <__ieee754_sqrt+0x172>
 800cd4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd50:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800cd54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd58:	07c9      	lsls	r1, r1, #31
 800cd5a:	bf5c      	itt	pl
 800cd5c:	005b      	lslpl	r3, r3, #1
 800cd5e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800cd62:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cd66:	bf58      	it	pl
 800cd68:	0052      	lslpl	r2, r2, #1
 800cd6a:	2500      	movs	r5, #0
 800cd6c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cd70:	1076      	asrs	r6, r6, #1
 800cd72:	0052      	lsls	r2, r2, #1
 800cd74:	f04f 0e16 	mov.w	lr, #22
 800cd78:	46ac      	mov	ip, r5
 800cd7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cd7e:	eb0c 0001 	add.w	r0, ip, r1
 800cd82:	4298      	cmp	r0, r3
 800cd84:	bfde      	ittt	le
 800cd86:	1a1b      	suble	r3, r3, r0
 800cd88:	eb00 0c01 	addle.w	ip, r0, r1
 800cd8c:	186d      	addle	r5, r5, r1
 800cd8e:	005b      	lsls	r3, r3, #1
 800cd90:	f1be 0e01 	subs.w	lr, lr, #1
 800cd94:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cd98:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cd9c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800cda0:	d1ed      	bne.n	800cd7e <__ieee754_sqrt+0x8a>
 800cda2:	4674      	mov	r4, lr
 800cda4:	2720      	movs	r7, #32
 800cda6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800cdaa:	4563      	cmp	r3, ip
 800cdac:	eb01 000e 	add.w	r0, r1, lr
 800cdb0:	dc02      	bgt.n	800cdb8 <__ieee754_sqrt+0xc4>
 800cdb2:	d113      	bne.n	800cddc <__ieee754_sqrt+0xe8>
 800cdb4:	4290      	cmp	r0, r2
 800cdb6:	d811      	bhi.n	800cddc <__ieee754_sqrt+0xe8>
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	eb00 0e01 	add.w	lr, r0, r1
 800cdbe:	da57      	bge.n	800ce70 <__ieee754_sqrt+0x17c>
 800cdc0:	f1be 0f00 	cmp.w	lr, #0
 800cdc4:	db54      	blt.n	800ce70 <__ieee754_sqrt+0x17c>
 800cdc6:	f10c 0801 	add.w	r8, ip, #1
 800cdca:	eba3 030c 	sub.w	r3, r3, ip
 800cdce:	4290      	cmp	r0, r2
 800cdd0:	bf88      	it	hi
 800cdd2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800cdd6:	1a12      	subs	r2, r2, r0
 800cdd8:	440c      	add	r4, r1
 800cdda:	46c4      	mov	ip, r8
 800cddc:	005b      	lsls	r3, r3, #1
 800cdde:	3f01      	subs	r7, #1
 800cde0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cde4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cde8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800cdec:	d1dd      	bne.n	800cdaa <__ieee754_sqrt+0xb6>
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	d01b      	beq.n	800ce2a <__ieee754_sqrt+0x136>
 800cdf2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800cea0 <__ieee754_sqrt+0x1ac>
 800cdf6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800cea4 <__ieee754_sqrt+0x1b0>
 800cdfa:	e9da 0100 	ldrd	r0, r1, [sl]
 800cdfe:	e9db 2300 	ldrd	r2, r3, [fp]
 800ce02:	f7f3 fa51 	bl	80002a8 <__aeabi_dsub>
 800ce06:	e9da 8900 	ldrd	r8, r9, [sl]
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	460b      	mov	r3, r1
 800ce0e:	4640      	mov	r0, r8
 800ce10:	4649      	mov	r1, r9
 800ce12:	f7f3 fe7d 	bl	8000b10 <__aeabi_dcmple>
 800ce16:	b140      	cbz	r0, 800ce2a <__ieee754_sqrt+0x136>
 800ce18:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ce1c:	e9da 0100 	ldrd	r0, r1, [sl]
 800ce20:	e9db 2300 	ldrd	r2, r3, [fp]
 800ce24:	d126      	bne.n	800ce74 <__ieee754_sqrt+0x180>
 800ce26:	3501      	adds	r5, #1
 800ce28:	463c      	mov	r4, r7
 800ce2a:	106a      	asrs	r2, r5, #1
 800ce2c:	0863      	lsrs	r3, r4, #1
 800ce2e:	07e9      	lsls	r1, r5, #31
 800ce30:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ce34:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ce38:	bf48      	it	mi
 800ce3a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ce3e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800ce42:	461c      	mov	r4, r3
 800ce44:	e76d      	b.n	800cd22 <__ieee754_sqrt+0x2e>
 800ce46:	0ad3      	lsrs	r3, r2, #11
 800ce48:	3815      	subs	r0, #21
 800ce4a:	0552      	lsls	r2, r2, #21
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d0fa      	beq.n	800ce46 <__ieee754_sqrt+0x152>
 800ce50:	02dc      	lsls	r4, r3, #11
 800ce52:	d50a      	bpl.n	800ce6a <__ieee754_sqrt+0x176>
 800ce54:	f1c1 0420 	rsb	r4, r1, #32
 800ce58:	fa22 f404 	lsr.w	r4, r2, r4
 800ce5c:	1e4d      	subs	r5, r1, #1
 800ce5e:	408a      	lsls	r2, r1
 800ce60:	4323      	orrs	r3, r4
 800ce62:	1b41      	subs	r1, r0, r5
 800ce64:	e772      	b.n	800cd4c <__ieee754_sqrt+0x58>
 800ce66:	4608      	mov	r0, r1
 800ce68:	e7f0      	b.n	800ce4c <__ieee754_sqrt+0x158>
 800ce6a:	005b      	lsls	r3, r3, #1
 800ce6c:	3101      	adds	r1, #1
 800ce6e:	e7ef      	b.n	800ce50 <__ieee754_sqrt+0x15c>
 800ce70:	46e0      	mov	r8, ip
 800ce72:	e7aa      	b.n	800cdca <__ieee754_sqrt+0xd6>
 800ce74:	f7f3 fa1a 	bl	80002ac <__adddf3>
 800ce78:	e9da 8900 	ldrd	r8, r9, [sl]
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	460b      	mov	r3, r1
 800ce80:	4640      	mov	r0, r8
 800ce82:	4649      	mov	r1, r9
 800ce84:	f7f3 fe3a 	bl	8000afc <__aeabi_dcmplt>
 800ce88:	b120      	cbz	r0, 800ce94 <__ieee754_sqrt+0x1a0>
 800ce8a:	1ca0      	adds	r0, r4, #2
 800ce8c:	bf08      	it	eq
 800ce8e:	3501      	addeq	r5, #1
 800ce90:	3402      	adds	r4, #2
 800ce92:	e7ca      	b.n	800ce2a <__ieee754_sqrt+0x136>
 800ce94:	3401      	adds	r4, #1
 800ce96:	f024 0401 	bic.w	r4, r4, #1
 800ce9a:	e7c6      	b.n	800ce2a <__ieee754_sqrt+0x136>
 800ce9c:	7ff00000 	.word	0x7ff00000
 800cea0:	20000200 	.word	0x20000200
 800cea4:	20000208 	.word	0x20000208

0800cea8 <_init>:
 800cea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceaa:	bf00      	nop
 800ceac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceae:	bc08      	pop	{r3}
 800ceb0:	469e      	mov	lr, r3
 800ceb2:	4770      	bx	lr

0800ceb4 <_fini>:
 800ceb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceb6:	bf00      	nop
 800ceb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceba:	bc08      	pop	{r3}
 800cebc:	469e      	mov	lr, r3
 800cebe:	4770      	bx	lr
